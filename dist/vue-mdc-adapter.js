/**
* @module vue-mdc-adapter 0.19.4-beta
* @exports VueMDCAdapter
* @copyright (c) 2017-present, Sebastien Tasson
* @license https://opensource.org/licenses/MIT
* @implements {"@material/tabs":"^1.0.0-0","material-components-web":"^1.0.0-0"}
* @requires {"vue":"^2.5.6"}
* @see https://github.com/stasson/vue-mdc-adapter
*/

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.VueMDCAdapter = factory());
}(this, function () { 'use strict';

  var supportsPassive_;
  /**
   * Determine whether the current browser supports passive event listeners, and if so, use them.
   * @param {!Window=} globalObj
   * @param {boolean=} forceRefresh
   * @return {boolean|{passive: boolean}}
   */

  function applyPassive() {
    var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (supportsPassive_ === undefined || forceRefresh) {
      var isSupported = false;

      try {
        globalObj.document.addEventListener('test', null, {
          get passive() {
            isSupported = {
              passive: true
            };
          }

        });
      } catch (e) {//empty
      }

      supportsPassive_ = isSupported;
    }

    return supportsPassive_;
  }

  function autoInit(plugin) {
    // Auto-install
    var _Vue = null;

    if (typeof window !== 'undefined') {
      _Vue = window.Vue;
    } else if (typeof global !== 'undefined') {
      /*global global*/
      _Vue = global.Vue;
    }

    if (_Vue) {
      _Vue.use(plugin);
    }
  }

  function BasePlugin(components) {
    return {
      version: '0.19.4-beta',
      install: function install(vm) {
        for (var key in components) {
          var component = components[key];
          vm.component(component.name, component);
        }
      },
      components: components
    };
  }

  var CustomElement = {
    functional: true,
    render: function render(createElement, context) {
      return createElement(context.props.is || context.props.tag || 'div', context.data, context.children);
    }
  };
  var CustomElementMixin = {
    components: {
      CustomElement: CustomElement
    }
  };

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var CustomLink = {
    name: 'custom-link',
    functional: true,
    props: {
      tag: {
        type: String,
        default: 'a'
      },
      link: Object
    },
    render: function render(h, context) {
      var element;

      var data = _extends({}, context.data);

      if (context.props.link && context.parent.$router) {
        // router-link case
        element = context.parent.$root.$options.components['RouterLink'];
        data.props = _extends({
          tag: context.props.tag
        }, context.props.link);

        if (data.on.click) {
          data.nativeOn = {
            click: data.on.click
          };
        }
      } else {
        // element fallback
        element = context.props.tag;
      }

      return h(element, data, context.children);
    }
  };
  var CustomLinkMixin = {
    props: {
      to: [String, Object],
      exact: Boolean,
      append: Boolean,
      replace: Boolean,
      activeClass: String,
      exactActiveClass: String
    },
    computed: {
      link: function link() {
        return this.to && {
          to: this.to,
          exact: this.exact,
          append: this.append,
          replace: this.replace,
          activeClass: this.activeClass,
          exactActiveClass: this.exactActiveClass
        };
      }
    },
    components: {
      CustomLink: CustomLink
    }
  };

  /* global CustomEvent */
  function emitCustomEvent(el, evtType, evtData) {
    var shouldBubble = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var evt;

    if (typeof CustomEvent === 'function') {
      evt = new CustomEvent(evtType, {
        detail: evtData,
        bubbles: shouldBubble
      });
    } else {
      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }

    el.dispatchEvent(evt);
  }

  var CustomButton = {
    name: 'custom-button',
    functional: true,
    props: {
      link: Object
    },
    render: function render(h, context) {
      var element;

      var data = _extends({}, context.data);

      if (context.props.link && context.parent.$router) {
        // router-link case
        element = context.parent.$root.$options.components['RouterLink'];
        data.props = _extends({
          tag: context.props.tag
        }, context.props.link);
        data.attrs.role = 'button';

        if (data.on.click) {
          data.nativeOn = {
            click: data.on.click
          };
        }
      } else if (data.attrs && data.attrs.href) {
        // href case
        element = 'a';
        data.attrs.role = 'button';
      } else {
        // button fallback
        element = 'button';
      }

      return h(element, data, context.children);
    }
  };
  var CustomButtonMixin = {
    props: {
      href: String,
      disabled: Boolean,
      to: [String, Object],
      exact: Boolean,
      append: Boolean,
      replace: Boolean,
      activeClass: String,
      exactActiveClass: String
    },
    computed: {
      link: function link() {
        return this.to && {
          to: this.to,
          exact: this.exact,
          append: this.append,
          replace: this.replace,
          activeClass: this.activeClass,
          exactActiveClass: this.exactActiveClass
        };
      }
    },
    components: {
      CustomButton: CustomButton
    }
  };

  function extractIconProp(iconProp) {
    if (typeof iconProp === 'string') {
      return {
        classes: {
          'material-icons': true
        },
        content: iconProp
      };
    } else if (iconProp instanceof Array) {
      return {
        classes: iconProp.reduce(function (result, value) {
          return _extends(result, _defineProperty({}, value, true));
        }, {})
      };
    } else if (_typeof(iconProp) === 'object') {
      return {
        classes: iconProp.className.split(' ').reduce(function (result, value) {
          return _extends(result, _defineProperty({}, value, true));
        }, {}),
        content: iconProp.textContent
      };
    }
  }

  var DispatchEventMixin = {
    props: {
      event: String,
      'event-target': Object,
      'event-args': Array
    },
    methods: {
      dispatchEvent: function dispatchEvent(evt) {
        evt && this.$emit(evt.type, evt);

        if (this.event) {
          var target = this.eventTarget || this.$root;
          var args = this.eventArgs || [];
          target.$emit.apply(target, [this.event].concat(_toConsumableArray(args)));
        }
      }
    },
    computed: {
      listeners: function listeners() {
        var _this = this;

        return _objectSpread({}, this.$listeners, {
          click: function click(e) {
            return _this.dispatchEvent(e);
          }
        });
      }
    }
  };

  var DispatchFocusMixin = {
    data: function data() {
      return {
        hasFocus: false
      };
    },
    methods: {
      onMouseDown: function onMouseDown() {
        this._active = true;
      },
      onMouseUp: function onMouseUp() {
        this._active = false;
      },
      onFocusEvent: function onFocusEvent() {
        var _this = this;

        // dispatch async to let time to other focus event to propagate
        setTimeout(function () {
          return _this.dispatchFocusEvent();
        }, 0);
      },
      onBlurEvent: function onBlurEvent() {
        var _this2 = this;

        // dispatch async to let time to other focus event to propagate
        // also filtur blur if mousedown
        this._active || setTimeout(function () {
          return _this2.dispatchFocusEvent();
        }, 0);
      },
      dispatchFocusEvent: function dispatchFocusEvent() {
        var hasFocus = this.$el === document.activeElement || this.$el.contains(document.activeElement);

        if (hasFocus != this.hasFocus) {
          this.$emit(hasFocus ? 'focus' : 'blur');
          this.hasFocus = hasFocus;
        }
      }
    },
    mounted: function mounted() {
      this.$el.addEventListener('focusin', this.onFocusEvent);
      this.$el.addEventListener('focusout', this.onBlurEvent);
      this.$el.addEventListener('mousedown', this.onMouseDown);
      this.$el.addEventListener('mouseup', this.onMouseUp);
    },
    beforeDestroy: function beforeDestroy() {
      this.$el.removeEventListener('focusin', this.onFocusEvent);
      this.$el.removeEventListener('focusout', this.onBlurEvent);
      this.$el.removeEventListener('mousedown', this.onMouseDown);
      this.$el.removeEventListener('mouseup', this.onMouseUp);
    }
  };

  var scope = Math.floor(Math.random() * Math.floor(0x10000000)).toString() + '-';
  var VMAUniqueIdMixin = {
    beforeCreate: function beforeCreate() {
      this.vma_uid_ = scope + this._uid;
    }
  };

  /**
   * Stores result from supportsCssVariables to avoid redundant processing to
   * detect CSS custom variable support.
   */
  var supportsCssVariables_;
  /**
   * Stores result from applyPassive to avoid redundant processing to detect
   * passive event listener support.
   */

  var supportsPassive_$1;

  function detectEdgePseudoVarBug(windowObj) {
    // Detect versions of Edge with buggy var() support
    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
    var document = windowObj.document;
    var node = document.createElement('div');
    node.className = 'mdc-ripple-surface--test-edge-var-bug';
    document.body.appendChild(node); // The bug exists if ::before style ends up propagating to the parent element.
    // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
    // but Firefox is known to support CSS custom properties correctly.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397

    var computedStyle = windowObj.getComputedStyle(node);
    var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
    node.remove();
    return hasPseudoVarBug;
  }

  function supportsCssVariables(windowObj, forceRefresh) {
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }

    var CSS = windowObj.CSS;
    var supportsCssVars = supportsCssVariables_;

    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
      return supportsCssVariables_;
    }

    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';

    if (!supportsFunctionPresent) {
      return false;
    }

    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes'); // See: https://bugs.webkit.org/show_bug.cgi?id=154669
    // See: README section on Safari

    var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');

    if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
      supportsCssVars = !detectEdgePseudoVarBug(windowObj);
    } else {
      supportsCssVars = false;
    }

    if (!forceRefresh) {
      supportsCssVariables_ = supportsCssVars;
    }

    return supportsCssVars;
  }
  /**
   * Determine whether the current browser supports passive event listeners, and
   * if so, use them.
   */

  function applyPassive$1(globalObj, forceRefresh) {
    if (globalObj === void 0) {
      globalObj = window;
    }

    if (forceRefresh === void 0) {
      forceRefresh = false;
    }

    if (supportsPassive_$1 === undefined || forceRefresh) {
      var isSupported_1 = false;

      try {
        globalObj.document.addEventListener('test', function () {
          return undefined;
        }, {
          get passive() {
            isSupported_1 = true;
            return isSupported_1;
          }

        });
      } catch (e) {} // tslint:disable-line:no-empty cannot throw error due to tests. tslint also disables console.log.


      supportsPassive_$1 = isSupported_1;
    }

    return supportsPassive_$1 ? {
      passive: true
    } : false;
  }
  function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) {
      return {
        x: 0,
        y: 0
      };
    }

    var x = pageOffset.x,
        y = pageOffset.y;
    var documentX = x + clientRect.left;
    var documentY = y + clientRect.top;
    var normalizedX;
    var normalizedY; // Determine touch point relative to the ripple container.

    if (evt.type === 'touchstart') {
      var touchEvent = evt;
      normalizedX = touchEvent.changedTouches[0].pageX - documentX;
      normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    } else {
      var mouseEvent = evt;
      normalizedX = mouseEvent.pageX - documentX;
      normalizedY = mouseEvent.pageY - documentY;
    }

    return {
      x: normalizedX,
      y: normalizedY
    };
  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  function __extends(d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }

      return t;
    };

    return _assign.apply(this, arguments);
  };
  function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
      next: function next() {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;

    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
        ar.push(r.value);
      }
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }

    return ar;
  }
  function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++) {
      ar = ar.concat(__read(arguments[i]));
    }

    return ar;
  }

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var MDCFoundation =
  /** @class */
  function () {
    function MDCFoundation(adapter) {
      if (adapter === void 0) {
        adapter = {};
      }

      this.adapter_ = adapter;
    }

    Object.defineProperty(MDCFoundation, "cssClasses", {
      get: function get() {
        // Classes extending MDCFoundation should implement this method to return an object which exports every
        // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
        return {};
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFoundation, "strings", {
      get: function get() {
        // Classes extending MDCFoundation should implement this method to return an object which exports all
        // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
        return {};
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFoundation, "numbers", {
      get: function get() {
        // Classes extending MDCFoundation should implement this method to return an object which exports all
        // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
        return {};
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFoundation, "defaultAdapter", {
      get: function get() {
        // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
        // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
        // validation.
        return {};
      },
      enumerable: true,
      configurable: true
    });

    MDCFoundation.prototype.init = function () {// Subclasses should override this method to perform initialization routines (registering events, etc.)
    };

    MDCFoundation.prototype.destroy = function () {// Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    };

    return MDCFoundation;
  }();

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCComponent =
  /** @class */
  function () {
    function MDCComponent(root, foundation) {
      var args = [];

      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }

      this.root_ = root;
      this.initialize.apply(this, __spread(args)); // Note that we initialize foundation here and not within the constructor's default param so that
      // this.root_ is defined and can be used within the foundation class.

      this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
      this.foundation_.init();
      this.initialSyncWithDOM();
    }

    MDCComponent.attachTo = function (root) {
      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
      // returns an instantiated component with its root set to that element. Also note that in the cases of
      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
      // from getDefaultFoundation().
      return new MDCComponent(root, new MDCFoundation({}));
    };
    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */


    MDCComponent.prototype.initialize = function () {
      var _args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        _args[_i] = arguments[_i];
      } // Subclasses can override this to do any additional setup work that would be considered part of a
      // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
      // initialized. Any additional arguments besides root and foundation will be passed in here.

    };

    MDCComponent.prototype.getDefaultFoundation = function () {
      // Subclasses must override this method to return a properly configured foundation class for the
      // component.
      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    };

    MDCComponent.prototype.initialSyncWithDOM = function () {// Subclasses should override this method if they need to perform work to synchronize with a host DOM
      // object. An example of this would be a form control wrapper that needs to synchronize its internal state
      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    };

    MDCComponent.prototype.destroy = function () {
      // Subclasses may implement this method to release any resources / deregister any listeners they have
      // attached. An example of this might be deregistering a resize event from the window object.
      this.foundation_.destroy();
    };

    MDCComponent.prototype.listen = function (evtType, handler) {
      this.root_.addEventListener(evtType, handler);
    };

    MDCComponent.prototype.unlisten = function (evtType, handler) {
      this.root_.removeEventListener(evtType, handler);
    };
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
     */


    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
      if (shouldBubble === void 0) {
        shouldBubble = false;
      }

      var evt;

      if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
          bubbles: shouldBubble,
          detail: evtData
        });
      } else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
      }

      this.root_.dispatchEvent(evt);
    };

    return MDCComponent;
  }();

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /**
   * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
   * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
   */
  function closest(element, selector) {
    if (element.closest) {
      return element.closest(selector);
    }

    var el = element;

    while (el) {
      if (matches(el, selector)) {
        return el;
      }

      el = el.parentElement;
    }

    return null;
  }
  function matches(element, selector) {
    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
  }

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$1 = {
    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
    // given that it's an 'upgrade' to an existing component. That being said it is the root
    // CSS class that all other CSS classes derive from.
    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
    ROOT: 'mdc-ripple-upgraded',
    UNBOUNDED: 'mdc-ripple-upgraded--unbounded'
  };
  var strings = {
    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
    VAR_FG_SIZE: '--mdc-ripple-fg-size',
    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
    VAR_LEFT: '--mdc-ripple-left',
    VAR_TOP: '--mdc-ripple-top'
  };
  var numbers = {
    DEACTIVATION_TIMEOUT_MS: 225,
    FG_DEACTIVATION_MS: 150,
    INITIAL_ORIGIN_SCALE: 0.6,
    PADDING: 10,
    TAP_DELAY_MS: 300
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown']; // Deactivation events registered on documentElement when a pointer-related down event occurs

  var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu']; // simultaneous nested activations

  var activatedTargets = [];

  var MDCRippleFoundation =
  /** @class */
  function (_super) {
    __extends(MDCRippleFoundation, _super);

    function MDCRippleFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCRippleFoundation.defaultAdapter, adapter)) || this;

      _this.activationAnimationHasEnded_ = false;
      _this.activationTimer_ = 0;
      _this.fgDeactivationRemovalTimer_ = 0;
      _this.fgScale_ = '0';
      _this.frame_ = {
        width: 0,
        height: 0
      };
      _this.initialSize_ = 0;
      _this.layoutFrame_ = 0;
      _this.maxRadius_ = 0;
      _this.unboundedCoords_ = {
        left: 0,
        top: 0
      };
      _this.activationState_ = _this.defaultActivationState_();

      _this.activationTimerCallback_ = function () {
        _this.activationAnimationHasEnded_ = true;

        _this.runDeactivationUXLogicIfReady_();
      };

      _this.activateHandler_ = function (e) {
        return _this.activate_(e);
      };

      _this.deactivateHandler_ = function () {
        return _this.deactivate_();
      };

      _this.focusHandler_ = function () {
        return _this.handleFocus();
      };

      _this.blurHandler_ = function () {
        return _this.handleBlur();
      };

      _this.resizeHandler_ = function () {
        return _this.layout();
      };

      return _this;
    }

    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "strings", {
      get: function get() {
        return strings;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "numbers", {
      get: function get() {
        return numbers;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          browserSupportsCssVars: function browserSupportsCssVars() {
            return true;
          },
          computeBoundingRect: function computeBoundingRect() {
            return {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: 0,
              height: 0
            };
          },
          containsEventTarget: function containsEventTarget() {
            return true;
          },
          deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() {
            return undefined;
          },
          deregisterInteractionHandler: function deregisterInteractionHandler() {
            return undefined;
          },
          deregisterResizeHandler: function deregisterResizeHandler() {
            return undefined;
          },
          getWindowPageOffset: function getWindowPageOffset() {
            return {
              x: 0,
              y: 0
            };
          },
          isSurfaceActive: function isSurfaceActive() {
            return true;
          },
          isSurfaceDisabled: function isSurfaceDisabled() {
            return true;
          },
          isUnbounded: function isUnbounded() {
            return true;
          },
          registerDocumentInteractionHandler: function registerDocumentInteractionHandler() {
            return undefined;
          },
          registerInteractionHandler: function registerInteractionHandler() {
            return undefined;
          },
          registerResizeHandler: function registerResizeHandler() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          updateCssVariable: function updateCssVariable() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCRippleFoundation.prototype.init = function () {
      var _this = this;

      var supportsPressRipple = this.supportsPressRipple_();
      this.registerRootHandlers_(supportsPressRipple);

      if (supportsPressRipple) {
        var _a = MDCRippleFoundation.cssClasses,
            ROOT_1 = _a.ROOT,
            UNBOUNDED_1 = _a.UNBOUNDED;
        requestAnimationFrame(function () {
          _this.adapter_.addClass(ROOT_1);

          if (_this.adapter_.isUnbounded()) {
            _this.adapter_.addClass(UNBOUNDED_1); // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple


            _this.layoutInternal_();
          }
        });
      }
    };

    MDCRippleFoundation.prototype.destroy = function () {
      var _this = this;

      if (this.supportsPressRipple_()) {
        if (this.activationTimer_) {
          clearTimeout(this.activationTimer_);
          this.activationTimer_ = 0;
          this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
        }

        if (this.fgDeactivationRemovalTimer_) {
          clearTimeout(this.fgDeactivationRemovalTimer_);
          this.fgDeactivationRemovalTimer_ = 0;
          this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
        }

        var _a = MDCRippleFoundation.cssClasses,
            ROOT_2 = _a.ROOT,
            UNBOUNDED_2 = _a.UNBOUNDED;
        requestAnimationFrame(function () {
          _this.adapter_.removeClass(ROOT_2);

          _this.adapter_.removeClass(UNBOUNDED_2);

          _this.removeCssVars_();
        });
      }

      this.deregisterRootHandlers_();
      this.deregisterDeactivationHandlers_();
    };
    /**
     * @param evt Optional event containing position information.
     */


    MDCRippleFoundation.prototype.activate = function (evt) {
      this.activate_(evt);
    };

    MDCRippleFoundation.prototype.deactivate = function () {
      this.deactivate_();
    };

    MDCRippleFoundation.prototype.layout = function () {
      var _this = this;

      if (this.layoutFrame_) {
        cancelAnimationFrame(this.layoutFrame_);
      }

      this.layoutFrame_ = requestAnimationFrame(function () {
        _this.layoutInternal_();

        _this.layoutFrame_ = 0;
      });
    };

    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
      var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;

      if (unbounded) {
        this.adapter_.addClass(UNBOUNDED);
      } else {
        this.adapter_.removeClass(UNBOUNDED);
      }
    };

    MDCRippleFoundation.prototype.handleFocus = function () {
      var _this = this;

      requestAnimationFrame(function () {
        return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
      });
    };

    MDCRippleFoundation.prototype.handleBlur = function () {
      var _this = this;

      requestAnimationFrame(function () {
        return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
      });
    };
    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     */


    MDCRippleFoundation.prototype.supportsPressRipple_ = function () {
      return this.adapter_.browserSupportsCssVars();
    };

    MDCRippleFoundation.prototype.defaultActivationState_ = function () {
      return {
        activationEvent: undefined,
        hasDeactivationUXRun: false,
        isActivated: false,
        isProgrammatic: false,
        wasActivatedByPointer: false,
        wasElementMadeActive: false
      };
    };
    /**
     * supportsPressRipple Passed from init to save a redundant function call
     */


    MDCRippleFoundation.prototype.registerRootHandlers_ = function (supportsPressRipple) {
      var _this = this;

      if (supportsPressRipple) {
        ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
          _this.adapter_.registerInteractionHandler(evtType, _this.activateHandler_);
        });

        if (this.adapter_.isUnbounded()) {
          this.adapter_.registerResizeHandler(this.resizeHandler_);
        }
      }

      this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
      this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
    };

    MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function (evt) {
      var _this = this;

      if (evt.type === 'keydown') {
        this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
      } else {
        POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
          _this.adapter_.registerDocumentInteractionHandler(evtType, _this.deactivateHandler_);
        });
      }
    };

    MDCRippleFoundation.prototype.deregisterRootHandlers_ = function () {
      var _this = this;

      ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
        _this.adapter_.deregisterInteractionHandler(evtType, _this.activateHandler_);
      });
      this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
      this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);

      if (this.adapter_.isUnbounded()) {
        this.adapter_.deregisterResizeHandler(this.resizeHandler_);
      }
    };

    MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function () {
      var _this = this;

      this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
      POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
        _this.adapter_.deregisterDocumentInteractionHandler(evtType, _this.deactivateHandler_);
      });
    };

    MDCRippleFoundation.prototype.removeCssVars_ = function () {
      var _this = this;

      var rippleStrings = MDCRippleFoundation.strings;
      var keys = Object.keys(rippleStrings);
      keys.forEach(function (key) {
        if (key.indexOf('VAR_') === 0) {
          _this.adapter_.updateCssVariable(rippleStrings[key], null);
        }
      });
    };

    MDCRippleFoundation.prototype.activate_ = function (evt) {
      var _this = this;

      if (this.adapter_.isSurfaceDisabled()) {
        return;
      }

      var activationState = this.activationState_;

      if (activationState.isActivated) {
        return;
      } // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction


      var previousActivationEvent = this.previousActivationEvent_;
      var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;

      if (isSameInteraction) {
        return;
      }

      activationState.isActivated = true;
      activationState.isProgrammatic = evt === undefined;
      activationState.activationEvent = evt;
      activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
      var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {
        return _this.adapter_.containsEventTarget(target);
      });

      if (hasActivatedChild) {
        // Immediately reset activation state, while preserving logic that prevents touch follow-on events
        this.resetActivationState_();
        return;
      }

      if (evt !== undefined) {
        activatedTargets.push(evt.target);
        this.registerDeactivationHandlers_(evt);
      }

      activationState.wasElementMadeActive = this.checkElementMadeActive_(evt);

      if (activationState.wasElementMadeActive) {
        this.animateActivation_();
      }

      requestAnimationFrame(function () {
        // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
        activatedTargets = [];

        if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {
          // If space was pressed, try again within an rAF call to detect :active, because different UAs report
          // active states inconsistently when they're called within event handling code:
          // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
          // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
          // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
          // variable is set within a rAF callback for a submit button interaction (#2241).
          activationState.wasElementMadeActive = _this.checkElementMadeActive_(evt);

          if (activationState.wasElementMadeActive) {
            _this.animateActivation_();
          }
        }

        if (!activationState.wasElementMadeActive) {
          // Reset activation state immediately if element was not made active.
          _this.activationState_ = _this.defaultActivationState_();
        }
      });
    };

    MDCRippleFoundation.prototype.checkElementMadeActive_ = function (evt) {
      return evt !== undefined && evt.type === 'keydown' ? this.adapter_.isSurfaceActive() : true;
    };

    MDCRippleFoundation.prototype.animateActivation_ = function () {
      var _this = this;

      var _a = MDCRippleFoundation.strings,
          VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,
          VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
      var _b = MDCRippleFoundation.cssClasses,
          FG_DEACTIVATION = _b.FG_DEACTIVATION,
          FG_ACTIVATION = _b.FG_ACTIVATION;
      var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
      this.layoutInternal_();
      var translateStart = '';
      var translateEnd = '';

      if (!this.adapter_.isUnbounded()) {
        var _c = this.getFgTranslationCoordinates_(),
            startPoint = _c.startPoint,
            endPoint = _c.endPoint;

        translateStart = startPoint.x + "px, " + startPoint.y + "px";
        translateEnd = endPoint.x + "px, " + endPoint.y + "px";
      }

      this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
      this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd); // Cancel any ongoing activation/deactivation animations

      clearTimeout(this.activationTimer_);
      clearTimeout(this.fgDeactivationRemovalTimer_);
      this.rmBoundedActivationClasses_();
      this.adapter_.removeClass(FG_DEACTIVATION); // Force layout in order to re-trigger the animation.

      this.adapter_.computeBoundingRect();
      this.adapter_.addClass(FG_ACTIVATION);
      this.activationTimer_ = setTimeout(function () {
        return _this.activationTimerCallback_();
      }, DEACTIVATION_TIMEOUT_MS);
    };

    MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function () {
      var _a = this.activationState_,
          activationEvent = _a.activationEvent,
          wasActivatedByPointer = _a.wasActivatedByPointer;
      var startPoint;

      if (wasActivatedByPointer) {
        startPoint = getNormalizedEventCoords(activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
      } else {
        startPoint = {
          x: this.frame_.width / 2,
          y: this.frame_.height / 2
        };
      } // Center the element around the start point.


      startPoint = {
        x: startPoint.x - this.initialSize_ / 2,
        y: startPoint.y - this.initialSize_ / 2
      };
      var endPoint = {
        x: this.frame_.width / 2 - this.initialSize_ / 2,
        y: this.frame_.height / 2 - this.initialSize_ / 2
      };
      return {
        startPoint: startPoint,
        endPoint: endPoint
      };
    };

    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function () {
      var _this = this; // This method is called both when a pointing device is released, and when the activation animation ends.
      // The deactivation animation should only run after both of those occur.


      var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
      var _a = this.activationState_,
          hasDeactivationUXRun = _a.hasDeactivationUXRun,
          isActivated = _a.isActivated;
      var activationHasEnded = hasDeactivationUXRun || !isActivated;

      if (activationHasEnded && this.activationAnimationHasEnded_) {
        this.rmBoundedActivationClasses_();
        this.adapter_.addClass(FG_DEACTIVATION);
        this.fgDeactivationRemovalTimer_ = setTimeout(function () {
          _this.adapter_.removeClass(FG_DEACTIVATION);
        }, numbers.FG_DEACTIVATION_MS);
      }
    };

    MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function () {
      var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
      this.adapter_.removeClass(FG_ACTIVATION);
      this.activationAnimationHasEnded_ = false;
      this.adapter_.computeBoundingRect();
    };

    MDCRippleFoundation.prototype.resetActivationState_ = function () {
      var _this = this;

      this.previousActivationEvent_ = this.activationState_.activationEvent;
      this.activationState_ = this.defaultActivationState_(); // Touch devices may fire additional events for the same interaction within a short time.
      // Store the previous event until it's safe to assume that subsequent events are for new interactions.

      setTimeout(function () {
        return _this.previousActivationEvent_ = undefined;
      }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
    };

    MDCRippleFoundation.prototype.deactivate_ = function () {
      var _this = this;

      var activationState = this.activationState_; // This can happen in scenarios such as when you have a keyup event that blurs the element.

      if (!activationState.isActivated) {
        return;
      }

      var state = _assign({}, activationState);

      if (activationState.isProgrammatic) {
        requestAnimationFrame(function () {
          return _this.animateDeactivation_(state);
        });
        this.resetActivationState_();
      } else {
        this.deregisterDeactivationHandlers_();
        requestAnimationFrame(function () {
          _this.activationState_.hasDeactivationUXRun = true;

          _this.animateDeactivation_(state);

          _this.resetActivationState_();
        });
      }
    };

    MDCRippleFoundation.prototype.animateDeactivation_ = function (_a) {
      var wasActivatedByPointer = _a.wasActivatedByPointer,
          wasElementMadeActive = _a.wasElementMadeActive;

      if (wasActivatedByPointer || wasElementMadeActive) {
        this.runDeactivationUXLogicIfReady_();
      }
    };

    MDCRippleFoundation.prototype.layoutInternal_ = function () {
      var _this = this;

      this.frame_ = this.adapter_.computeBoundingRect();
      var maxDim = Math.max(this.frame_.height, this.frame_.width); // Surface diameter is treated differently for unbounded vs. bounded ripples.
      // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
      // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
      // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
      // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
      // `overflow: hidden`.

      var getBoundedRadius = function getBoundedRadius() {
        var hypotenuse = Math.sqrt(Math.pow(_this.frame_.width, 2) + Math.pow(_this.frame_.height, 2));
        return hypotenuse + MDCRippleFoundation.numbers.PADDING;
      };

      this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius(); // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform

      this.initialSize_ = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
      this.fgScale_ = "" + this.maxRadius_ / this.initialSize_;
      this.updateLayoutCssVars_();
    };

    MDCRippleFoundation.prototype.updateLayoutCssVars_ = function () {
      var _a = MDCRippleFoundation.strings,
          VAR_FG_SIZE = _a.VAR_FG_SIZE,
          VAR_LEFT = _a.VAR_LEFT,
          VAR_TOP = _a.VAR_TOP,
          VAR_FG_SCALE = _a.VAR_FG_SCALE;
      this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + "px");
      this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);

      if (this.adapter_.isUnbounded()) {
        this.unboundedCoords_ = {
          left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),
          top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)
        };
        this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + "px");
        this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + "px");
      }
    };

    return MDCRippleFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCRipple =
  /** @class */
  function (_super) {
    __extends(MDCRipple, _super);

    function MDCRipple() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.disabled = false;
      return _this;
    }

    MDCRipple.attachTo = function (root, opts) {
      if (opts === void 0) {
        opts = {
          isUnbounded: undefined
        };
      }

      var ripple = new MDCRipple(root); // Only override unbounded behavior if option is explicitly specified

      if (opts.isUnbounded !== undefined) {
        ripple.unbounded = opts.isUnbounded;
      }

      return ripple;
    };

    MDCRipple.createAdapter = function (instance) {
      return {
        addClass: function addClass(className) {
          return instance.root_.classList.add(className);
        },
        browserSupportsCssVars: function browserSupportsCssVars() {
          return supportsCssVariables(window);
        },
        computeBoundingRect: function computeBoundingRect() {
          return instance.root_.getBoundingClientRect();
        },
        containsEventTarget: function containsEventTarget(target) {
          return instance.root_.contains(target);
        },
        deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
          return document.documentElement.removeEventListener(evtType, handler, applyPassive$1());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
          return instance.root_.removeEventListener(evtType, handler, applyPassive$1());
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        getWindowPageOffset: function getWindowPageOffset() {
          return {
            x: window.pageXOffset,
            y: window.pageYOffset
          };
        },
        isSurfaceActive: function isSurfaceActive() {
          return matches(instance.root_, ':active');
        },
        isSurfaceDisabled: function isSurfaceDisabled() {
          return Boolean(instance.disabled);
        },
        isUnbounded: function isUnbounded() {
          return Boolean(instance.unbounded);
        },
        registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
          return document.documentElement.addEventListener(evtType, handler, applyPassive$1());
        },
        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
          return instance.root_.addEventListener(evtType, handler, applyPassive$1());
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        removeClass: function removeClass(className) {
          return instance.root_.classList.remove(className);
        },
        updateCssVariable: function updateCssVariable(varName, value) {
          return instance.root_.style.setProperty(varName, value);
        }
      };
    };

    Object.defineProperty(MDCRipple.prototype, "unbounded", {
      get: function get() {
        return Boolean(this.unbounded_);
      },
      set: function set(unbounded) {
        this.unbounded_ = Boolean(unbounded);
        this.setUnbounded_();
      },
      enumerable: true,
      configurable: true
    });

    MDCRipple.prototype.activate = function () {
      this.foundation_.activate();
    };

    MDCRipple.prototype.deactivate = function () {
      this.foundation_.deactivate();
    };

    MDCRipple.prototype.layout = function () {
      this.foundation_.layout();
    };

    MDCRipple.prototype.getDefaultFoundation = function () {
      return new MDCRippleFoundation(MDCRipple.createAdapter(this));
    };

    MDCRipple.prototype.initialSyncWithDOM = function () {
      var root = this.root_;
      this.unbounded = 'mdcRippleIsUnbounded' in root.dataset;
    };
    /**
     * Closure Compiler throws an access control error when directly accessing a
     * protected or private property inside a getter/setter, like unbounded above.
     * By accessing the protected property inside a method, we solve that problem.
     * That's why this function exists.
     */


    MDCRipple.prototype.setUnbounded_ = function () {
      this.foundation_.setUnbounded(Boolean(this.unbounded_));
    };

    return MDCRipple;
  }(MDCComponent);

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var RippleBase =
  /*#__PURE__*/
  function (_MDCRippleFoundation) {
    _inherits(RippleBase, _MDCRippleFoundation);

    _createClass(RippleBase, null, [{
      key: "isSurfaceActive",
      value: function isSurfaceActive(ref) {
        return ref[RippleBase.MATCHES](':active');
      }
    }, {
      key: "MATCHES",
      get: function get() {
        /* global HTMLElement */
        return RippleBase._matches || (RippleBase._matches = matches(HTMLElement.prototype));
      }
    }]);

    function RippleBase(vm, options) {
      _classCallCheck(this, RippleBase);

      return _possibleConstructorReturn(this, _getPrototypeOf(RippleBase).call(this, _extends({
        browserSupportsCssVars: function browserSupportsCssVars() {
          return supportsCssVariables(window);
        },
        isUnbounded: function isUnbounded() {
          return false;
        },
        isSurfaceActive: function isSurfaceActive() {
          return vm.$el[RippleBase.MATCHES](':active');
        },
        isSurfaceDisabled: function isSurfaceDisabled() {
          return vm.disabled;
        },
        addClass: function addClass(className) {
          vm.$set(vm.classes, className, true);
        },
        removeClass: function removeClass(className) {
          vm.$delete(vm.classes, className);
        },
        containsEventTarget: function containsEventTarget(target) {
          return vm.$el.contains(target);
        },
        registerInteractionHandler: function registerInteractionHandler(evt, handler) {
          vm.$el.addEventListener(evt, handler, applyPassive$1());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
          vm.$el.removeEventListener(evt, handler, applyPassive$1());
        },
        registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
          return document.documentElement.addEventListener(evtType, handler, applyPassive$1());
        },
        deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
          return document.documentElement.removeEventListener(evtType, handler, applyPassive$1());
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        updateCssVariable: function updateCssVariable(varName, value) {
          vm.$set(vm.styles, varName, value);
        },
        computeBoundingRect: function computeBoundingRect() {
          return vm.$el.getBoundingClientRect();
        },
        getWindowPageOffset: function getWindowPageOffset() {
          return {
            x: window.pageXOffset,
            y: window.pageYOffset
          };
        }
      }, options)));
    }

    return RippleBase;
  }(MDCRippleFoundation);
  var RippleMixin = {
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    mounted: function mounted() {
      this.ripple = new RippleBase(this);
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.ripple.destroy();
    }
  };

  //
  var script = {
    name: 'mdc-ripple',
    mixins: [CustomElementMixin, RippleMixin],
    props: {
      tag: String
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent;

  /* script */
  const __vue_script__ = script;

  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-element",
      {
        staticClass: "mdc-ripple",
        attrs: { tag: _vm.tag, classes: _vm.classes, styles: _vm.styles }
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    const __vue_inject_styles__ = undefined;
    /* scoped */
    const __vue_scope_id__ = undefined;
    /* module identifier */
    const __vue_module_identifier__ = undefined;
    /* functional template */
    const __vue_is_functional_template__ = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcRipple = normalizeComponent_1(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      undefined,
      undefined
    );

  var VueMDCRipple = BasePlugin({
    mdcRipple: mdcRipple
  });

  //
  var script$1 = {
    name: 'mdc-button-base',
    mixins: [DispatchEventMixin, CustomButtonMixin, RippleMixin],
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    }
  };

  /* script */
  const __vue_script__$1 = script$1;

  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-button",
      _vm._g(
        {
          ref: "root",
          class: _vm.classes,
          style: _vm.styles,
          attrs: { href: _vm.href, link: _vm.link, disabled: _vm.disabled }
        },
        _vm.listeners
      ),
      [_c("span", { staticClass: "mdc-button__label" }, [_vm._t("default")], 2)]
    )
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    const __vue_inject_styles__$1 = undefined;
    /* scoped */
    const __vue_scope_id__$1 = undefined;
    /* module identifier */
    const __vue_module_identifier__$1 = undefined;
    /* functional template */
    const __vue_is_functional_template__$1 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcButtonBase = normalizeComponent_1(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      undefined,
      undefined
    );

  var script$2 = {
    name: 'mdc-button',
    extends: mdcButtonBase,
    props: {
      raised: Boolean,
      unelevated: Boolean,
      outlined: Boolean,
      dense: Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-button': true,
          'mdc-button--raised': this.raised,
          'mdc-button--unelevated': this.unelevated,
          'mdc-button--outlined': this.outlined,
          'mdc-button--dense': this.dense
        }
      };
    },
    watch: {
      raised: function raised() {
        this.$set(this.classes, 'mdc-button--raised', this.raised);
      },
      unelevated: function unelevated() {
        this.$set(this.classes, 'mdc-button--unelevated', this.unelevated);
      },
      outlined: function outlined() {
        this.$set(this.classes, 'mdc-button--outlined', this.outlined);
      },
      dense: function dense() {
        this.$set(this.classes, 'mdc-button--dense', this.dense);
      }
    }
  };

  /* script */
  const __vue_script__$2 = script$2;

  /* template */

    /* style */
    const __vue_inject_styles__$2 = undefined;
    /* scoped */
    const __vue_scope_id__$2 = undefined;
    /* module identifier */
    const __vue_module_identifier__$2 = undefined;
    /* functional template */
    const __vue_is_functional_template__$2 = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcButton = normalizeComponent_1(
      {},
      __vue_inject_styles__$2,
      __vue_script__$2,
      __vue_scope_id__$2,
      __vue_is_functional_template__$2,
      __vue_module_identifier__$2,
      undefined,
      undefined
    );

  var VueMDCButton = BasePlugin({
    mdcButton: mdcButton
  });

  //
  //
  //
  //
  //
  //
  //
  //
  var script$3 = {
    name: 'mdc-card',
    props: {
      outlined: Boolean
    }
  };

  /* script */
  const __vue_script__$3 = script$3;

  /* template */
  var __vue_render__$2 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-card", class: { "mdc-card--outlined": _vm.outlined } },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$2 = [];
  __vue_render__$2._withStripped = true;

    /* style */
    const __vue_inject_styles__$3 = undefined;
    /* scoped */
    const __vue_scope_id__$3 = undefined;
    /* module identifier */
    const __vue_module_identifier__$3 = undefined;
    /* functional template */
    const __vue_is_functional_template__$3 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCard = normalizeComponent_1(
      { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
      __vue_inject_styles__$3,
      __vue_script__$3,
      __vue_scope_id__$3,
      __vue_is_functional_template__$3,
      __vue_module_identifier__$3,
      undefined,
      undefined
    );

  //
  var script$4 = {
    name: 'mdc-card-primary-action',
    mixins: [DispatchEventMixin, CustomLinkMixin, RippleMixin],
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    }
  };

  /* script */
  const __vue_script__$4 = script$4;

  /* template */
  var __vue_render__$3 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-link",
      _vm._g(
        {
          staticClass: "mdc-card-primary-action mdc-card__primary-action",
          class: _vm.classes,
          style: _vm.styles,
          attrs: { link: _vm.link }
        },
        _vm.listeners
      ),
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$3 = [];
  __vue_render__$3._withStripped = true;

    /* style */
    const __vue_inject_styles__$4 = undefined;
    /* scoped */
    const __vue_scope_id__$4 = undefined;
    /* module identifier */
    const __vue_module_identifier__$4 = undefined;
    /* functional template */
    const __vue_is_functional_template__$4 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardPrimaryAction = normalizeComponent_1(
      { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
      __vue_inject_styles__$4,
      __vue_script__$4,
      __vue_scope_id__$4,
      __vue_is_functional_template__$4,
      __vue_module_identifier__$4,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  var script$5 = {
    name: 'mdc-card-media',
    props: {
      src: String,
      square: Boolean
    },
    computed: {
      styles: function styles() {
        var styles = {
          backgroundImage: "url(".concat(this.src, ")")
        };
        return styles;
      },
      classes: function classes() {
        return this.square ? 'mdc-card__media--square' : 'mdc-card__media--16-9';
      }
    }
  };

  /* script */
  const __vue_script__$5 = script$5;

  /* template */
  var __vue_render__$4 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "section",
      {
        staticClass: "mdc-card-media mdc-card__media",
        class: _vm.classes,
        style: _vm.styles
      },
      [
        _vm.$slots.default
          ? _c(
              "div",
              { staticClass: "mdc-card__media-content" },
              [_vm._t("default")],
              2
            )
          : _vm._e()
      ]
    )
  };
  var __vue_staticRenderFns__$4 = [];
  __vue_render__$4._withStripped = true;

    /* style */
    const __vue_inject_styles__$5 = undefined;
    /* scoped */
    const __vue_scope_id__$5 = undefined;
    /* module identifier */
    const __vue_module_identifier__$5 = undefined;
    /* functional template */
    const __vue_is_functional_template__$5 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardMedia = normalizeComponent_1(
      { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
      __vue_inject_styles__$5,
      __vue_script__$5,
      __vue_scope_id__$5,
      __vue_is_functional_template__$5,
      __vue_module_identifier__$5,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  var script$6 = {
    name: 'mdc-card-header',
    props: {
      title: String,
      subtitle: String,
      'large-title': {
        type: Boolean,
        default: true
      }
    }
  };

  /* script */
  const __vue_script__$6 = script$6;

  /* template */
  var __vue_render__$5 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "section",
      { staticClass: "mdc-card-header mdc-card__primary" },
      [
        _vm._t("default", [
          _vm.title
            ? _c(
                "h1",
                {
                  staticClass: "mdc-card__title",
                  class: { "mdc-card__title--large": _vm.largeTitle }
                },
                [_vm._v("\n      " + _vm._s(_vm.title) + "\n    ")]
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.subtitle
            ? _c("h2", { staticClass: "mdc-card__subtitle" }, [
                _vm._v("\n      " + _vm._s(_vm.subtitle) + " \n    ")
              ])
            : _vm._e()
        ])
      ],
      2
    )
  };
  var __vue_staticRenderFns__$5 = [];
  __vue_render__$5._withStripped = true;

    /* style */
    const __vue_inject_styles__$6 = undefined;
    /* scoped */
    const __vue_scope_id__$6 = undefined;
    /* module identifier */
    const __vue_module_identifier__$6 = undefined;
    /* functional template */
    const __vue_is_functional_template__$6 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardHeader = normalizeComponent_1(
      { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
      __vue_inject_styles__$6,
      __vue_script__$6,
      __vue_scope_id__$6,
      __vue_is_functional_template__$6,
      __vue_module_identifier__$6,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  var script$7 = {
    name: 'mdc-card-title',
    props: {
      large: Boolean
    }
  };

  /* script */
  const __vue_script__$7 = script$7;

  /* template */
  var __vue_render__$6 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "h1",
      {
        staticClass: "mdc-card-title mdc-card__title",
        class: { "mdc-card__title--large": _vm.large }
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$6 = [];
  __vue_render__$6._withStripped = true;

    /* style */
    const __vue_inject_styles__$7 = undefined;
    /* scoped */
    const __vue_scope_id__$7 = undefined;
    /* module identifier */
    const __vue_module_identifier__$7 = undefined;
    /* functional template */
    const __vue_is_functional_template__$7 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardTitle = normalizeComponent_1(
      { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
      __vue_inject_styles__$7,
      __vue_script__$7,
      __vue_scope_id__$7,
      __vue_is_functional_template__$7,
      __vue_module_identifier__$7,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  var script$8 = {
    name: 'mdc-card-subtitle'
  };

  /* script */
  const __vue_script__$8 = script$8;

  /* template */
  var __vue_render__$7 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "h2",
      { staticClass: "mdc-card-subtitle mdc-card__subtitle" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$7 = [];
  __vue_render__$7._withStripped = true;

    /* style */
    const __vue_inject_styles__$8 = undefined;
    /* scoped */
    const __vue_scope_id__$8 = undefined;
    /* module identifier */
    const __vue_module_identifier__$8 = undefined;
    /* functional template */
    const __vue_is_functional_template__$8 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardSubtitle = normalizeComponent_1(
      { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
      __vue_inject_styles__$8,
      __vue_script__$8,
      __vue_scope_id__$8,
      __vue_is_functional_template__$8,
      __vue_module_identifier__$8,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$9 = {
    name: 'mdc-card-text'
  };

  /* script */
  const __vue_script__$9 = script$9;

  /* template */
  var __vue_render__$8 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "section",
      { staticClass: "mdc-card-text mdc-card__supporting-text" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$8 = [];
  __vue_render__$8._withStripped = true;

    /* style */
    const __vue_inject_styles__$9 = undefined;
    /* scoped */
    const __vue_scope_id__$9 = undefined;
    /* module identifier */
    const __vue_module_identifier__$9 = undefined;
    /* functional template */
    const __vue_is_functional_template__$9 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardText = normalizeComponent_1(
      { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
      __vue_inject_styles__$9,
      __vue_script__$9,
      __vue_scope_id__$9,
      __vue_is_functional_template__$9,
      __vue_module_identifier__$9,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  var script$a = {
    name: 'mdc-card-actions',
    props: {
      fullBleed: Boolean
    },
    computed: {
      classes: function classes() {
        return {
          'mdc-card__actions--full-bleed': this.fullBleed
        };
      }
    }
  };

  /* script */
  const __vue_script__$a = script$a;

  /* template */
  var __vue_render__$9 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "section",
      { staticClass: "mdc-card-actions mdc-card__actions", class: _vm.classes },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$9 = [];
  __vue_render__$9._withStripped = true;

    /* style */
    const __vue_inject_styles__$a = undefined;
    /* scoped */
    const __vue_scope_id__$a = undefined;
    /* module identifier */
    const __vue_module_identifier__$a = undefined;
    /* functional template */
    const __vue_is_functional_template__$a = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardActions = normalizeComponent_1(
      { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
      __vue_inject_styles__$a,
      __vue_script__$a,
      __vue_scope_id__$a,
      __vue_is_functional_template__$a,
      __vue_module_identifier__$a,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$b = {
    name: 'mdc-card-action-buttons'
  };

  /* script */
  const __vue_script__$b = script$b;

  /* template */
  var __vue_render__$a = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-card-action-buttons mdc-card__action-buttons" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$a = [];
  __vue_render__$a._withStripped = true;

    /* style */
    const __vue_inject_styles__$b = undefined;
    /* scoped */
    const __vue_scope_id__$b = undefined;
    /* module identifier */
    const __vue_module_identifier__$b = undefined;
    /* functional template */
    const __vue_is_functional_template__$b = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardActionButtons = normalizeComponent_1(
      { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
      __vue_inject_styles__$b,
      __vue_script__$b,
      __vue_scope_id__$b,
      __vue_is_functional_template__$b,
      __vue_module_identifier__$b,
      undefined,
      undefined
    );

  var script$c = {
    name: 'mdc-card-action-button',
    extends: mdcButtonBase,
    data: function data() {
      return {
        classes: {
          'mdc-button': true,
          'mdc-card__action': true,
          'mdc-card-action-button': true
        }
      };
    }
  };

  /* script */
  const __vue_script__$c = script$c;

  /* template */

    /* style */
    const __vue_inject_styles__$c = undefined;
    /* scoped */
    const __vue_scope_id__$c = undefined;
    /* module identifier */
    const __vue_module_identifier__$c = undefined;
    /* functional template */
    const __vue_is_functional_template__$c = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardActionButton = normalizeComponent_1(
      {},
      __vue_inject_styles__$c,
      __vue_script__$c,
      __vue_scope_id__$c,
      __vue_is_functional_template__$c,
      __vue_module_identifier__$c,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$d = {
    name: 'mdc-card-action-icons'
  };

  /* script */
  const __vue_script__$d = script$d;

  /* template */
  var __vue_render__$b = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-card-action-icons mdc-card__action-icons" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$b = [];
  __vue_render__$b._withStripped = true;

    /* style */
    const __vue_inject_styles__$d = undefined;
    /* scoped */
    const __vue_scope_id__$d = undefined;
    /* module identifier */
    const __vue_module_identifier__$d = undefined;
    /* functional template */
    const __vue_is_functional_template__$d = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardActionIcons = normalizeComponent_1(
      { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
      __vue_inject_styles__$d,
      __vue_script__$d,
      __vue_scope_id__$d,
      __vue_is_functional_template__$d,
      __vue_module_identifier__$d,
      undefined,
      undefined
    );

  //
  var script$e = {
    name: 'mdc-card-action-icon',
    mixins: [DispatchEventMixin],
    props: {
      icon: String
    },
    data: function data() {
      return {
        classes: {
          'mdc-card-action-icon': true,
          'material-icons': !!this.icon,
          'mdc-card__action': true,
          'mdc-card__action--icon': true,
          'mdc-icon-toggle': true
        },
        styles: {}
      };
    },
    watch: {
      icon: function icon() {
        this.$set(this.classes, 'material-icons', !!this.icon);
      }
    },
    mounted: function mounted() {
      this.ripple = new RippleBase(this, {
        isUnbounded: function isUnbounded() {
          return true;
        }
      });
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.ripple.destroy();
    }
  };

  /* script */
  const __vue_script__$e = script$e;

  /* template */
  var __vue_render__$c = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "span",
      _vm._g({ class: _vm.classes, style: _vm.styles }, _vm.listeners),
      [_vm._t("default", [_vm._v(_vm._s(_vm.icon))])],
      2
    )
  };
  var __vue_staticRenderFns__$c = [];
  __vue_render__$c._withStripped = true;

    /* style */
    const __vue_inject_styles__$e = undefined;
    /* scoped */
    const __vue_scope_id__$e = undefined;
    /* module identifier */
    const __vue_module_identifier__$e = undefined;
    /* functional template */
    const __vue_is_functional_template__$e = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCardActionIcon = normalizeComponent_1(
      { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
      __vue_inject_styles__$e,
      __vue_script__$e,
      __vue_scope_id__$e,
      __vue_is_functional_template__$e,
      __vue_module_identifier__$e,
      undefined,
      undefined
    );

  var VueMDCCard = BasePlugin({
    mdcCard: mdcCard,
    mdcCardPrimaryAction: mdcCardPrimaryAction,
    mdcCardMedia: mdcCardMedia,
    mdcCardHeader: mdcCardHeader,
    mdcCardTitle: mdcCardTitle,
    mdcCardSubtitle: mdcCardSubtitle,
    mdcCardText: mdcCardText,
    mdcCardActions: mdcCardActions,
    mdcCardActionButtons: mdcCardActionButtons,
    mdcCardActionButton: mdcCardActionButton,
    mdcCardActionIcons: mdcCardActionIcons,
    mdcCardActionIcon: mdcCardActionIcon
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$2 = {
    ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
    ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
    ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
    ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',
    ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
    ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
    CHECKED: 'mdc-checkbox--checked',
    DISABLED: 'mdc-checkbox--disabled',
    INDETERMINATE: 'mdc-checkbox--indeterminate',
    UPGRADED: 'mdc-checkbox--upgraded'
  };
  var strings$1 = {
    ARIA_CHECKED_ATTR: 'aria-checked',
    ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',
    NATIVE_CONTROL_SELECTOR: '.mdc-checkbox__native-control',
    TRANSITION_STATE_CHECKED: 'checked',
    TRANSITION_STATE_INDETERMINATE: 'indeterminate',
    TRANSITION_STATE_INIT: 'init',
    TRANSITION_STATE_UNCHECKED: 'unchecked'
  };
  var numbers$1 = {
    ANIM_END_LATCH_MS: 250
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCCheckboxFoundation =
  /** @class */
  function (_super) {
    __extends(MDCCheckboxFoundation, _super);

    function MDCCheckboxFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCCheckboxFoundation.defaultAdapter, adapter)) || this;

      _this.currentCheckState_ = strings$1.TRANSITION_STATE_INIT;
      _this.currentAnimationClass_ = '';
      _this.animEndLatchTimer_ = 0;
      _this.enableAnimationEndHandler_ = false;
      return _this;
    }

    Object.defineProperty(MDCCheckboxFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation, "strings", {
      get: function get() {
        return strings$1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation, "numbers", {
      get: function get() {
        return numbers$1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          forceLayout: function forceLayout() {
            return undefined;
          },
          hasNativeControl: function hasNativeControl() {
            return false;
          },
          isAttachedToDOM: function isAttachedToDOM() {
            return false;
          },
          isChecked: function isChecked() {
            return false;
          },
          isIndeterminate: function isIndeterminate() {
            return false;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          removeNativeControlAttr: function removeNativeControlAttr() {
            return undefined;
          },
          setNativeControlAttr: function setNativeControlAttr() {
            return undefined;
          },
          setNativeControlDisabled: function setNativeControlDisabled() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCCheckboxFoundation.prototype.init = function () {
      this.currentCheckState_ = this.determineCheckState_();
      this.updateAriaChecked_();
      this.adapter_.addClass(cssClasses$2.UPGRADED);
    };

    MDCCheckboxFoundation.prototype.destroy = function () {
      clearTimeout(this.animEndLatchTimer_);
    };

    MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {
      this.adapter_.setNativeControlDisabled(disabled);

      if (disabled) {
        this.adapter_.addClass(cssClasses$2.DISABLED);
      } else {
        this.adapter_.removeClass(cssClasses$2.DISABLED);
      }
    };
    /**
     * Handles the animationend event for the checkbox
     */


    MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {
      var _this = this;

      if (!this.enableAnimationEndHandler_) return;
      clearTimeout(this.animEndLatchTimer_);
      this.animEndLatchTimer_ = setTimeout(function () {
        _this.adapter_.removeClass(_this.currentAnimationClass_);

        _this.enableAnimationEndHandler_ = false;
      }, numbers$1.ANIM_END_LATCH_MS);
    };
    /**
     * Handles the change event for the checkbox
     */


    MDCCheckboxFoundation.prototype.handleChange = function () {
      this.transitionCheckState_();
    };

    MDCCheckboxFoundation.prototype.transitionCheckState_ = function () {
      if (!this.adapter_.hasNativeControl()) {
        return;
      }

      var oldState = this.currentCheckState_;
      var newState = this.determineCheckState_();

      if (oldState === newState) {
        return;
      }

      this.updateAriaChecked_(); // Check to ensure that there isn't a previously existing animation class, in case for example
      // the user interacted with the checkbox before the animation was finished.

      if (this.currentAnimationClass_.length > 0) {
        clearTimeout(this.animEndLatchTimer_);
        this.adapter_.forceLayout();
        this.adapter_.removeClass(this.currentAnimationClass_);
      }

      this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);
      this.currentCheckState_ = newState; // Check for parentNode so that animations are only run when the element is attached
      // to the DOM.

      if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {
        this.adapter_.addClass(this.currentAnimationClass_);
        this.enableAnimationEndHandler_ = true;
      }
    };

    MDCCheckboxFoundation.prototype.determineCheckState_ = function () {
      var TRANSITION_STATE_INDETERMINATE = strings$1.TRANSITION_STATE_INDETERMINATE,
          TRANSITION_STATE_CHECKED = strings$1.TRANSITION_STATE_CHECKED,
          TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;

      if (this.adapter_.isIndeterminate()) {
        return TRANSITION_STATE_INDETERMINATE;
      }

      return this.adapter_.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
    };

    MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function (oldState, newState) {
      var TRANSITION_STATE_INIT = strings$1.TRANSITION_STATE_INIT,
          TRANSITION_STATE_CHECKED = strings$1.TRANSITION_STATE_CHECKED,
          TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;
      var _a = MDCCheckboxFoundation.cssClasses,
          ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED,
          ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE,
          ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED,
          ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE,
          ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED,
          ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;

      switch (oldState) {
        case TRANSITION_STATE_INIT:
          if (newState === TRANSITION_STATE_UNCHECKED) {
            return '';
          }

          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;

        case TRANSITION_STATE_UNCHECKED:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;

        case TRANSITION_STATE_CHECKED:
          return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;

        default:
          // TRANSITION_STATE_INDETERMINATE
          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
      }
    };

    MDCCheckboxFoundation.prototype.updateAriaChecked_ = function () {
      // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.
      if (this.adapter_.isIndeterminate()) {
        this.adapter_.setNativeControlAttr(strings$1.ARIA_CHECKED_ATTR, strings$1.ARIA_CHECKED_INDETERMINATE_VALUE);
      } else {
        // The on/off state does not need to keep track of aria-checked, since
        // the screenreader uses the checked property on the checkbox element.
        this.adapter_.removeNativeControlAttr(strings$1.ARIA_CHECKED_ATTR);
      }
    };

    return MDCCheckboxFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$3 = {
    ROOT: 'mdc-form-field'
  };
  var strings$2 = {
    LABEL_SELECTOR: '.mdc-form-field > label'
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCFormFieldFoundation =
  /** @class */
  function (_super) {
    __extends(MDCFormFieldFoundation, _super);

    function MDCFormFieldFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCFormFieldFoundation.defaultAdapter, adapter)) || this;

      _this.clickHandler_ = function () {
        return _this.handleClick_();
      };

      return _this;
    }

    Object.defineProperty(MDCFormFieldFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$3;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFormFieldFoundation, "strings", {
      get: function get() {
        return strings$2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFormFieldFoundation, "defaultAdapter", {
      get: function get() {
        return {
          activateInputRipple: function activateInputRipple() {
            return undefined;
          },
          deactivateInputRipple: function deactivateInputRipple() {
            return undefined;
          },
          deregisterInteractionHandler: function deregisterInteractionHandler() {
            return undefined;
          },
          registerInteractionHandler: function registerInteractionHandler() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCFormFieldFoundation.prototype.init = function () {
      this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    };

    MDCFormFieldFoundation.prototype.destroy = function () {
      this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    };

    MDCFormFieldFoundation.prototype.handleClick_ = function () {
      var _this = this;

      this.adapter_.activateInputRipple();
      requestAnimationFrame(function () {
        return _this.adapter_.deactivateInputRipple();
      });
    };

    return MDCFormFieldFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssPropertyNameMap = {
    animation: {
      prefixed: '-webkit-animation',
      standard: 'animation'
    },
    transform: {
      prefixed: '-webkit-transform',
      standard: 'transform'
    },
    transition: {
      prefixed: '-webkit-transition',
      standard: 'transition'
    }
  };
  var jsEventTypeMap = {
    animationend: {
      cssProperty: 'animation',
      prefixed: 'webkitAnimationEnd',
      standard: 'animationend'
    },
    animationiteration: {
      cssProperty: 'animation',
      prefixed: 'webkitAnimationIteration',
      standard: 'animationiteration'
    },
    animationstart: {
      cssProperty: 'animation',
      prefixed: 'webkitAnimationStart',
      standard: 'animationstart'
    },
    transitionend: {
      cssProperty: 'transition',
      prefixed: 'webkitTransitionEnd',
      standard: 'transitionend'
    }
  };

  function isWindow(windowObj) {
    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';
  }

  function getCorrectPropertyName(windowObj, cssProperty) {
    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
      var el = windowObj.document.createElement('div');
      var _a = cssPropertyNameMap[cssProperty],
          standard = _a.standard,
          prefixed = _a.prefixed;
      var isStandard = standard in el.style;
      return isStandard ? standard : prefixed;
    }

    return cssProperty;
  }
  function getCorrectEventName(windowObj, eventType) {
    if (isWindow(windowObj) && eventType in jsEventTypeMap) {
      var el = windowObj.document.createElement('div');
      var _a = jsEventTypeMap[eventType],
          standard = _a.standard,
          prefixed = _a.prefixed,
          cssProperty = _a.cssProperty;
      var isStandard = cssProperty in el.style;
      return isStandard ? standard : prefixed;
    }

    return eventType;
  }

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
   // Old namespace for backward compatibility

  //
  var CB_PROTO_PROPS = ['checked', 'indeterminate'];
  var script$f = {
    name: 'mdc-checkbox',
    mixins: [DispatchFocusMixin, VMAUniqueIdMixin],
    model: {
      prop: 'checked',
      event: 'change'
    },
    props: {
      checked: [Boolean, Array],
      indeterminate: Boolean,
      disabled: Boolean,
      label: String,
      'align-end': Boolean,
      value: {
        type: [String, Number],
        default: function _default() {
          return 'on';
        }
      },
      name: String
    },
    data: function data() {
      return {
        styles: {},
        classes: {}
      };
    },
    computed: {
      hasLabel: function hasLabel() {
        return this.label || this.$slots.default;
      },
      formFieldClasses: function formFieldClasses() {
        return {
          'mdc-form-field': this.hasLabel,
          'mdc-form-field--align-end': this.hasLabel && this.alignEnd
        };
      }
    },
    watch: {
      checked: 'setChecked',
      disabled: function disabled(value) {
        this.foundation.setDisabled(value);
      },
      indeterminate: function indeterminate(value) {
        this.setIndeterminate(value);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCCheckboxFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        setNativeControlAttr: function setNativeControlAttr(attr, value) {
          _this.$refs.control.setAttribute(attr, value);
        },
        removeNativeControlAttr: function removeNativeControlAttr(attr) {
          _this.$refs.control.removeAttribute(attr);
        },
        // getNativeControl: () => this.$refs.control,
        isIndeterminate: function isIndeterminate() {
          return _this.$refs.control.indeterminate;
        },
        isChecked: function isChecked() {
          return _this.checked;
        },
        hasNativeControl: function hasNativeControl() {
          return !!_this.$refs.control;
        },
        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
          return _this.$refs.control.disabled = disabled;
        },
        forceLayout: function forceLayout() {
          return _this.$refs.root.offsetWidth;
        },
        isAttachedToDOM: function isAttachedToDOM() {
          return Boolean(_this.$el.parentNode);
        }
      });

      this.handleAnimationEnd_ = function () {
        return _this.foundation.handleAnimationEnd();
      };

      this.$el.addEventListener(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);
      this.installPropertyChangeHooks_();
      this.ripple = new RippleBase(this, {
        isUnbounded: function isUnbounded() {
          return true;
        },
        isSurfaceActive: function isSurfaceActive() {
          return RippleBase.isSurfaceActive(_this.$refs.control);
        },
        registerInteractionHandler: function registerInteractionHandler(evt, handler) {
          _this.$refs.control.addEventListener(evt, handler, applyPassive());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
          _this.$refs.control.removeEventListener(evt, handler, applyPassive());
        },
        computeBoundingRect: function computeBoundingRect() {
          return _this.$refs.root.getBoundingClientRect();
        }
      });
      this.formField = new MDCFormFieldFoundation({
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          _this.$refs.label.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          _this.$refs.label.removeEventListener(type, handler);
        },
        activateInputRipple: function activateInputRipple() {
          _this.ripple && _this.ripple.activate();
        },
        deactivateInputRipple: function deactivateInputRipple() {
          _this.ripple && _this.ripple.deactivate();
        }
      });
      this.foundation.init();
      this.ripple.init();
      this.formField.init();
      this.setChecked(this.checked);
      this.foundation.setDisabled(this.disabled);
      this.setIndeterminate(this.indeterminate);
    },
    beforeDestroy: function beforeDestroy() {
      this.$el.removeEventListener(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);
      this.formField.destroy();
      this.ripple.destroy();
      this.uninstallPropertyChangeHooks_();
      this.foundation.destroy();
    },
    methods: {
      setChecked: function setChecked(checked) {
        this.$refs.control.checked = Array.isArray(checked) ? checked.indexOf(this.value) > -1 : checked;
      },
      setIndeterminate: function setIndeterminate(indeterminate) {
        this.$refs.control.indeterminate = indeterminate;
      },
      onChange: function onChange() {
        this.$emit('update:indeterminate', this.indeterminate);
        var isChecked = this.$refs.control.checked;

        if (Array.isArray(this.checked)) {
          var idx = this.checked.indexOf(this.value);

          if (isChecked) {
            idx < 0 && this.$emit('change', this.checked.concat(this.value));
          } else {
            idx > -1 && this.$emit('change', this.checked.slice(0, idx).concat(this.checked.slice(idx + 1)));
          }
        } else {
          this.$emit('change', isChecked);
        }
      },
      installPropertyChangeHooks_: function installPropertyChangeHooks_() {
        var _this2 = this;

        var nativeCb = this.$refs.control;
        var cbProto = Object.getPrototypeOf(nativeCb);
        CB_PROTO_PROPS.forEach(function (controlState) {
          var desc = Object.getOwnPropertyDescriptor(cbProto, controlState); // We have to check for this descriptor, since some browsers (Safari) don't support its return.
          // See: https://bugs.webkit.org/show_bug.cgi?id=49739

          if (validDescriptor(desc)) {
            var nativeCbDesc =
            /** @type {!ObjectPropertyDescriptor} */
            {
              get: desc.get,
              set: function set(state) {
                desc.set.call(nativeCb, state);

                _this2.foundation.handleChange();
              },
              configurable: desc.configurable,
              enumerable: desc.enumerable
            };
            Object.defineProperty(nativeCb, controlState, nativeCbDesc);
          }
        });
      },
      uninstallPropertyChangeHooks_: function uninstallPropertyChangeHooks_() {
        var nativeCb = this.$refs.control;
        var cbProto = Object.getPrototypeOf(nativeCb);
        CB_PROTO_PROPS.forEach(function (controlState) {
          var desc =
          /** @type {!ObjectPropertyDescriptor} */
          Object.getOwnPropertyDescriptor(cbProto, controlState);

          if (validDescriptor(desc)) {
            Object.defineProperty(nativeCb, controlState, desc);
          }
        });
      }
    } // ===
    // Private functions
    // ===

  };

  function validDescriptor(inputPropDesc) {
    return !!inputPropDesc && typeof inputPropDesc.set === 'function';
  }

  /* script */
  const __vue_script__$f = script$f;

  /* template */
  var __vue_render__$d = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-checkbox-wrapper", class: _vm.formFieldClasses },
      [
        _c(
          "div",
          {
            ref: "root",
            staticClass: "mdc-checkbox",
            class: _vm.classes,
            style: _vm.styles
          },
          [
            _c("input", {
              ref: "control",
              staticClass: "mdc-checkbox__native-control",
              attrs: { id: _vm.vma_uid_, name: _vm.name, type: "checkbox" },
              domProps: { value: _vm.value },
              on: { change: _vm.onChange }
            }),
            _vm._v(" "),
            _c("div", { staticClass: "mdc-checkbox__background" }, [
              _c(
                "svg",
                {
                  staticClass: "mdc-checkbox__checkmark",
                  attrs: { viewBox: "0 0 24 24" }
                },
                [
                  _c("path", {
                    staticClass: "mdc-checkbox__checkmark-path",
                    attrs: {
                      fill: "none",
                      stroke: "white",
                      d: "M1.73,12.91 8.1,19.28 22.79,4.59"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("div", { staticClass: "mdc-checkbox__mixedmark" })
            ])
          ]
        ),
        _vm._v(" "),
        _c(
          "label",
          { ref: "label", attrs: { for: _vm.vma_uid_ } },
          [_vm._t("default", [_vm._v(_vm._s(_vm.label))])],
          2
        )
      ]
    )
  };
  var __vue_staticRenderFns__$d = [];
  __vue_render__$d._withStripped = true;

    /* style */
    const __vue_inject_styles__$f = undefined;
    /* scoped */
    const __vue_scope_id__$f = undefined;
    /* module identifier */
    const __vue_module_identifier__$f = undefined;
    /* functional template */
    const __vue_is_functional_template__$f = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcCheckbox = normalizeComponent_1(
      { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
      __vue_inject_styles__$f,
      __vue_script__$f,
      __vue_scope_id__$f,
      __vue_is_functional_template__$f,
      __vue_module_identifier__$f,
      undefined,
      undefined
    );

  var VueMDCCheckbox = BasePlugin({
    mdcCheckbox: mdcCheckbox
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$3 = {
    CHECKMARK_SELECTOR: '.mdc-chip__checkmark',
    ENTRY_ANIMATION_NAME: 'mdc-chip-entry',
    INTERACTION_EVENT: 'MDCChip:interaction',
    LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',
    REMOVAL_EVENT: 'MDCChip:removal',
    SELECTION_EVENT: 'MDCChip:selection',
    TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',
    TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing'
  };
  var cssClasses$4 = {
    CHECKMARK: 'mdc-chip__checkmark',
    CHIP_EXIT: 'mdc-chip--exit',
    HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',
    LEADING_ICON: 'mdc-chip__icon--leading',
    SELECTED: 'mdc-chip--selected',
    TRAILING_ICON: 'mdc-chip__icon--trailing'
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var emptyClientRect = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0
  };

  var MDCChipFoundation =
  /** @class */
  function (_super) {
    __extends(MDCChipFoundation, _super);

    function MDCChipFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCChipFoundation.defaultAdapter, adapter)) || this;
      /**
       * Whether a trailing icon click should immediately trigger exit/removal of the chip.
       */


      _this.shouldRemoveOnTrailingIconClick_ = true;
      return _this;
    }

    Object.defineProperty(MDCChipFoundation, "strings", {
      get: function get() {
        return strings$3;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCChipFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$4;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCChipFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          addClassToLeadingIcon: function addClassToLeadingIcon() {
            return undefined;
          },
          eventTargetHasClass: function eventTargetHasClass() {
            return false;
          },
          getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {
            return emptyClientRect;
          },
          getComputedStyleValue: function getComputedStyleValue() {
            return '';
          },
          getRootBoundingClientRect: function getRootBoundingClientRect() {
            return emptyClientRect;
          },
          hasClass: function hasClass() {
            return false;
          },
          hasLeadingIcon: function hasLeadingIcon() {
            return false;
          },
          notifyInteraction: function notifyInteraction() {
            return undefined;
          },
          notifyRemoval: function notifyRemoval() {
            return undefined;
          },
          notifySelection: function notifySelection() {
            return undefined;
          },
          notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          removeClassFromLeadingIcon: function removeClassFromLeadingIcon() {
            return undefined;
          },
          setStyleProperty: function setStyleProperty() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCChipFoundation.prototype.isSelected = function () {
      return this.adapter_.hasClass(cssClasses$4.SELECTED);
    };

    MDCChipFoundation.prototype.setSelected = function (selected) {
      if (selected) {
        this.adapter_.addClass(cssClasses$4.SELECTED);
      } else {
        this.adapter_.removeClass(cssClasses$4.SELECTED);
      }

      this.adapter_.notifySelection(selected);
    };

    MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {
      return this.shouldRemoveOnTrailingIconClick_;
    };

    MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {
      this.shouldRemoveOnTrailingIconClick_ = shouldRemove;
    };

    MDCChipFoundation.prototype.getDimensions = function () {
      var _this = this;

      var getRootRect = function getRootRect() {
        return _this.adapter_.getRootBoundingClientRect();
      };

      var getCheckmarkRect = function getCheckmarkRect() {
        return _this.adapter_.getCheckmarkBoundingClientRect();
      }; // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current
      // size of the checkmark.


      if (!this.adapter_.hasLeadingIcon()) {
        var checkmarkRect = getCheckmarkRect();

        if (checkmarkRect) {
          var rootRect = getRootRect();
          var height = rootRect.height; // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.
          // However, the checkbox is initially hidden by setting the width to 0.
          // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)
          // when adding it to the root client rect's width.

          var checkmarkWidth = checkmarkRect.height;
          var width = rootRect.width + checkmarkWidth;
          return _assign({}, rootRect, {
            width: width,
            height: height
          });
        }
      }

      return getRootRect();
    };
    /**
     * Begins the exit animation which leads to removal of the chip.
     */


    MDCChipFoundation.prototype.beginExit = function () {
      this.adapter_.addClass(cssClasses$4.CHIP_EXIT);
    };
    /**
     * Handles an interaction event on the root element.
     */


    MDCChipFoundation.prototype.handleInteraction = function (evt) {
      var isEnter = evt.key === 'Enter' || evt.keyCode === 13;

      if (evt.type === 'click' || isEnter) {
        this.adapter_.notifyInteraction();
      }
    };
    /**
     * Handles a transition end event on the root element.
     */


    MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {
      var _this = this; // Handle transition end event on the chip when it is about to be removed.


      if (this.adapter_.eventTargetHasClass(evt.target, cssClasses$4.CHIP_EXIT)) {
        if (evt.propertyName === 'width') {
          this.adapter_.notifyRemoval();
        } else if (evt.propertyName === 'opacity') {
          // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5
          var chipWidth_1 = this.adapter_.getComputedStyleValue('width'); // On the next frame (once we get the computed width), explicitly set the chip's width
          // to its current pixel width, so we aren't transitioning out of 'auto'.

          requestAnimationFrame(function () {
            _this.adapter_.setStyleProperty('width', chipWidth_1); // To mitigate jitter, start transitioning padding and margin before width.


            _this.adapter_.setStyleProperty('padding', '0');

            _this.adapter_.setStyleProperty('margin', '0'); // On the next frame (once width is explicitly set), transition width to 0.


            requestAnimationFrame(function () {
              _this.adapter_.setStyleProperty('width', '0');
            });
          });
        }

        return;
      } // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.


      if (evt.propertyName !== 'opacity') {
        return;
      }

      if (this.adapter_.eventTargetHasClass(evt.target, cssClasses$4.LEADING_ICON) && this.adapter_.hasClass(cssClasses$4.SELECTED)) {
        this.adapter_.addClassToLeadingIcon(cssClasses$4.HIDDEN_LEADING_ICON);
      } else if (this.adapter_.eventTargetHasClass(evt.target, cssClasses$4.CHECKMARK) && !this.adapter_.hasClass(cssClasses$4.SELECTED)) {
        this.adapter_.removeClassFromLeadingIcon(cssClasses$4.HIDDEN_LEADING_ICON);
      }
    };
    /**
     * Handles an interaction event on the trailing icon element. This is used to
     * prevent the ripple from activating on interaction with the trailing icon.
     */


    MDCChipFoundation.prototype.handleTrailingIconInteraction = function (evt) {
      var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
      evt.stopPropagation();

      if (evt.type === 'click' || isEnter) {
        this.adapter_.notifyTrailingIconInteraction();

        if (this.shouldRemoveOnTrailingIconClick_) {
          this.beginExit();
        }
      }
    };

    return MDCChipFoundation;
  }(MDCFoundation);

  var script$g = {
    name: 'mdc-chip',
    mixins: [CustomLinkMixin],
    props: {
      leadingIcon: [String],
      trailingIcon: [String],
      leadingIconClasses: [Object],
      trailingIconClasses: [Object]
    },
    inject: ['mdcChipSet'],
    data: function data() {
      return {
        classes: {
          'mdc-chip': true
        },
        styles: {},
        id: ''
      };
    },
    computed: {
      selected: {
        get: function get() {
          return this.foundation.isSelected();
        },
        set: function set(nv) {
          this.foundation.setSelected(nv);
        }
      },
      isFilter: function isFilter() {
        return this.mdcChipSet && this.mdcChipSet.filter;
      },
      haveleadingIcon: function haveleadingIcon() {
        return !!this.leadingIcon || this.leadingIconClasses;
      },
      havetrailingIcon: function havetrailingIcon() {
        return !!this.trailingIcon || this.trailingIconClasses;
      },
      leadingClasses: function leadingClasses() {
        return _extends({}, {
          'material-icons': !!this.leadingIcon
        }, this.leadingIconClasses);
      },
      trailingClasses: function trailingClasses() {
        return _extends({}, {
          'material-icons': !!this.trailingIcon
        }, this.trailingIconClasses);
      }
    },
    created: function created() {
      this.id = this.mdcChipSet.nextId();
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCChipFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return _this.$el.classList.contains(className);
        },
        addClassToLeadingIcon: function addClassToLeadingIcon(className) {
          if (_this.haveleadingIcon) {
            _this.$refs.leadingIcon.classList.add(className);
          }
        },
        removeClassFromLeadingIcon: function removeClassFromLeadingIcon(className) {
          if (_this.haveleadingIcon) {
            _this.$refs.leadingIcon.classList.remove(className);
          }
        },
        eventTargetHasClass: function eventTargetHasClass(target, className) {
          return target.classList.contains(className);
        },
        notifyInteraction: function notifyInteraction() {
          emitCustomEvent(_this.$el, MDCChipFoundation.strings.INTERACTION_EVENT, {
            chipId: _this.id
          }, true);
          _this.mdcChipSet && _this.mdcChipSet.handleInteraction;
        },
        notifySelection: function notifySelection(selected) {
          return emitCustomEvent(_this.$el, MDCChipFoundation.strings.SELECTION_EVENT, {
            chipId: _this.id,
            selected: selected
          }, true
          /* shouldBubble */
          );
        },
        notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {
          emitCustomEvent(_this.$el, MDCChipFoundation.strings.TRAILING_ICON_INTERACTION_EVENT, {
            chipId: _this.id
          }, true);
        },
        notifyRemoval: function notifyRemoval() {
          emitCustomEvent(_this.$el, MDCChipFoundation.strings.REMOVAL_EVENT, {
            chipId: _this.id,
            root: _this.$el
          }, true);
        },
        getComputedStyleValue: function getComputedStyleValue(propertyName) {
          return window.getComputedStyle(_this.$el).getPropertyValue(propertyName);
        },
        setStyleProperty: function setStyleProperty(property, value) {
          return _this.$set(_this.styles, property, value);
        },
        hasLeadingIcon: function hasLeadingIcon() {
          return !!_this.haveleadingIcon;
        },
        getRootBoundingClientRect: function getRootBoundingClientRect() {
          return _this.$el.getBoundingClientRect();
        },
        getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {
          return _this.$refs.checkmarkEl ? _this.$refs.checkmarkEl.getBoundingClientRect() : null;
        }
      });
      this.foundation.init();
      this.mdcChipSet.chips.push(this);
      this.ripple = new RippleBase(this, {
        computeBoundingRect: function computeBoundingRect() {
          return _this.foundation.getDimensions();
        }
      });
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.ripple.destroy();
      this.foundation.destroy();
    },
    methods: {
      handleInteraction: function handleInteraction(evt) {
        this.foundation.handleInteraction(evt);
      },
      handleTransitionEnd: function handleTransitionEnd(evt) {
        this.foundation.handleTransitionEnd(evt);
      },
      handleTrailingIconInteraction: function handleTrailingIconInteraction(evt) {
        this.foundation.handleTrailingIconInteraction(evt);
      },
      toggleSelected: function toggleSelected() {
        this.foundation.toggleSelected();
      },
      isSelected: function isSelected() {
        return this.foundation.isSelected();
      }
    }
  };

  /* script */
  const __vue_script__$g = script$g;

  /* template */
  var __vue_render__$e = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        class: _vm.classes,
        style: _vm.styles,
        attrs: { id: _vm.id, tabindex: "0" },
        on: {
          click: _vm.handleInteraction,
          keydown: _vm.handleInteraction,
          transitionend: _vm.handleTransitionEnd
        }
      },
      [
        _vm.haveleadingIcon
          ? _c(
              "i",
              {
                ref: "leadingIcon",
                staticClass: "mdc-chip__icon mdc-chip__icon--leading",
                class: _vm.leadingClasses
              },
              [_vm._v(_vm._s(_vm.leadingIcon))]
            )
          : _vm._e(),
        _vm._v(" "),
        _vm.isFilter
          ? _c(
              "div",
              { ref: "checkmarkEl", staticClass: "mdc-chip__checkmark" },
              [
                _c(
                  "svg",
                  {
                    staticClass: "mdc-chip__checkmark-svg",
                    attrs: { viewBox: "-2 -3 30 30" }
                  },
                  [
                    _c("path", {
                      staticClass: "mdc-chip__checkmark-path",
                      attrs: {
                        fill: "none",
                        stroke: "black",
                        d: "M1.73,12.91 8.1,19.28 22.79,4.59"
                      }
                    })
                  ]
                )
              ]
            )
          : _vm._e(),
        _vm._v(" "),
        _c("div", { staticClass: "mdc-chip__text" }, [_vm._t("default")], 2),
        _vm._v(" "),
        _vm.havetrailingIcon
          ? _c(
              "i",
              {
                ref: "trailingIcon",
                staticClass: "mdc-chip__icon mdc-chip__icon--trailing",
                class: _vm.trailingClasses,
                attrs: { tabindex: "0", role: "button" },
                on: {
                  click: _vm.handleTrailingIconInteraction,
                  keydown: _vm.handleTrailingIconInteraction
                }
              },
              [_vm._v(_vm._s(_vm.trailingIcon))]
            )
          : _vm._e()
      ]
    )
  };
  var __vue_staticRenderFns__$e = [];
  __vue_render__$e._withStripped = true;

    /* style */
    const __vue_inject_styles__$g = undefined;
    /* scoped */
    const __vue_scope_id__$g = undefined;
    /* module identifier */
    const __vue_module_identifier__$g = undefined;
    /* functional template */
    const __vue_is_functional_template__$g = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcChip = normalizeComponent_1(
      { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
      __vue_inject_styles__$g,
      __vue_script__$g,
      __vue_scope_id__$g,
      __vue_is_functional_template__$g,
      __vue_module_identifier__$g,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$4 = {
    CHIP_SELECTOR: '.mdc-chip'
  };
  var cssClasses$5 = {
    CHOICE: 'mdc-chip-set--choice',
    FILTER: 'mdc-chip-set--filter'
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCChipSetFoundation =
  /** @class */
  function (_super) {
    __extends(MDCChipSetFoundation, _super);

    function MDCChipSetFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCChipSetFoundation.defaultAdapter, adapter)) || this;
      /**
       * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.
       */


      _this.selectedChipIds_ = [];
      return _this;
    }

    Object.defineProperty(MDCChipSetFoundation, "strings", {
      get: function get() {
        return strings$4;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$5;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation, "defaultAdapter", {
      get: function get() {
        return {
          hasClass: function hasClass() {
            return false;
          },
          removeChip: function removeChip() {
            return undefined;
          },
          setSelected: function setSelected() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });
    /**
     * Returns an array of the IDs of all selected chips.
     */

    MDCChipSetFoundation.prototype.getSelectedChipIds = function () {
      return this.selectedChipIds_.slice();
    };
    /**
     * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.
     */


    MDCChipSetFoundation.prototype.select = function (chipId) {
      if (this.selectedChipIds_.indexOf(chipId) >= 0) {
        return;
      }

      if (this.adapter_.hasClass(cssClasses$5.CHOICE) && this.selectedChipIds_.length > 0) {
        var previouslySelectedChip = this.selectedChipIds_[0];
        this.selectedChipIds_.length = 0;
        this.adapter_.setSelected(previouslySelectedChip, false);
      }

      this.selectedChipIds_.push(chipId);
      this.adapter_.setSelected(chipId, true);
    };
    /**
     * Handles a chip interaction event
     */


    MDCChipSetFoundation.prototype.handleChipInteraction = function (chipId) {
      if (this.adapter_.hasClass(cssClasses$5.CHOICE) || this.adapter_.hasClass(cssClasses$5.FILTER)) {
        this.toggleSelect_(chipId);
      }
    };
    /**
     * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.
     */


    MDCChipSetFoundation.prototype.handleChipSelection = function (chipId, selected) {
      var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;

      if (selected && !chipIsSelected) {
        this.select(chipId);
      } else if (!selected && chipIsSelected) {
        this.deselect_(chipId);
      }
    };
    /**
     * Handles the event when a chip is removed.
     */


    MDCChipSetFoundation.prototype.handleChipRemoval = function (chipId) {
      this.deselect_(chipId);
      this.adapter_.removeChip(chipId);
    };
    /**
     * Deselects the chip with the given id.
     */


    MDCChipSetFoundation.prototype.deselect_ = function (chipId) {
      var index = this.selectedChipIds_.indexOf(chipId);

      if (index >= 0) {
        this.selectedChipIds_.splice(index, 1);
        this.adapter_.setSelected(chipId, false);
      }
    };
    /**
     * Toggles selection of the chip with the given id.
     */


    MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {
      if (this.selectedChipIds_.indexOf(chipId) >= 0) {
        this.deselect_(chipId);
      } else {
        this.select(chipId);
      }
    };

    return MDCChipSetFoundation;
  }(MDCFoundation);

  var idCounter = 0;
  var script$h = {
    name: 'mdc-chip-set',
    props: {
      choice: [Boolean],
      filter: [Boolean],
      input: [Boolean]
    },
    provide: function provide() {
      return {
        mdcChipSet: this
      };
    },
    data: function data() {
      return {
        classes: {
          'mdc-chip-set': true,
          'mdc-chip-set--choice': this.choice,
          'mdc-chip-set--filter': this.filter,
          'mdc-chip-set--input': this.input
        },
        chips: []
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCChipSetFoundation({
        hasClass: function hasClass(className) {
          return _this.$el.classList.contains(className);
        },
        removeChip: function removeChip(chipId) {
          var index = _this.findChipIndex(chipId);

          if (index > 0) {
            _this.$nextTick(function () {
              _this.chips.splice(index, 1);
            });
          }
        },
        setSelected: function setSelected(chipId, selected) {
          var index = _this.findChipIndex(chipId);

          if (index >= 0) {
            _this.chips[index].selected = selected;
          }
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    },
    methods: {
      nextId: function nextId() {
        return "mdc-chip-".concat(++idCounter);
      },
      findChipIndex: function findChipIndex(chipId) {
        for (var i = 0; i < this.chips.length; i++) {
          if (this.chips[i].id === chipId) {
            return i;
          }
        }

        return -1;
      },
      handleChipInteraction: function handleChipInteraction(evt) {
        this.foundation.handleChipInteraction(evt.detail.chipId);
      },
      handleChipRemoval: function handleChipRemoval(evt) {
        this.foundation.handleChipRemoval(evt.detail.chipId);
      },
      handleChipSelection: function handleChipSelection(evt) {
        this.foundation.handleChipSelection(evt.detail.chipId, evt.detail.selected);
      }
    },
    render: function render(h) {
      var _this2 = this,
          _on;

      return h('div', {
        class: this.classes,
        on: (_on = {}, _defineProperty(_on, MDCChipFoundation.strings.INTERACTION_EVENT, function (evt) {
          return _this2.handleChipInteraction(evt);
        }), _defineProperty(_on, MDCChipFoundation.strings.SELECTION_EVENT, function (evt) {
          return _this2.handleChipSelection(evt);
        }), _defineProperty(_on, MDCChipFoundation.strings.REMOVAL_EVENT, function (evt) {
          return _this2.handleChipRemoval(evt);
        }), _on)
      }, this.$slots.default);
    }
  };

  /* script */
  const __vue_script__$h = script$h;

  /* template */

    /* style */
    const __vue_inject_styles__$h = undefined;
    /* scoped */
    const __vue_scope_id__$h = undefined;
    /* module identifier */
    const __vue_module_identifier__$h = undefined;
    /* functional template */
    const __vue_is_functional_template__$h = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcChipSet = normalizeComponent_1(
      {},
      __vue_inject_styles__$h,
      __vue_script__$h,
      __vue_scope_id__$h,
      __vue_is_functional_template__$h,
      __vue_module_identifier__$h,
      undefined,
      undefined
    );

  var VueMDCChips = BasePlugin({
    mdcChip: mdcChip,
    mdcChipSet: mdcChipSet
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$6 = {
    CLOSING: 'mdc-dialog--closing',
    OPEN: 'mdc-dialog--open',
    OPENING: 'mdc-dialog--opening',
    SCROLLABLE: 'mdc-dialog--scrollable',
    SCROLL_LOCK: 'mdc-dialog-scroll-lock',
    STACKED: 'mdc-dialog--stacked'
  };
  var strings$5 = {
    ACTION_ATTRIBUTE: 'data-mdc-dialog-action',
    BUTTON_SELECTOR: '.mdc-dialog__button',
    CLOSED_EVENT: 'MDCDialog:closed',
    CLOSE_ACTION: 'close',
    CLOSING_EVENT: 'MDCDialog:closing',
    CONTAINER_SELECTOR: '.mdc-dialog__container',
    CONTENT_SELECTOR: '.mdc-dialog__content',
    DEFAULT_BUTTON_SELECTOR: '.mdc-dialog__button--default',
    DESTROY_ACTION: 'destroy',
    OPENED_EVENT: 'MDCDialog:opened',
    OPENING_EVENT: 'MDCDialog:opening',
    SCRIM_SELECTOR: '.mdc-dialog__scrim',
    SUPPRESS_DEFAULT_PRESS_SELECTOR: ['textarea', '.mdc-menu .mdc-list-item'].join(', '),
    SURFACE_SELECTOR: '.mdc-dialog__surface'
  };
  var numbers$2 = {
    DIALOG_ANIMATION_CLOSE_TIME_MS: 75,
    DIALOG_ANIMATION_OPEN_TIME_MS: 150
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCDialogFoundation =
  /** @class */
  function (_super) {
    __extends(MDCDialogFoundation, _super);

    function MDCDialogFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCDialogFoundation.defaultAdapter, adapter)) || this;

      _this.isOpen_ = false;
      _this.animationFrame_ = 0;
      _this.animationTimer_ = 0;
      _this.layoutFrame_ = 0;
      _this.escapeKeyAction_ = strings$5.CLOSE_ACTION;
      _this.scrimClickAction_ = strings$5.CLOSE_ACTION;
      _this.autoStackButtons_ = true;
      _this.areButtonsStacked_ = false;
      return _this;
    }

    Object.defineProperty(MDCDialogFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$6;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCDialogFoundation, "strings", {
      get: function get() {
        return strings$5;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCDialogFoundation, "numbers", {
      get: function get() {
        return numbers$2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCDialogFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addBodyClass: function addBodyClass() {
            return undefined;
          },
          addClass: function addClass() {
            return undefined;
          },
          areButtonsStacked: function areButtonsStacked() {
            return false;
          },
          clickDefaultButton: function clickDefaultButton() {
            return undefined;
          },
          eventTargetMatches: function eventTargetMatches() {
            return false;
          },
          getActionFromEvent: function getActionFromEvent() {
            return '';
          },
          hasClass: function hasClass() {
            return false;
          },
          isContentScrollable: function isContentScrollable() {
            return false;
          },
          notifyClosed: function notifyClosed() {
            return undefined;
          },
          notifyClosing: function notifyClosing() {
            return undefined;
          },
          notifyOpened: function notifyOpened() {
            return undefined;
          },
          notifyOpening: function notifyOpening() {
            return undefined;
          },
          releaseFocus: function releaseFocus() {
            return undefined;
          },
          removeBodyClass: function removeBodyClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          reverseButtons: function reverseButtons() {
            return undefined;
          },
          trapFocus: function trapFocus() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCDialogFoundation.prototype.init = function () {
      if (this.adapter_.hasClass(cssClasses$6.STACKED)) {
        this.setAutoStackButtons(false);
      }
    };

    MDCDialogFoundation.prototype.destroy = function () {
      if (this.isOpen_) {
        this.close(strings$5.DESTROY_ACTION);
      }

      if (this.animationTimer_) {
        clearTimeout(this.animationTimer_);
        this.handleAnimationTimerEnd_();
      }

      if (this.layoutFrame_) {
        cancelAnimationFrame(this.layoutFrame_);
        this.layoutFrame_ = 0;
      }
    };

    MDCDialogFoundation.prototype.open = function () {
      var _this = this;

      this.isOpen_ = true;
      this.adapter_.notifyOpening();
      this.adapter_.addClass(cssClasses$6.OPENING); // Wait a frame once display is no longer "none", to establish basis for animation

      this.runNextAnimationFrame_(function () {
        _this.adapter_.addClass(cssClasses$6.OPEN);

        _this.adapter_.addBodyClass(cssClasses$6.SCROLL_LOCK);

        _this.layout();

        _this.animationTimer_ = setTimeout(function () {
          _this.handleAnimationTimerEnd_();

          _this.adapter_.trapFocus();

          _this.adapter_.notifyOpened();
        }, numbers$2.DIALOG_ANIMATION_OPEN_TIME_MS);
      });
    };

    MDCDialogFoundation.prototype.close = function (action) {
      var _this = this;

      if (action === void 0) {
        action = '';
      }

      if (!this.isOpen_) {
        // Avoid redundant close calls (and events), e.g. from keydown on elements that inherently emit click
        return;
      }

      this.isOpen_ = false;
      this.adapter_.notifyClosing(action);
      this.adapter_.addClass(cssClasses$6.CLOSING);
      this.adapter_.removeClass(cssClasses$6.OPEN);
      this.adapter_.removeBodyClass(cssClasses$6.SCROLL_LOCK);
      cancelAnimationFrame(this.animationFrame_);
      this.animationFrame_ = 0;
      clearTimeout(this.animationTimer_);
      this.animationTimer_ = setTimeout(function () {
        _this.adapter_.releaseFocus();

        _this.handleAnimationTimerEnd_();

        _this.adapter_.notifyClosed(action);
      }, numbers$2.DIALOG_ANIMATION_CLOSE_TIME_MS);
    };

    MDCDialogFoundation.prototype.isOpen = function () {
      return this.isOpen_;
    };

    MDCDialogFoundation.prototype.getEscapeKeyAction = function () {
      return this.escapeKeyAction_;
    };

    MDCDialogFoundation.prototype.setEscapeKeyAction = function (action) {
      this.escapeKeyAction_ = action;
    };

    MDCDialogFoundation.prototype.getScrimClickAction = function () {
      return this.scrimClickAction_;
    };

    MDCDialogFoundation.prototype.setScrimClickAction = function (action) {
      this.scrimClickAction_ = action;
    };

    MDCDialogFoundation.prototype.getAutoStackButtons = function () {
      return this.autoStackButtons_;
    };

    MDCDialogFoundation.prototype.setAutoStackButtons = function (autoStack) {
      this.autoStackButtons_ = autoStack;
    };

    MDCDialogFoundation.prototype.layout = function () {
      var _this = this;

      if (this.layoutFrame_) {
        cancelAnimationFrame(this.layoutFrame_);
      }

      this.layoutFrame_ = requestAnimationFrame(function () {
        _this.layoutInternal_();

        _this.layoutFrame_ = 0;
      });
    };

    MDCDialogFoundation.prototype.layoutInternal_ = function () {
      if (this.autoStackButtons_) {
        this.detectStackedButtons_();
      }

      this.detectScrollableContent_();
    };

    MDCDialogFoundation.prototype.handleInteraction = function (evt) {
      var isClick = evt.type === 'click';
      var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
      var isSpace = evt.key === 'Space' || evt.keyCode === 32;
      var isScrim = this.adapter_.eventTargetMatches(evt.target, strings$5.SCRIM_SELECTOR);
      var isDefault = !this.adapter_.eventTargetMatches(evt.target, strings$5.SUPPRESS_DEFAULT_PRESS_SELECTOR); // Check for scrim click first since it doesn't require querying ancestors

      if (isClick && isScrim && this.scrimClickAction_ !== '') {
        this.close(this.scrimClickAction_);
      } else if (isClick || isSpace || isEnter) {
        var action = this.adapter_.getActionFromEvent(evt);

        if (action) {
          this.close(action);
        } else if (isEnter && isDefault) {
          this.adapter_.clickDefaultButton();
        }
      }
    };

    MDCDialogFoundation.prototype.handleDocumentKeydown = function (evt) {
      var isEscape = evt.key === 'Escape' || evt.keyCode === 27;

      if (isEscape && this.escapeKeyAction_ !== '') {
        this.close(this.escapeKeyAction_);
      }
    };

    MDCDialogFoundation.prototype.handleAnimationTimerEnd_ = function () {
      this.animationTimer_ = 0;
      this.adapter_.removeClass(cssClasses$6.OPENING);
      this.adapter_.removeClass(cssClasses$6.CLOSING);
    };
    /**
     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
     */


    MDCDialogFoundation.prototype.runNextAnimationFrame_ = function (callback) {
      var _this = this;

      cancelAnimationFrame(this.animationFrame_);
      this.animationFrame_ = requestAnimationFrame(function () {
        _this.animationFrame_ = 0;
        clearTimeout(_this.animationTimer_);
        _this.animationTimer_ = setTimeout(callback, 0);
      });
    };

    MDCDialogFoundation.prototype.detectStackedButtons_ = function () {
      // Remove the class first to let us measure the buttons' natural positions.
      this.adapter_.removeClass(cssClasses$6.STACKED);
      var areButtonsStacked = this.adapter_.areButtonsStacked();

      if (areButtonsStacked) {
        this.adapter_.addClass(cssClasses$6.STACKED);
      }

      if (areButtonsStacked !== this.areButtonsStacked_) {
        this.adapter_.reverseButtons();
        this.areButtonsStacked_ = areButtonsStacked;
      }
    };

    MDCDialogFoundation.prototype.detectScrollableContent_ = function () {
      // Remove the class first to let us measure the natural height of the content.
      this.adapter_.removeClass(cssClasses$6.SCROLLABLE);

      if (this.adapter_.isContentScrollable()) {
        this.adapter_.addClass(cssClasses$6.SCROLLABLE);
      }
    };

    return MDCDialogFoundation;
  }(MDCFoundation);

  var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'];
  var candidateSelector = candidateSelectors.join(',');
  var matches$1 = typeof Element === 'undefined' ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

  function tabbable(el, options) {
    options = options || {};
    var elementDocument = el.ownerDocument || el;
    var regularTabbables = [];
    var orderedTabbables = [];
    var untouchabilityChecker = new UntouchabilityChecker(elementDocument);
    var candidates = el.querySelectorAll(candidateSelector);

    if (options.includeContainer) {
      if (matches$1.call(el, candidateSelector)) {
        candidates = Array.prototype.slice.apply(candidates);
        candidates.unshift(el);
      }
    }

    var i, candidate, candidateTabindex;

    for (i = 0; i < candidates.length; i++) {
      candidate = candidates[i];
      if (!isNodeMatchingSelectorTabbable(candidate, untouchabilityChecker)) continue;
      candidateTabindex = getTabindex(candidate);

      if (candidateTabindex === 0) {
        regularTabbables.push(candidate);
      } else {
        orderedTabbables.push({
          documentOrder: i,
          tabIndex: candidateTabindex,
          node: candidate
        });
      }
    }

    var tabbableNodes = orderedTabbables.sort(sortOrderedTabbables).map(function (a) {
      return a.node;
    }).concat(regularTabbables);
    return tabbableNodes;
  }

  tabbable.isTabbable = isTabbable;
  tabbable.isFocusable = isFocusable;

  function isNodeMatchingSelectorTabbable(node, untouchabilityChecker) {
    if (!isNodeMatchingSelectorFocusable(node, untouchabilityChecker) || isNonTabbableRadio(node) || getTabindex(node) < 0) {
      return false;
    }

    return true;
  }

  function isTabbable(node, untouchabilityChecker) {
    if (!node) throw new Error('No node provided');
    if (matches$1.call(node, candidateSelector) === false) return false;
    return isNodeMatchingSelectorTabbable(node, untouchabilityChecker);
  }

  function isNodeMatchingSelectorFocusable(node, untouchabilityChecker) {
    untouchabilityChecker = untouchabilityChecker || new UntouchabilityChecker(node.ownerDocument || node);

    if (node.disabled || isHiddenInput(node) || untouchabilityChecker.isUntouchable(node)) {
      return false;
    }

    return true;
  }

  var focusableCandidateSelector = candidateSelectors.concat('iframe').join(',');

  function isFocusable(node, untouchabilityChecker) {
    if (!node) throw new Error('No node provided');
    if (matches$1.call(node, focusableCandidateSelector) === false) return false;
    return isNodeMatchingSelectorFocusable(node, untouchabilityChecker);
  }

  function getTabindex(node) {
    var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
    if (!isNaN(tabindexAttr)) return tabindexAttr; // Browsers do not return `tabIndex` correctly for contentEditable nodes;
    // so if they don't have a tabindex attribute specifically set, assume it's 0.

    if (isContentEditable(node)) return 0;
    return node.tabIndex;
  }

  function sortOrderedTabbables(a, b) {
    return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
  } // Array.prototype.find not available in IE.


  function find(list, predicate) {
    for (var i = 0, length = list.length; i < length; i++) {
      if (predicate(list[i])) return list[i];
    }
  }

  function isContentEditable(node) {
    return node.contentEditable === 'true';
  }

  function isInput(node) {
    return node.tagName === 'INPUT';
  }

  function isHiddenInput(node) {
    return isInput(node) && node.type === 'hidden';
  }

  function isRadio(node) {
    return isInput(node) && node.type === 'radio';
  }

  function isNonTabbableRadio(node) {
    return isRadio(node) && !isTabbableRadio(node);
  }

  function getCheckedRadio(nodes) {
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i].checked) {
        return nodes[i];
      }
    }
  }

  function isTabbableRadio(node) {
    if (!node.name) return true; // This won't account for the edge case where you have radio groups with the same
    // in separate forms on the same page.

    var radioSet = node.ownerDocument.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
    var checked = getCheckedRadio(radioSet);
    return !checked || checked === node;
  } // An element is "untouchable" if *it or one of its ancestors* has
  // `visibility: hidden` or `display: none`.


  function UntouchabilityChecker(elementDocument) {
    this.doc = elementDocument; // Node cache must be refreshed on every check, in case
    // the content of the element has changed. The cache contains tuples
    // mapping nodes to their boolean result.

    this.cache = [];
  } // getComputedStyle accurately reflects `visibility: hidden` of ancestors
  // but not `display: none`, so we need to recursively check parents.


  UntouchabilityChecker.prototype.hasDisplayNone = function hasDisplayNone(node, nodeComputedStyle) {
    if (node.nodeType !== Node.ELEMENT_NODE) return false; // Search for a cached result.

    var cached = find(this.cache, function (item) {
      return item === node;
    });
    if (cached) return cached[1];
    nodeComputedStyle = nodeComputedStyle || this.doc.defaultView.getComputedStyle(node);
    var result = false;

    if (nodeComputedStyle.display === 'none') {
      result = true;
    } else if (node.parentNode) {
      result = this.hasDisplayNone(node.parentNode);
    }

    this.cache.push([node, result]);
    return result;
  };

  UntouchabilityChecker.prototype.isUntouchable = function isUntouchable(node) {
    if (node === this.doc.documentElement) return false;
    var computedStyle = this.doc.defaultView.getComputedStyle(node);
    if (this.hasDisplayNone(node, computedStyle)) return true;
    return computedStyle.visibility === 'hidden';
  };

  var tabbable_1 = tabbable;

  var immutable = extend;
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  }

  var activeFocusTraps = function () {
    var trapQueue = [];
    return {
      activateTrap: function activateTrap(trap) {
        if (trapQueue.length > 0) {
          var activeTrap = trapQueue[trapQueue.length - 1];

          if (activeTrap !== trap) {
            activeTrap.pause();
          }
        }

        var trapIndex = trapQueue.indexOf(trap);

        if (trapIndex === -1) {
          trapQueue.push(trap);
        } else {
          // move this existing trap to the front of the queue
          trapQueue.splice(trapIndex, 1);
          trapQueue.push(trap);
        }
      },
      deactivateTrap: function deactivateTrap(trap) {
        var trapIndex = trapQueue.indexOf(trap);

        if (trapIndex !== -1) {
          trapQueue.splice(trapIndex, 1);
        }

        if (trapQueue.length > 0) {
          trapQueue[trapQueue.length - 1].unpause();
        }
      }
    };
  }();

  function focusTrap(element, userOptions) {
    var doc = document;
    var container = typeof element === 'string' ? doc.querySelector(element) : element;
    var config = immutable({
      returnFocusOnDeactivate: true,
      escapeDeactivates: true
    }, userOptions);
    var state = {
      firstTabbableNode: null,
      lastTabbableNode: null,
      nodeFocusedBeforeActivation: null,
      mostRecentlyFocusedNode: null,
      active: false,
      paused: false
    };
    var trap = {
      activate: activate,
      deactivate: deactivate,
      pause: pause,
      unpause: unpause
    };
    return trap;

    function activate(activateOptions) {
      if (state.active) return;
      updateTabbableNodes();
      state.active = true;
      state.paused = false;
      state.nodeFocusedBeforeActivation = doc.activeElement;
      var onActivate = activateOptions && activateOptions.onActivate ? activateOptions.onActivate : config.onActivate;

      if (onActivate) {
        onActivate();
      }

      addListeners();
      return trap;
    }

    function deactivate(deactivateOptions) {
      if (!state.active) return;
      removeListeners();
      state.active = false;
      state.paused = false;
      activeFocusTraps.deactivateTrap(trap);
      var onDeactivate = deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate;

      if (onDeactivate) {
        onDeactivate();
      }

      var returnFocus = deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate;

      if (returnFocus) {
        delay(function () {
          tryFocus(state.nodeFocusedBeforeActivation);
        });
      }

      return trap;
    }

    function pause() {
      if (state.paused || !state.active) return;
      state.paused = true;
      removeListeners();
    }

    function unpause() {
      if (!state.paused || !state.active) return;
      state.paused = false;
      addListeners();
    }

    function addListeners() {
      if (!state.active) return; // There can be only one listening focus trap at a time

      activeFocusTraps.activateTrap(trap);
      updateTabbableNodes(); // Delay ensures that the focused element doesn't capture the event
      // that caused the focus trap activation.

      delay(function () {
        tryFocus(getInitialFocusNode());
      });
      doc.addEventListener('focusin', checkFocusIn, true);
      doc.addEventListener('mousedown', checkPointerDown, true);
      doc.addEventListener('touchstart', checkPointerDown, true);
      doc.addEventListener('click', checkClick, true);
      doc.addEventListener('keydown', checkKey, true);
      return trap;
    }

    function removeListeners() {
      if (!state.active) return;
      doc.removeEventListener('focusin', checkFocusIn, true);
      doc.removeEventListener('mousedown', checkPointerDown, true);
      doc.removeEventListener('touchstart', checkPointerDown, true);
      doc.removeEventListener('click', checkClick, true);
      doc.removeEventListener('keydown', checkKey, true);
      return trap;
    }

    function getNodeForOption(optionName) {
      var optionValue = config[optionName];
      var node = optionValue;

      if (!optionValue) {
        return null;
      }

      if (typeof optionValue === 'string') {
        node = doc.querySelector(optionValue);

        if (!node) {
          throw new Error('`' + optionName + '` refers to no known node');
        }
      }

      if (typeof optionValue === 'function') {
        node = optionValue();

        if (!node) {
          throw new Error('`' + optionName + '` did not return a node');
        }
      }

      return node;
    }

    function getInitialFocusNode() {
      var node;

      if (getNodeForOption('initialFocus') !== null) {
        node = getNodeForOption('initialFocus');
      } else if (container.contains(doc.activeElement)) {
        node = doc.activeElement;
      } else {
        node = state.firstTabbableNode || getNodeForOption('fallbackFocus');
      }

      if (!node) {
        throw new Error("You can't have a focus-trap without at least one focusable element");
      }

      return node;
    } // This needs to be done on mousedown and touchstart instead of click
    // so that it precedes the focus event.


    function checkPointerDown(e) {
      if (container.contains(e.target)) return;

      if (config.clickOutsideDeactivates) {
        deactivate({
          returnFocus: !tabbable_1.isFocusable(e.target)
        });
      } else {
        e.preventDefault();
      }
    } // In case focus escapes the trap for some strange reason, pull it back in.


    function checkFocusIn(e) {
      // In Firefox when you Tab out of an iframe the Document is briefly focused.
      if (container.contains(e.target) || e.target instanceof Document) {
        return;
      }

      e.stopImmediatePropagation();
      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
    }

    function checkKey(e) {
      if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
        e.preventDefault();
        deactivate();
        return;
      }

      if (isTabEvent(e)) {
        checkTab(e);
        return;
      }
    } // Hijack Tab events on the first and last focusable nodes of the trap,
    // in order to prevent focus from escaping. If it escapes for even a
    // moment it can end up scrolling the page and causing confusion so we
    // kind of need to capture the action at the keydown phase.


    function checkTab(e) {
      updateTabbableNodes();

      if (e.shiftKey && e.target === state.firstTabbableNode) {
        e.preventDefault();
        tryFocus(state.lastTabbableNode);
        return;
      }

      if (!e.shiftKey && e.target === state.lastTabbableNode) {
        e.preventDefault();
        tryFocus(state.firstTabbableNode);
        return;
      }
    }

    function checkClick(e) {
      if (config.clickOutsideDeactivates) return;
      if (container.contains(e.target)) return;
      e.preventDefault();
      e.stopImmediatePropagation();
    }

    function updateTabbableNodes() {
      var tabbableNodes = tabbable_1(container);
      state.firstTabbableNode = tabbableNodes[0] || getInitialFocusNode();
      state.lastTabbableNode = tabbableNodes[tabbableNodes.length - 1] || getInitialFocusNode();
    }

    function tryFocus(node) {
      if (node === doc.activeElement) return;

      if (!node || !node.focus) {
        tryFocus(getInitialFocusNode());
        return;
      }

      node.focus();
      state.mostRecentlyFocusedNode = node;

      if (isSelectableInput(node)) {
        node.select();
      }
    }
  }

  function isSelectableInput(node) {
    return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';
  }

  function isEscapeEvent(e) {
    return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
  }

  function isTabEvent(e) {
    return e.key === 'Tab' || e.keyCode === 9;
  }

  function delay(fn) {
    return setTimeout(fn, 0);
  }

  var focusTrap_1 = focusTrap;

  var createFocusTrap = /*#__PURE__*/Object.freeze({
    default: focusTrap_1,
    __moduleExports: focusTrap_1
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  function createFocusTrapInstance(surfaceEl, focusTrapFactory, initialFocusEl) {
    if (focusTrapFactory === void 0) {
      focusTrapFactory = createFocusTrap;
    }

    return focusTrapFactory(surfaceEl, {
      clickOutsideDeactivates: true,
      escapeDeactivates: false,
      initialFocus: initialFocusEl
    });
  }
  function isScrollable(el) {
    return el ? el.scrollHeight > el.offsetHeight : false;
  }
  function areTopsMisaligned(els) {
    var tops = new Set();
    [].forEach.call(els, function (el) {
      return tops.add(el.offsetTop);
    });
    return tops.size > 1;
  }

  //
  var strings$6 = MDCDialogFoundation.strings;
  var script$i = {
    name: 'mdc-dialog',
    components: {
      mdcButton: mdcButton
    },
    mixins: [VMAUniqueIdMixin],
    model: {
      prop: 'open',
      event: 'change'
    },
    props: {
      title: {
        type: String
      },
      accept: {
        type: String,
        default: 'Ok'
      },
      acceptDisabled: Boolean,
      acceptRaised: {
        type: Boolean,
        default: false
      },
      cancel: {
        type: String
      },
      cancelRaised: {
        type: Boolean,
        default: false
      },
      accent: Boolean,
      scrollable: Boolean,
      open: Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-theme--dark': this.dark
        },
        styles: {},
        surfaceClasses: {},
        bodyClasses: {
          'mdc-dialog__body--scrollable': this.scrollable
        }
      };
    },
    watch: {
      open: 'onOpen_'
    },
    mounted: function mounted() {
      var _this = this;

      if (this.accept) {
        this.focusTrap = createFocusTrapInstance(this.$refs.container, focusTrap_1);
      }

      this.buttons_ = [].slice.call(this.$el.querySelectorAll(strings$6.BUTTON_SELECTOR));
      this.foundation = new MDCDialogFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return _this.$el.classList.contains(className);
        },
        addBodyClass: function addBodyClass(className) {
          return document.body.classList.add(className);
        },
        removeBodyClass: function removeBodyClass(className) {
          return document.body.classList.remove(className);
        },
        eventTargetMatches: function eventTargetMatches(target, selector) {
          return matches(target, selector);
        },
        trapFocus: function trapFocus() {
          return _this.focusTrap && _this.focusTrap.activate();
        },
        releaseFocus: function releaseFocus() {
          return _this.focusTrap && _this.focusTrap.deactivate();
        },
        isContentScrollable: function isContentScrollable() {
          return !!_this.$refs.content && isScrollable(_this.$refs.content);
        },
        areButtonsStacked: function areButtonsStacked() {
          return areTopsMisaligned(_this.buttons_);
        },
        getActionFromEvent: function getActionFromEvent(event) {
          var element = closest(event.target, "[".concat(strings$6.ACTION_ATTRIBUTE, "]"));
          return element && element.getAttribute(strings$6.ACTION_ATTRIBUTE);
        },
        clickDefaultButton: function clickDefaultButton() {
          if (_this.$refs.defaultButton) {
            _this.$refs.defaultButton.click();
          }
        },
        reverseButtons: function reverseButtons() {
          _this.buttons_.reverse();

          _this.buttons_.forEach(function (button) {
            return button.parentElement.appendChild(button);
          });
        },
        notifyOpening: function notifyOpening() {
          return _this.$emit(strings$6.OPENING_EVENT, {});
        },
        notifyOpened: function notifyOpened() {
          return _this.$emit(strings$6.OPENED_EVENT, {});
        },
        notifyClosing: function notifyClosing(action) {
          _this.$emit('change', false); // console.log(action)


          _this.$emit(strings$6.CLOSING_EVENT, action ? {
            action: action
          } : {});
        },
        notifyClosed: function notifyClosed(action) {
          return _this.$emit(strings$6.CLOSED_EVENT, action ? {
            action: action
          } : {});
        }
      });
      this.foundation.init();
      this.open && this.foundation.open();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    },
    methods: {
      onOpen_: function onOpen_(value) {
        if (value) {
          this.foundation.open();
        } else {
          this.foundation.close();
        }
      },
      onClick: function onClick(event) {
        this.foundation.handleInteraction(event);
      },
      onCancel: function onCancel() {
        var _this2 = this;

        if (this.$listeners['validateCancel']) {
          this.$emit('validateCancel', {
            cancel: function cancel() {
              var notify = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

              // if notify = false, the dialog will close
              // but the notifyAccept method will not be called
              // so we need to notify listeners the open state
              // is changing.
              if (!notify) {
                _this2.$emit('change', false);
              }

              _this2.foundation.cancel(notify);
            }
          });
        } else {
          this.foundation.cancel(true);
        }
      },
      onAccept: function onAccept() {
        var _this3 = this;

        if (this.$listeners['validate']) {
          this.$emit('validate', {
            accept: function accept() {
              var notify = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

              // if notify = false, the dialog will close
              // but the notifyAccept method will not be called
              // so we need to notify listeners the open state
              // is changing.
              if (!notify) {
                _this3.$emit('change', false);
              }

              _this3.foundation.accept(notify);
            }
          });
        } else {
          this.foundation.accept(true);
        }
      },
      show: function show() {
        this.foundation.open();
      },
      close: function close() {
        this.foundation.close();
      }
    }
  };

  /* script */
  const __vue_script__$i = script$i;

  /* template */
  var __vue_render__$f = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        ref: "root",
        staticClass: "mdc-dialog",
        class: _vm.classes,
        style: _vm.styles,
        attrs: {
          "aria-modal": "true",
          "aria-labelledby": "label" + _vm.vma_uid_,
          "aria-describedby": "desc" + _vm.vma_uid_,
          role: "alertdialog"
        },
        on: { click: _vm.onClick, keydown: _vm.onClick }
      },
      [
        _c("div", { ref: "container", staticClass: "mdc-dialog__container" }, [
          _c(
            "div",
            {
              ref: "surface",
              staticClass: "mdc-dialog__surface",
              class: _vm.surfaceClasses
            },
            [
              _vm.title
                ? _c(
                    "h2",
                    {
                      staticClass: "mdc-dialog__title",
                      attrs: { id: "label" + _vm.vma_uid_ }
                    },
                    [_vm._v(_vm._s(_vm.title))]
                  )
                : _vm._e(),
              _vm._v(" "),
              _c(
                "div",
                {
                  ref: "content",
                  staticClass: "mdc-dialog__content",
                  attrs: { id: "desc" + _vm.vma_uid_ }
                },
                [_vm._t("default")],
                2
              ),
              _vm._v(" "),
              _vm.accept || _vm.cancel
                ? _c("footer", { staticClass: "mdc-dialog__actions" }, [
                    _vm.cancel
                      ? _c(
                          "button",
                          {
                            staticClass: "mdc-button mdc-dialog__button",
                            attrs: {
                              type: "button",
                              "data-mdc-dialog-action": "no"
                            }
                          },
                          [
                            _vm._v(
                              "\n          " + _vm._s(_vm.cancel) + "\n        "
                            )
                          ]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        ref: "defaultButton",
                        staticClass: "mdc-button mdc-dialog__button ",
                        attrs: {
                          type: "button",
                          disabled: _vm.acceptDisabled,
                          "data-mdc-dialog-action": "yes"
                        }
                      },
                      [_vm._v("\n          " + _vm._s(_vm.accept) + "\n        ")]
                    )
                  ])
                : _vm._e()
            ]
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "mdc-dialog__scrim" })
      ]
    )
  };
  var __vue_staticRenderFns__$f = [];
  __vue_render__$f._withStripped = true;

    /* style */
    const __vue_inject_styles__$i = undefined;
    /* scoped */
    const __vue_scope_id__$i = undefined;
    /* module identifier */
    const __vue_module_identifier__$i = undefined;
    /* functional template */
    const __vue_is_functional_template__$i = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcDialog = normalizeComponent_1(
      { render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f },
      __vue_inject_styles__$i,
      __vue_script__$i,
      __vue_scope_id__$i,
      __vue_is_functional_template__$i,
      __vue_module_identifier__$i,
      undefined,
      undefined
    );

  var VueMDCDialog = BasePlugin({
    mdcDialog: mdcDialog
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$7 = {
    ANIMATE: 'mdc-drawer--animate',
    CLOSING: 'mdc-drawer--closing',
    DISMISSIBLE: 'mdc-drawer--dismissible',
    MODAL: 'mdc-drawer--modal',
    OPEN: 'mdc-drawer--open',
    OPENING: 'mdc-drawer--opening',
    ROOT: 'mdc-drawer'
  };
  var strings$7 = {
    APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',
    CLOSE_EVENT: 'MDCDrawer:closed',
    OPEN_EVENT: 'MDCDrawer:opened',
    SCRIM_SELECTOR: '.mdc-drawer-scrim'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCDismissibleDrawerFoundation =
  /** @class */
  function (_super) {
    __extends(MDCDismissibleDrawerFoundation, _super);

    function MDCDismissibleDrawerFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCDismissibleDrawerFoundation.defaultAdapter, adapter)) || this;

      _this.animationFrame_ = 0;
      _this.animationTimer_ = 0;
      return _this;
    }

    Object.defineProperty(MDCDismissibleDrawerFoundation, "strings", {
      get: function get() {
        return strings$7;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCDismissibleDrawerFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$7;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCDismissibleDrawerFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          elementHasClass: function elementHasClass() {
            return false;
          },
          notifyClose: function notifyClose() {
            return undefined;
          },
          notifyOpen: function notifyOpen() {
            return undefined;
          },
          saveFocus: function saveFocus() {
            return undefined;
          },
          restoreFocus: function restoreFocus() {
            return undefined;
          },
          focusActiveNavigationItem: function focusActiveNavigationItem() {
            return undefined;
          },
          trapFocus: function trapFocus() {
            return undefined;
          },
          releaseFocus: function releaseFocus() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCDismissibleDrawerFoundation.prototype.destroy = function () {
      if (this.animationFrame_) {
        cancelAnimationFrame(this.animationFrame_);
      }

      if (this.animationTimer_) {
        clearTimeout(this.animationTimer_);
      }
    };

    MDCDismissibleDrawerFoundation.prototype.open = function () {
      var _this = this;

      if (this.isOpen() || this.isOpening() || this.isClosing()) {
        return;
      }

      this.adapter_.addClass(cssClasses$7.OPEN);
      this.adapter_.addClass(cssClasses$7.ANIMATE); // Wait a frame once display is no longer "none", to establish basis for animation

      this.runNextAnimationFrame_(function () {
        _this.adapter_.addClass(cssClasses$7.OPENING);
      });
      this.adapter_.saveFocus();
    };

    MDCDismissibleDrawerFoundation.prototype.close = function () {
      if (!this.isOpen() || this.isOpening() || this.isClosing()) {
        return;
      }

      this.adapter_.addClass(cssClasses$7.CLOSING);
    };
    /**
     * @return true if drawer is in open state.
     */


    MDCDismissibleDrawerFoundation.prototype.isOpen = function () {
      return this.adapter_.hasClass(cssClasses$7.OPEN);
    };
    /**
     * @return true if drawer is animating open.
     */


    MDCDismissibleDrawerFoundation.prototype.isOpening = function () {
      return this.adapter_.hasClass(cssClasses$7.OPENING) || this.adapter_.hasClass(cssClasses$7.ANIMATE);
    };
    /**
     * @return true if drawer is animating closed.
     */


    MDCDismissibleDrawerFoundation.prototype.isClosing = function () {
      return this.adapter_.hasClass(cssClasses$7.CLOSING);
    };
    /**
     * Keydown handler to close drawer when key is escape.
     */


    MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {
      var keyCode = evt.keyCode,
          key = evt.key;
      var isEscape = key === 'Escape' || keyCode === 27;

      if (isEscape) {
        this.close();
      }
    };
    /**
     * Handles a transition end event on the root element.
     */


    MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {
      var OPENING = cssClasses$7.OPENING,
          CLOSING = cssClasses$7.CLOSING,
          OPEN = cssClasses$7.OPEN,
          ANIMATE = cssClasses$7.ANIMATE,
          ROOT = cssClasses$7.ROOT; // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.

      var isRootElement = this.isElement_(evt.target) && this.adapter_.elementHasClass(evt.target, ROOT);

      if (!isRootElement) {
        return;
      }

      if (this.isClosing()) {
        this.adapter_.removeClass(OPEN);
        this.closed();
        this.adapter_.restoreFocus();
        this.adapter_.notifyClose();
      } else {
        this.adapter_.focusActiveNavigationItem();
        this.opened();
        this.adapter_.notifyOpen();
      }

      this.adapter_.removeClass(ANIMATE);
      this.adapter_.removeClass(OPENING);
      this.adapter_.removeClass(CLOSING);
    };
    /**
     * Extension point for when drawer finishes open animation.
     */


    MDCDismissibleDrawerFoundation.prototype.opened = function () {}; // tslint:disable-line:no-empty

    /**
     * Extension point for when drawer finishes close animation.
     */


    MDCDismissibleDrawerFoundation.prototype.closed = function () {}; // tslint:disable-line:no-empty

    /**
     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
     */


    MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {
      var _this = this;

      cancelAnimationFrame(this.animationFrame_);
      this.animationFrame_ = requestAnimationFrame(function () {
        _this.animationFrame_ = 0;
        clearTimeout(_this.animationTimer_);
        _this.animationTimer_ = setTimeout(callback, 0);
      });
    };

    MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {
      // In Edge, transitionend on ripple pseudo-elements yields a target without classList.
      return Boolean(element.classList);
    };

    return MDCDismissibleDrawerFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /* istanbul ignore next: subclass is not a branch statement */

  var MDCModalDrawerFoundation =
  /** @class */
  function (_super) {
    __extends(MDCModalDrawerFoundation, _super);

    function MDCModalDrawerFoundation() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Called when drawer finishes open animation.
     */


    MDCModalDrawerFoundation.prototype.opened = function () {
      this.adapter_.trapFocus();
    };
    /**
     * Called when drawer finishes close animation.
     */


    MDCModalDrawerFoundation.prototype.closed = function () {
      this.adapter_.releaseFocus();
    };
    /**
     * Handles click event on scrim.
     */


    MDCModalDrawerFoundation.prototype.handleScrimClick = function () {
      this.close();
    };

    return MDCModalDrawerFoundation;
  }(MDCDismissibleDrawerFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$8 = {
    LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
    LIST_ITEM_CLASS: 'mdc-list-item',
    LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
    ROOT: 'mdc-list'
  };
  var strings$8 = {
    ACTION_EVENT: 'MDCList:action',
    ARIA_CHECKED: 'aria-checked',
    ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
    ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
    ARIA_ORIENTATION: 'aria-orientation',
    ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
    ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
    ARIA_SELECTED: 'aria-selected',
    CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"]:not(:disabled), input[type="radio"]:not(:disabled)',
    CHECKBOX_SELECTOR: 'input[type="checkbox"]:not(:disabled)',
    CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses$8.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$8.LIST_ITEM_CLASS + " a\n  ",
    ENABLED_ITEMS_SELECTOR: '.mdc-list-item:not(.mdc-list-item--disabled)',
    FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses$8.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$8.LIST_ITEM_CLASS + " a,\n    ." + cssClasses$8.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses$8.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled)\n  ",
    RADIO_SELECTOR: 'input[type="radio"]:not(:disabled)'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];

  function isNumberArray(selectedIndex) {
    return selectedIndex instanceof Array;
  }

  var MDCListFoundation =
  /** @class */
  function (_super) {
    __extends(MDCListFoundation, _super);

    function MDCListFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCListFoundation.defaultAdapter, adapter)) || this;

      _this.wrapFocus_ = false;
      _this.isVertical_ = true;
      _this.isSingleSelectionList_ = false;
      _this.selectedIndex_ = -1;
      _this.focusedItemIndex_ = -1;
      _this.useActivatedClass_ = false;
      _this.isCheckboxList_ = false;
      _this.isRadioList_ = false;
      return _this;
    }

    Object.defineProperty(MDCListFoundation, "strings", {
      get: function get() {
        return strings$8;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCListFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$8;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCListFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClassForElementIndex: function addClassForElementIndex() {
            return undefined;
          },
          focusItemAtIndex: function focusItemAtIndex() {
            return undefined;
          },
          getFocusedElementIndex: function getFocusedElementIndex() {
            return 0;
          },
          getListItemCount: function getListItemCount() {
            return 0;
          },
          hasCheckboxAtIndex: function hasCheckboxAtIndex() {
            return false;
          },
          hasRadioAtIndex: function hasRadioAtIndex() {
            return false;
          },
          isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex() {
            return false;
          },
          isFocusInsideList: function isFocusInsideList() {
            return false;
          },
          notifyAction: function notifyAction() {
            return undefined;
          },
          removeAttributeForElementIndex: function removeAttributeForElementIndex() {
            return undefined;
          },
          removeClassForElementIndex: function removeClassForElementIndex() {
            return undefined;
          },
          setAttributeForElementIndex: function setAttributeForElementIndex() {
            return undefined;
          },
          setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex() {
            return undefined;
          },
          setTabIndexForListItemChildren: function setTabIndexForListItemChildren() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCListFoundation.prototype.layout = function () {
      if (this.adapter_.getListItemCount() === 0) return;

      if (this.adapter_.hasCheckboxAtIndex(0)) {
        this.isCheckboxList_ = true;
      } else if (this.adapter_.hasRadioAtIndex(0)) {
        this.isRadioList_ = true;
      }
    };
    /**
     * Sets the private wrapFocus_ variable.
     */


    MDCListFoundation.prototype.setWrapFocus = function (value) {
      this.wrapFocus_ = value;
    };
    /**
     * Sets the isVertical_ private variable.
     */


    MDCListFoundation.prototype.setVerticalOrientation = function (value) {
      this.isVertical_ = value;
    };
    /**
     * Sets the isSingleSelectionList_ private variable.
     */


    MDCListFoundation.prototype.setSingleSelection = function (value) {
      this.isSingleSelectionList_ = value;
    };
    /**
     * Sets the useActivatedClass_ private variable.
     */


    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {
      this.useActivatedClass_ = useActivated;
    };

    MDCListFoundation.prototype.getSelectedIndex = function () {
      return this.selectedIndex_;
    };

    MDCListFoundation.prototype.setSelectedIndex = function (index) {
      if (!this.isIndexValid_(index)) {
        return;
      }

      if (this.isCheckboxList_) {
        this.setCheckboxAtIndex_(index);
      } else if (this.isRadioList_) {
        this.setRadioAtIndex_(index);
      } else {
        this.setSingleSelectionAtIndex_(index);
      }
    };
    /**
     * Focus in handler for the list items.
     */


    MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {
      if (listItemIndex >= 0) {
        this.adapter_.setTabIndexForListItemChildren(listItemIndex, '0');
      }
    };
    /**
     * Focus out handler for the list items.
     */


    MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {
      var _this = this;

      if (listItemIndex >= 0) {
        this.adapter_.setTabIndexForListItemChildren(listItemIndex, '-1');
      }
      /**
       * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus
       * is moved to next element.
       */


      setTimeout(function () {
        if (!_this.adapter_.isFocusInsideList()) {
          _this.setTabindexToFirstSelectedItem_();
        }
      }, 0);
    };
    /**
     * Key handler for the list.
     */


    MDCListFoundation.prototype.handleKeydown = function (evt, isRootListItem, listItemIndex) {
      var arrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;
      var arrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;
      var arrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;
      var arrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;
      var isHome = evt.key === 'Home' || evt.keyCode === 36;
      var isEnd = evt.key === 'End' || evt.keyCode === 35;
      var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
      var isSpace = evt.key === 'Space' || evt.keyCode === 32;
      var currentIndex = this.adapter_.getFocusedElementIndex();
      var nextIndex = -1;

      if (currentIndex === -1) {
        currentIndex = listItemIndex;

        if (currentIndex < 0) {
          // If this event doesn't have a mdc-list-item ancestor from the
          // current list (not from a sublist), return early.
          return;
        }
      }

      if (this.isVertical_ && arrowDown || !this.isVertical_ && arrowRight) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusNextElement(currentIndex);
      } else if (this.isVertical_ && arrowUp || !this.isVertical_ && arrowLeft) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusPrevElement(currentIndex);
      } else if (isHome) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusFirstElement();
      } else if (isEnd) {
        this.preventDefaultEvent_(evt);
        nextIndex = this.focusLastElement();
      } else if (isEnter || isSpace) {
        if (isRootListItem) {
          // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.
          var target = evt.target;

          if (target && target.tagName === 'A' && isEnter) {
            return;
          }

          this.preventDefaultEvent_(evt);

          if (this.isSelectableList_()) {
            this.setSelectedIndexOnAction_(currentIndex);
          }

          this.adapter_.notifyAction(currentIndex);
        }
      }

      this.focusedItemIndex_ = currentIndex;

      if (nextIndex >= 0) {
        this.setTabindexAtIndex_(nextIndex);
        this.focusedItemIndex_ = nextIndex;
      }
    };
    /**
     * Click handler for the list.
     */


    MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {
      if (index === -1) return;

      if (this.isSelectableList_()) {
        this.setSelectedIndexOnAction_(index, toggleCheckbox);
      }

      this.adapter_.notifyAction(index);
      this.setTabindexAtIndex_(index);
      this.focusedItemIndex_ = index;
    };
    /**
     * Focuses the next element on the list.
     */


    MDCListFoundation.prototype.focusNextElement = function (index) {
      var count = this.adapter_.getListItemCount();
      var nextIndex = index + 1;

      if (nextIndex >= count) {
        if (this.wrapFocus_) {
          nextIndex = 0;
        } else {
          // Return early because last item is already focused.
          return index;
        }
      }

      this.adapter_.focusItemAtIndex(nextIndex);
      return nextIndex;
    };
    /**
     * Focuses the previous element on the list.
     */


    MDCListFoundation.prototype.focusPrevElement = function (index) {
      var prevIndex = index - 1;

      if (prevIndex < 0) {
        if (this.wrapFocus_) {
          prevIndex = this.adapter_.getListItemCount() - 1;
        } else {
          // Return early because first item is already focused.
          return index;
        }
      }

      this.adapter_.focusItemAtIndex(prevIndex);
      return prevIndex;
    };

    MDCListFoundation.prototype.focusFirstElement = function () {
      this.adapter_.focusItemAtIndex(0);
      return 0;
    };

    MDCListFoundation.prototype.focusLastElement = function () {
      var lastIndex = this.adapter_.getListItemCount() - 1;
      this.adapter_.focusItemAtIndex(lastIndex);
      return lastIndex;
    };
    /**
     * Ensures that preventDefault is only called if the containing element doesn't
     * consume the event, and it will cause an unintended scroll.
     */


    MDCListFoundation.prototype.preventDefaultEvent_ = function (evt) {
      var target = evt.target;
      var tagName = ("" + target.tagName).toLowerCase();

      if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
        evt.preventDefault();
      }
    };

    MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {
      var selectedClassName = cssClasses$8.LIST_ITEM_SELECTED_CLASS;

      if (this.useActivatedClass_) {
        selectedClassName = cssClasses$8.LIST_ITEM_ACTIVATED_CLASS;
      }

      if (this.selectedIndex_ >= 0 && this.selectedIndex_ !== index) {
        this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);
        this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings$8.ARIA_SELECTED, 'false');
      }

      this.adapter_.addClassForElementIndex(index, selectedClassName);
      this.adapter_.setAttributeForElementIndex(index, strings$8.ARIA_SELECTED, 'true');
      this.selectedIndex_ = index;
    };
    /**
     * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.
     */


    MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {
      this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);

      if (this.selectedIndex_ >= 0) {
        this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings$8.ARIA_CHECKED, 'false');
      }

      this.adapter_.setAttributeForElementIndex(index, strings$8.ARIA_CHECKED, 'true');
      this.selectedIndex_ = index;
    };

    MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {
      for (var i = 0; i < this.adapter_.getListItemCount(); i++) {
        var isChecked = false;

        if (index.indexOf(i) >= 0) {
          isChecked = true;
        }

        this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
        this.adapter_.setAttributeForElementIndex(i, strings$8.ARIA_CHECKED, isChecked ? 'true' : 'false');
      }

      this.selectedIndex_ = index;
    };

    MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {
      if (this.focusedItemIndex_ === -1 && index !== 0) {
        // If no list item was selected set first list item's tabindex to -1.
        // Generally, tabindex is set to 0 on first list item of list that has no preselected items.
        this.adapter_.setAttributeForElementIndex(0, 'tabindex', '-1');
      } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {
        this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', '-1');
      }

      this.adapter_.setAttributeForElementIndex(index, 'tabindex', '0');
    };
    /**
     * @return Return true if it is single selectin list, checkbox list or radio list.
     */


    MDCListFoundation.prototype.isSelectableList_ = function () {
      return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;
    };

    MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {
      var targetIndex = 0;

      if (this.isSelectableList_()) {
        if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== -1) {
          targetIndex = this.selectedIndex_;
        } else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {
          targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) {
            return Math.min(currentIndex, minIndex);
          });
        }
      }

      this.setTabindexAtIndex_(targetIndex);
    };

    MDCListFoundation.prototype.isIndexValid_ = function (index) {
      var _this = this;

      if (index instanceof Array) {
        if (!this.isCheckboxList_) {
          throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
        }

        if (index.length === 0) {
          return true;
        } else {
          return index.some(function (i) {
            return _this.isIndexInRange_(i);
          });
        }
      } else if (typeof index === 'number') {
        if (this.isCheckboxList_) {
          throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);
        }

        return this.isIndexInRange_(index);
      } else {
        return false;
      }
    };

    MDCListFoundation.prototype.isIndexInRange_ = function (index) {
      var listSize = this.adapter_.getListItemCount();
      return index >= 0 && index < listSize;
    };

    MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {
      if (toggleCheckbox === void 0) {
        toggleCheckbox = true;
      }

      if (this.isCheckboxList_) {
        this.toggleCheckboxAtIndex_(index, toggleCheckbox);
      } else {
        this.setSelectedIndex(index);
      }
    };

    MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {
      var isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);

      if (toggleCheckbox) {
        isChecked = !isChecked;
        this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
      }

      this.adapter_.setAttributeForElementIndex(index, strings$8.ARIA_CHECKED, isChecked ? 'true' : 'false'); // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.

      var selectedIndexes = this.selectedIndex_ === -1 ? [] : this.selectedIndex_.slice();

      if (isChecked) {
        selectedIndexes.push(index);
      } else {
        selectedIndexes = selectedIndexes.filter(function (i) {
          return i !== index;
        });
      }

      this.selectedIndex_ = selectedIndexes;
    };

    return MDCListFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCList =
  /** @class */
  function (_super) {
    __extends(MDCList, _super);

    function MDCList() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    Object.defineProperty(MDCList.prototype, "vertical", {
      set: function set(value) {
        this.foundation_.setVerticalOrientation(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCList.prototype, "listElements", {
      get: function get() {
        return [].slice.call(this.root_.querySelectorAll(strings$8.ENABLED_ITEMS_SELECTOR));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCList.prototype, "wrapFocus", {
      set: function set(value) {
        this.foundation_.setWrapFocus(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCList.prototype, "singleSelection", {
      set: function set(isSingleSelectionList) {
        this.foundation_.setSingleSelection(isSingleSelectionList);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCList.prototype, "selectedIndex", {
      get: function get() {
        return this.foundation_.getSelectedIndex();
      },
      set: function set(index) {
        this.foundation_.setSelectedIndex(index);
      },
      enumerable: true,
      configurable: true
    });

    MDCList.attachTo = function (root) {
      return new MDCList(root);
    };

    MDCList.prototype.initialSyncWithDOM = function () {
      this.handleClick_ = this.handleClickEvent_.bind(this);
      this.handleKeydown_ = this.handleKeydownEvent_.bind(this);
      this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);
      this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);
      this.listen('keydown', this.handleKeydown_);
      this.listen('click', this.handleClick_);
      this.listen('focusin', this.focusInEventListener_);
      this.listen('focusout', this.focusOutEventListener_);
      this.layout();
      this.initializeListType();
    };

    MDCList.prototype.destroy = function () {
      this.unlisten('keydown', this.handleKeydown_);
      this.unlisten('click', this.handleClick_);
      this.unlisten('focusin', this.focusInEventListener_);
      this.unlisten('focusout', this.focusOutEventListener_);
    };

    MDCList.prototype.layout = function () {
      var direction = this.root_.getAttribute(strings$8.ARIA_ORIENTATION);
      this.vertical = direction !== strings$8.ARIA_ORIENTATION_HORIZONTAL; // List items need to have at least tabindex=-1 to be focusable.

      [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (el) {
        el.setAttribute('tabindex', '-1');
      }); // Child button/a elements are not tabbable until the list item is focused.

      [].slice.call(this.root_.querySelectorAll(strings$8.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (el) {
        return el.setAttribute('tabindex', '-1');
      });
      this.foundation_.layout();
    };
    /**
     * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.
     */


    MDCList.prototype.initializeListType = function () {
      var _this = this;

      var checkboxListItems = this.root_.querySelectorAll(strings$8.ARIA_ROLE_CHECKBOX_SELECTOR);
      var singleSelectedListItem = this.root_.querySelector("\n      ." + cssClasses$8.LIST_ITEM_ACTIVATED_CLASS + ",\n      ." + cssClasses$8.LIST_ITEM_SELECTED_CLASS + "\n    ");
      var radioSelectedListItem = this.root_.querySelector(strings$8.ARIA_CHECKED_RADIO_SELECTOR);

      if (checkboxListItems.length) {
        var preselectedItems = this.root_.querySelectorAll(strings$8.ARIA_CHECKED_CHECKBOX_SELECTOR);
        this.selectedIndex = [].map.call(preselectedItems, function (listItem) {
          return _this.listElements.indexOf(listItem);
        });
      } else if (singleSelectedListItem) {
        if (singleSelectedListItem.classList.contains(cssClasses$8.LIST_ITEM_ACTIVATED_CLASS)) {
          this.foundation_.setUseActivatedClass(true);
        }

        this.singleSelection = true;
        this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);
      } else if (radioSelectedListItem) {
        this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
      }
    };

    MDCList.prototype.getDefaultFoundation = function () {
      var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
      // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.


      var adapter = {
        addClassForElementIndex: function addClassForElementIndex(index, className) {
          var element = _this.listElements[index];

          if (element) {
            element.classList.add(className);
          }
        },
        focusItemAtIndex: function focusItemAtIndex(index) {
          var element = _this.listElements[index];

          if (element) {
            element.focus();
          }
        },
        getFocusedElementIndex: function getFocusedElementIndex() {
          return _this.listElements.indexOf(document.activeElement);
        },
        getListItemCount: function getListItemCount() {
          return _this.listElements.length;
        },
        hasCheckboxAtIndex: function hasCheckboxAtIndex(index) {
          var listItem = _this.listElements[index];
          return !!listItem.querySelector(strings$8.CHECKBOX_SELECTOR);
        },
        hasRadioAtIndex: function hasRadioAtIndex(index) {
          var listItem = _this.listElements[index];
          return !!listItem.querySelector(strings$8.RADIO_SELECTOR);
        },
        isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex(index) {
          var listItem = _this.listElements[index];
          var toggleEl = listItem.querySelector(strings$8.CHECKBOX_SELECTOR);
          return toggleEl.checked;
        },
        isFocusInsideList: function isFocusInsideList() {
          return _this.root_.contains(document.activeElement);
        },
        notifyAction: function notifyAction(index) {
          _this.emit(strings$8.ACTION_EVENT, {
            index: index
          },
          /** shouldBubble */
          true);
        },
        removeAttributeForElementIndex: function removeAttributeForElementIndex(index, attr) {
          var element = _this.listElements[index];

          if (element) {
            element.removeAttribute(attr);
          }
        },
        removeClassForElementIndex: function removeClassForElementIndex(index, className) {
          var element = _this.listElements[index];

          if (element) {
            element.classList.remove(className);
          }
        },
        setAttributeForElementIndex: function setAttributeForElementIndex(index, attr, value) {
          var element = _this.listElements[index];

          if (element) {
            element.setAttribute(attr, value);
          }
        },
        setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex(index, isChecked) {
          var listItem = _this.listElements[index];
          var toggleEl = listItem.querySelector(strings$8.CHECKBOX_RADIO_SELECTOR);
          toggleEl.checked = isChecked;
          var event = document.createEvent('Event');
          event.initEvent('change', true, true);
          toggleEl.dispatchEvent(event);
        },
        setTabIndexForListItemChildren: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {
          var element = _this.listElements[listItemIndex];
          var listItemChildren = [].slice.call(element.querySelectorAll(strings$8.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
          listItemChildren.forEach(function (el) {
            return el.setAttribute('tabindex', tabIndexValue);
          });
        }
      };
      return new MDCListFoundation(adapter);
    };
    /**
     * Used to figure out which list item this event is targetting. Or returns -1 if
     * there is no list item
     */


    MDCList.prototype.getListItemIndex_ = function (evt) {
      var eventTarget = evt.target;
      var nearestParent = closest(eventTarget, "." + cssClasses$8.LIST_ITEM_CLASS + ", ." + cssClasses$8.ROOT); // Get the index of the element if it is a list item.

      if (nearestParent && matches(nearestParent, "." + cssClasses$8.LIST_ITEM_CLASS)) {
        return this.listElements.indexOf(nearestParent);
      }

      return -1;
    };
    /**
     * Used to figure out which element was clicked before sending the event to the foundation.
     */


    MDCList.prototype.handleFocusInEvent_ = function (evt) {
      var index = this.getListItemIndex_(evt);
      this.foundation_.handleFocusIn(evt, index);
    };
    /**
     * Used to figure out which element was clicked before sending the event to the foundation.
     */


    MDCList.prototype.handleFocusOutEvent_ = function (evt) {
      var index = this.getListItemIndex_(evt);
      this.foundation_.handleFocusOut(evt, index);
    };
    /**
     * Used to figure out which element was focused when keydown event occurred before sending the event to the
     * foundation.
     */


    MDCList.prototype.handleKeydownEvent_ = function (evt) {
      var index = this.getListItemIndex_(evt);
      var target = evt.target;

      if (index >= 0) {
        this.foundation_.handleKeydown(evt, target.classList.contains(cssClasses$8.LIST_ITEM_CLASS), index);
      }
    };
    /**
     * Used to figure out which element was clicked before sending the event to the foundation.
     */


    MDCList.prototype.handleClickEvent_ = function (evt) {
      var index = this.getListItemIndex_(evt);
      var target = evt.target; // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.

      var toggleCheckbox = !matches(target, strings$8.CHECKBOX_RADIO_SELECTOR);
      this.foundation_.handleClick(index, toggleCheckbox);
    };

    return MDCList;
  }(MDCComponent);

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var media = new (
  /*#__PURE__*/
  function () {
    function _class() {
      _classCallCheck(this, _class);
    }

    _createClass(_class, [{
      key: "small",
      get: function get() {
        return this._small || (this._small = window.matchMedia('(max-width: 839px)'));
      }
    }, {
      key: "large",
      get: function get() {
        return this._large || (this._large = window.matchMedia('(min-width: 1200px)'));
      }
    }]);

    return _class;
  }())();
  var script$j = {
    name: 'mdc-drawer',
    model: {
      prop: 'open',
      event: 'change'
    },
    props: {
      modal: Boolean,
      open: Boolean,
      toolbarSpacer: Boolean,
      toggleOn: String,
      toggleOnSource: {
        type: Object,
        required: false
      },
      openOn: String,
      openOnSource: {
        type: Object,
        required: false
      },
      closeOn: String,
      closeOnSource: {
        type: Object,
        required: false
      }
    },
    provide: function provide() {
      return {
        mdcDrawer: this
      };
    },
    data: function data() {
      return {
        // open_: false,
        classes: {}
      };
    },
    computed: {
      type: function type() {},
      isModal: function isModal() {
        return this.modal;
      }
    },
    watch: {
      open: 'onOpen_'
    },
    mounted: function mounted() {
      var _this = this;

      this.drawer_ = this.$refs.drawer;
      var adapter = {
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return _this.drawer_.classList.contains(className);
        },
        elementHasClass: function elementHasClass(element, className) {
          return element.classList.contains(className);
        },
        saveFocus: function saveFocus() {
          _this.previousFocus_ = document.activeElement;
        },
        restoreFocus: function restoreFocus() {
          var previousFocus = _this.previousFocus_ && _this.previousFocus_.focus;

          if (_this.drawer_.contains(document.activeElement) && previousFocus) {
            _this.previousFocus_.focus();
          }
        },
        focusActiveNavigationItem: function focusActiveNavigationItem() {
          var activeNavItemEl = _this.drawer_.querySelector(".".concat(MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS));

          if (activeNavItemEl) {
            activeNavItemEl.focus();
          }
        },
        notifyClose: function notifyClose() {
          _this.$emit('change', false);

          _this.$emit('close');
        },
        notifyOpen: function notifyOpen() {
          _this.$emit('change', true);

          _this.$emit('open');
        },
        trapFocus: function trapFocus() {
          return _this.focusTrap_.activate();
        },
        releaseFocus: function releaseFocus() {
          return _this.focusTrap_.deactivate();
        }
      };
      var _MDCDismissibleDrawer = MDCDismissibleDrawerFoundation.cssClasses,
          DISMISSIBLE = _MDCDismissibleDrawer.DISMISSIBLE,
          MODAL = _MDCDismissibleDrawer.MODAL;

      if (this.drawer_.classList.contains(DISMISSIBLE)) {
        this.foundation = new MDCDismissibleDrawerFoundation(adapter);
      } else if (this.drawer_.classList.contains(MODAL)) {
        this.foundation = new MDCModalDrawerFoundation(adapter);
      } else {
        throw new Error("MDCDrawer: Failed to instantiate component. Supported variants are ".concat(DISMISSIBLE, " and ").concat(MODAL, "."));
      }

      this.foundation && this.foundation.init();
      this.initialSyncWithDOM();

      if (this.toggleOn) {
        this.toggleOnEventSource = this.toggleOnSource || this.$root;
        this.toggleOnEventSource.$on(this.toggleOn, this.toggle);
      }

      if (this.openOn) {
        this.openOnEventSource = this.openOnSource || this.$root;
        this.openOnEventSource.$on(this.openOn, this.show);
      }

      if (this.closeOn) {
        this.closeOnEventSource = this.closeOnSource || this.$root;
        this.closeOnEventSource.$on(this.closeOn, this.close);
      } // media.small.addListener(this.refreshMedia)
      // media.large.addListener(this.refreshMedia)
      // this.$nextTick(() => this.refreshMedia())

    },
    beforeDestroy: function beforeDestroy() {
      this.foundation && this.foundation.destroy();
      this.foundation = null; // media.small.removeListener(this.refreshMedia)
      // media.large.removeListener(this.refreshMedia)

      if (this.toggleOnEventSource) {
        this.toggleOnEventSource.$off(this.toggleOn, this.toggle);
      }

      if (this.openOnEventSource) {
        this.openOnEventSource.$off(this.openOn, this.show);
      }

      if (this.closeOnEventSource) {
        this.closeOnEventSource.$off(this.closeOn, this.close);
      }
    },
    methods: {
      initialSyncWithDOM: function initialSyncWithDOM() {
        var _this2 = this;

        var MODAL = MDCDismissibleDrawerFoundation.cssClasses.MODAL;

        if (this.drawer_.classList.contains(MODAL)) {
          var SCRIM_SELECTOR = MDCDismissibleDrawerFoundation.strings.SCRIM_SELECTOR;
          this.scrim_ = this.drawer_.parentElement.querySelector(SCRIM_SELECTOR);

          this.handleScrimClick_ = function () {
            return _this2.foundation.handleScrimClick();
          };

          this.scrim_.addEventListener('click', this.handleScrimClick_);
          this.focusTrap_ = createFocusTrapInstance$1(this.drawer_, this.focusTrapFactory_);
        }

        this.handleKeydown_ = function (evt) {
          return _this2.foundation.handleKeydown(evt);
        };

        this.handleTransitionEnd_ = function (evt) {
          return _this2.foundation.handleTransitionEnd(evt);
        };

        this.$el.addEventListener('keydown', this.handleKeydown_);
        this.$el.addEventListener('transitionend', this.handleTransitionEnd_);
      },
      onOpen_: function onOpen_(value) {
        if (this.open) {
          this.foundation && this.foundation.open();
        } else {
          this.foundation && this.foundation.close();
        }
      },
      onChange: function onChange(event) {
        this.$emit('change', event);
        this.$root.$emit('vma:layout');
      },
      show: function show() {
        this.foundation.open();
      },
      close: function close() {
        this.foundation.close();
      },
      toggle: function toggle() {
        this.foundation.isOpen() ? this.foundation.close() : this.foundation.open();
      },
      isOpen: function isOpen() {
        return this.foundation.isOpen();
      },
      refreshMedia: function refreshMedia() {// this.small = media.small.matches
        // this.large = media.large.matches
        // if (this.isResponsive) {
        //   if (this.large) {
        //     this.show()
        //   } else {
        //     this.close()
        //   }
        // }
      }
    }
  };

  function createFocusTrapInstance$1(surfaceEl) {
    var focusTrapFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focusTrap_1;
    return focusTrapFactory(surfaceEl, {
      clickOutsideDeactivates: true,
      initialFocus: false,
      // Navigation drawer handles focusing on active nav item.
      escapeDeactivates: false,
      // Navigation drawer handles ESC.
      returnFocusOnDeactivate: false // Navigation drawer handles restore focus.

    });
  }

  /* script */
  const __vue_script__$j = script$j;

  /* template */
  var __vue_render__$g = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c(
        "aside",
        {
          ref: "drawer",
          staticClass: "mdc-drawer mdc-drawer--modal",
          class: _vm.classes
        },
        [
          _vm.$slots["header"] ? _vm._t("header") : _vm._e(),
          _vm._v(" "),
          _c(
            "div",
            { staticClass: "mdc-drawer__content" },
            [_vm._t("default")],
            2
          )
        ],
        2
      ),
      _vm._v(" "),
      _c("div", { staticClass: "mdc-drawer-scrim" }),
      _vm._v(" "),
      _vm.toolbarSpacer
        ? _c("div", { staticClass: "mdc-top-app-bar--fixed-adjust" })
        : _vm._e()
    ])
  };
  var __vue_staticRenderFns__$g = [];
  __vue_render__$g._withStripped = true;

    /* style */
    const __vue_inject_styles__$j = undefined;
    /* scoped */
    const __vue_scope_id__$j = undefined;
    /* module identifier */
    const __vue_module_identifier__$j = undefined;
    /* functional template */
    const __vue_is_functional_template__$j = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcDrawer = normalizeComponent_1(
      { render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g },
      __vue_inject_styles__$j,
      __vue_script__$j,
      __vue_scope_id__$j,
      __vue_is_functional_template__$j,
      __vue_module_identifier__$j,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$k = {
    name: 'mdc-drawer-header'
  };

  /* script */
  const __vue_script__$k = script$k;

  /* template */
  var __vue_render__$h = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-drawer-header mdc-drawer__header" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$h = [];
  __vue_render__$h._withStripped = true;

    /* style */
    const __vue_inject_styles__$k = undefined;
    /* scoped */
    const __vue_scope_id__$k = undefined;
    /* module identifier */
    const __vue_module_identifier__$k = undefined;
    /* functional template */
    const __vue_is_functional_template__$k = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcDrawerHeader = normalizeComponent_1(
      { render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h },
      __vue_inject_styles__$k,
      __vue_script__$k,
      __vue_scope_id__$k,
      __vue_is_functional_template__$k,
      __vue_module_identifier__$k,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  var script$l = {
    name: 'mdc-drawer-list',
    props: {
      dense: Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-list--dense': this.dense
        }
      };
    }
  };

  /* script */
  const __vue_script__$l = script$l;

  /* template */
  var __vue_render__$i = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "nav",
      { staticClass: "mdc-drawer-list mdc-list", class: _vm.classes },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$i = [];
  __vue_render__$i._withStripped = true;

    /* style */
    const __vue_inject_styles__$l = undefined;
    /* scoped */
    const __vue_scope_id__$l = undefined;
    /* module identifier */
    const __vue_module_identifier__$l = undefined;
    /* functional template */
    const __vue_is_functional_template__$l = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcDrawerList = normalizeComponent_1(
      { render: __vue_render__$i, staticRenderFns: __vue_staticRenderFns__$i },
      __vue_inject_styles__$l,
      __vue_script__$l,
      __vue_scope_id__$l,
      __vue_is_functional_template__$l,
      __vue_module_identifier__$l,
      undefined,
      undefined
    );

  var script$m = {
    name: 'mdc-drawer-item',
    inject: ['mdcDrawer'],
    mixins: [DispatchEventMixin, CustomLinkMixin],
    props: {
      startIcon: String,
      modalClose: {
        type: Boolean,
        default: true
      },
      activated: Boolean,
      exactActiveClass: {
        type: String,
        default: 'mdc-list-item--activated'
      }
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    computed: {
      mylisteners: function mylisteners() {
        var _this = this;

        return _objectSpread({}, this.$listeners, {
          click: function click(e) {
            _this.mdcDrawer.isModal && _this.modalClose && _this.mdcDrawer.close();

            _this.dispatchEvent(e);
          }
        });
      },
      itemClasses: function itemClasses() {
        return {
          'mdc-list-item--activated': this.activated
        };
      },
      hasStartDetail: function hasStartDetail() {
        return this.startIcon || this.$slots['start-detail'];
      }
    },
    mounted: function mounted() {
      this.ripple = new RippleBase(this);
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.ripple && this.ripple.destroy();
      this.ripple = null;
    }
  };

  /* script */
  const __vue_script__$m = script$m;

  /* template */
  var __vue_render__$j = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-link",
      _vm._g(
        {
          staticClass: "mdc-drawer-item mdc-list-item",
          class: [_vm.classes, _vm.itemClasses],
          style: _vm.styles,
          attrs: { link: _vm.link }
        },
        _vm.mylisteners
      ),
      [
        _vm.hasStartDetail
          ? _c(
              "span",
              { staticClass: "mdc-list-item__graphic" },
              [
                _vm._t("start-detail", [
                  _c(
                    "i",
                    {
                      staticClass: "material-icons",
                      attrs: { "aria-hidden": "true" }
                    },
                    [_vm._v(_vm._s(_vm.startIcon))]
                  )
                ])
              ],
              2
            )
          : _vm._e(),
        _vm._v(" "),
        _vm._t("default")
      ],
      2
    )
  };
  var __vue_staticRenderFns__$j = [];
  __vue_render__$j._withStripped = true;

    /* style */
    const __vue_inject_styles__$m = undefined;
    /* scoped */
    const __vue_scope_id__$m = undefined;
    /* module identifier */
    const __vue_module_identifier__$m = undefined;
    /* functional template */
    const __vue_is_functional_template__$m = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcDrawerItem = normalizeComponent_1(
      { render: __vue_render__$j, staticRenderFns: __vue_staticRenderFns__$j },
      __vue_inject_styles__$m,
      __vue_script__$m,
      __vue_scope_id__$m,
      __vue_is_functional_template__$m,
      __vue_module_identifier__$m,
      undefined,
      undefined
    );

  //
  //
  //
  //
  var script$n = {
    name: 'mdc-drawer-divider'
  };

  /* script */
  const __vue_script__$n = script$n;

  /* template */
  var __vue_render__$k = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("hr", { staticClass: "mdc-list-divider" })
  };
  var __vue_staticRenderFns__$k = [];
  __vue_render__$k._withStripped = true;

    /* style */
    const __vue_inject_styles__$n = undefined;
    /* scoped */
    const __vue_scope_id__$n = undefined;
    /* module identifier */
    const __vue_module_identifier__$n = undefined;
    /* functional template */
    const __vue_is_functional_template__$n = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcDrawerDivider = normalizeComponent_1(
      { render: __vue_render__$k, staticRenderFns: __vue_staticRenderFns__$k },
      __vue_inject_styles__$n,
      __vue_script__$n,
      __vue_scope_id__$n,
      __vue_is_functional_template__$n,
      __vue_module_identifier__$n,
      undefined,
      undefined
    );

  var VueMDCDrawer = BasePlugin({
    mdcDrawer: mdcDrawer,
    mdcDrawerHeader: mdcDrawerHeader,
    mdcDrawerList: mdcDrawerList,
    mdcDrawerItem: mdcDrawerItem,
    mdcDrawerDivider: mdcDrawerDivider
  });

  //
  //
  //
  //
  //
  //
  //
  //
  var script$o = {
    name: 'mdc-elevation',
    props: {
      z: {
        type: [Number, String],
        default: function _default() {
          return 1;
        }
      }
    },
    data: function data() {
      var elevationClasses = {};
      elevationClasses["mdc-elevation--z".concat(this.z)] = true;
      return {
        classes: elevationClasses
      };
    }
  };

  /* script */
  const __vue_script__$o = script$o;

  /* template */
  var __vue_render__$l = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-elevation", class: _vm.classes },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$l = [];
  __vue_render__$l._withStripped = true;

    /* style */
    const __vue_inject_styles__$o = undefined;
    /* scoped */
    const __vue_scope_id__$o = undefined;
    /* module identifier */
    const __vue_module_identifier__$o = undefined;
    /* functional template */
    const __vue_is_functional_template__$o = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcElevation = normalizeComponent_1(
      { render: __vue_render__$l, staticRenderFns: __vue_staticRenderFns__$l },
      __vue_inject_styles__$o,
      __vue_script__$o,
      __vue_scope_id__$o,
      __vue_is_functional_template__$o,
      __vue_module_identifier__$o,
      undefined,
      undefined
    );

  var VueMDCElevation = BasePlugin({
    mdcElevation: mdcElevation
  });

  //
  var script$p = {
    name: 'mdc-fab',
    mixins: [DispatchEventMixin, CustomButtonMixin, RippleMixin],
    props: {
      icon: String,
      mini: Boolean,
      absolute: Boolean,
      fixed: Boolean
    },
    data: function data() {
      return {
        classes: {
          'material-icons': this.icon,
          'mdc-fab--mini': this.mini,
          'mdc-fab--absolute': this.absolute,
          'mdc-fab--fixed': this.fixed
        },
        styles: {}
      };
    },
    watch: {
      icon: function icon() {
        this.$set(this.classes, 'material-icons', this.icon);
      },
      mini: function mini() {
        this.$set(this.classes, 'mdc-fab--mini', this.mini);
      }
    }
  };

  /* script */
  const __vue_script__$p = script$p;

  /* template */
  var __vue_render__$m = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-button",
      _vm._g(
        {
          staticClass: "mdc-fab",
          class: _vm.classes,
          style: _vm.styles,
          attrs: { href: _vm.href, link: _vm.link }
        },
        _vm.listeners
      ),
      [
        _c(
          "span",
          { staticClass: "mdc-fab__icon" },
          [_vm._t("default", [_vm._v(_vm._s(_vm.icon))])],
          2
        )
      ]
    )
  };
  var __vue_staticRenderFns__$m = [];
  __vue_render__$m._withStripped = true;

    /* style */
    const __vue_inject_styles__$p = undefined;
    /* scoped */
    const __vue_scope_id__$p = undefined;
    /* module identifier */
    const __vue_module_identifier__$p = undefined;
    /* functional template */
    const __vue_is_functional_template__$p = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcFAB = normalizeComponent_1(
      { render: __vue_render__$m, staticRenderFns: __vue_staticRenderFns__$m },
      __vue_inject_styles__$p,
      __vue_script__$p,
      __vue_scope_id__$p,
      __vue_is_functional_template__$p,
      __vue_module_identifier__$p,
      undefined,
      undefined
    );

  var VueMDCFab = BasePlugin({
    mdcFAB: mdcFAB
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$9 = {
    LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
    LABEL_SHAKE: 'mdc-floating-label--shake',
    ROOT: 'mdc-floating-label'
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCFloatingLabelFoundation =
  /** @class */
  function (_super) {
    __extends(MDCFloatingLabelFoundation, _super);

    function MDCFloatingLabelFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCFloatingLabelFoundation.defaultAdapter, adapter)) || this;

      _this.shakeAnimationEndHandler_ = function () {
        return _this.handleShakeAnimationEnd_();
      };

      return _this;
    }

    Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$9;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
      /**
       * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          getWidth: function getWidth() {
            return 0;
          },
          registerInteractionHandler: function registerInteractionHandler() {
            return undefined;
          },
          deregisterInteractionHandler: function deregisterInteractionHandler() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCFloatingLabelFoundation.prototype.init = function () {
      this.adapter_.registerInteractionHandler('animationend', this.shakeAnimationEndHandler_);
    };

    MDCFloatingLabelFoundation.prototype.destroy = function () {
      this.adapter_.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler_);
    };
    /**
     * Returns the width of the label element.
     */


    MDCFloatingLabelFoundation.prototype.getWidth = function () {
      return this.adapter_.getWidth();
    };
    /**
     * Styles the label to produce a shake animation to indicate an error.
     * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
     */


    MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
      var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;

      if (shouldShake) {
        this.adapter_.addClass(LABEL_SHAKE);
      } else {
        this.adapter_.removeClass(LABEL_SHAKE);
      }
    };
    /**
     * Styles the label to float or dock.
     * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
     */


    MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
      var _a = MDCFloatingLabelFoundation.cssClasses,
          LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE,
          LABEL_SHAKE = _a.LABEL_SHAKE;

      if (shouldFloat) {
        this.adapter_.addClass(LABEL_FLOAT_ABOVE);
      } else {
        this.adapter_.removeClass(LABEL_FLOAT_ABOVE);
        this.adapter_.removeClass(LABEL_SHAKE);
      }
    };

    MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd_ = function () {
      var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
      this.adapter_.removeClass(LABEL_SHAKE);
    };

    return MDCFloatingLabelFoundation;
  }(MDCFoundation);

  //
  var script$q = {
    name: 'mdc-floating-label',
    data: function data() {
      return {
        labelClasses: {
          'mdc-floating-label': true
        }
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCFloatingLabelFoundation({
        addClass: function addClass(className) {
          _this.$set(_this.labelClasses, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.labelClasses, className);
        },
        getWidth: function getWidth() {
          return _this.$el.scrollWidth;
        },
        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
          _this.$el.addEventListener(evtType, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
          _this.$el.removeEventListener(evtType, handler);
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      var foundation = this.foundation;
      this.foundation = null;
      foundation.destroy();
    },
    methods: {
      getWidth: function getWidth() {
        return this.foundation.getWidth();
      },
      float: function float(shouldFloat) {
        this.foundation.float(shouldFloat);
      },
      shake: function shake(shouldShake) {
        this.foundation.shake(shouldShake);
      }
    }
  };

  /* script */
  const __vue_script__$q = script$q;

  /* template */
  var __vue_render__$n = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("label", { class: _vm.labelClasses }, [_vm._t("default")], 2)
  };
  var __vue_staticRenderFns__$n = [];
  __vue_render__$n._withStripped = true;

    /* style */
    const __vue_inject_styles__$q = undefined;
    /* scoped */
    const __vue_scope_id__$q = undefined;
    /* module identifier */
    const __vue_module_identifier__$q = undefined;
    /* functional template */
    const __vue_is_functional_template__$q = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcFloatingLabel = normalizeComponent_1(
      { render: __vue_render__$n, staticRenderFns: __vue_staticRenderFns__$n },
      __vue_inject_styles__$q,
      __vue_script__$q,
      __vue_scope_id__$q,
      __vue_is_functional_template__$q,
      __vue_module_identifier__$q,
      undefined,
      undefined
    );

  var VueMDCFloatingLabel = BasePlugin({
    mdcFloatingLabel: mdcFloatingLabel
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$9 = {
    TILES_SELECTOR: '.mdc-grid-list__tiles',
    TILE_SELECTOR: '.mdc-grid-tile'
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCGridListFoundation =
  /** @class */
  function (_super) {
    __extends(MDCGridListFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */


    function MDCGridListFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCGridListFoundation.defaultAdapter, adapter)) || this;

      _this.resizeFrame_ = 0;
      _this.resizeHandler_ = _this.alignCenter.bind(_this);
      return _this;
    }

    Object.defineProperty(MDCGridListFoundation, "strings", {
      get: function get() {
        return strings$9;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCGridListFoundation, "defaultAdapter", {
      get: function get() {
        return {
          deregisterResizeHandler: function deregisterResizeHandler() {
            return undefined;
          },
          getNumberOfTiles: function getNumberOfTiles() {
            return 0;
          },
          getOffsetWidth: function getOffsetWidth() {
            return 0;
          },
          getOffsetWidthForTileAtIndex: function getOffsetWidthForTileAtIndex() {
            return 0;
          },
          registerResizeHandler: function registerResizeHandler() {
            return undefined;
          },
          setStyleForTilesElement: function setStyleForTilesElement() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCGridListFoundation.prototype.init = function () {
      this.alignCenter();
      this.adapter_.registerResizeHandler(this.resizeHandler_);
    };

    MDCGridListFoundation.prototype.destroy = function () {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    };

    MDCGridListFoundation.prototype.alignCenter = function () {
      var _this = this;

      if (this.resizeFrame_ !== 0) {
        cancelAnimationFrame(this.resizeFrame_);
      }

      this.resizeFrame_ = requestAnimationFrame(function () {
        _this.alignCenter_();

        _this.resizeFrame_ = 0;
      });
    };

    MDCGridListFoundation.prototype.alignCenter_ = function () {
      if (this.adapter_.getNumberOfTiles() === 0) {
        return;
      }

      var gridWidth = this.adapter_.getOffsetWidth();
      var itemWidth = this.adapter_.getOffsetWidthForTileAtIndex(0);
      var tilesWidth = itemWidth * Math.floor(gridWidth / itemWidth);
      this.adapter_.setStyleForTilesElement('width', tilesWidth + "px");
    };

    return MDCGridListFoundation;
  }(MDCFoundation);

  //
  var script$r = {
    name: 'mdc-grid-list',
    props: {
      width: [String, Number],
      ratio: String,
      'narrow-gutter': Boolean,
      'header-caption': Boolean,
      'icon-align-start': Boolean,
      'icon-align-end': Boolean,
      'with-support-text': Boolean,
      interactive: Boolean
    },
    provide: function provide() {
      return {
        mdcGrid: this
      };
    },
    computed: {
      classes: function classes() {
        var classes = {};
        classes['mdc-grid-list--tile-gutter-1'] = this.narrowGutter;
        classes['mdc-grid-list--header-caption'] = this.headerCaption;
        classes["mdc-grid-list--tile-aspect-".concat(this.ratio)] = this.ratio;
        classes['mdc-grid-list--with-icon-align-start'] = this.iconAlignStart;
        classes['mdc-grid-list--with-icon-align-end'] = this.iconAlignEnd;
        classes['mdc-grid-list--twoline-caption'] = this.withSupportText;
        classes['mdc-grid-list--non-interactive'] = !this.interactive;
        return classes;
      },
      styles: function styles() {
        var defaultWidth = 200;
        return {
          '--mdc-grid-list-tile-width': "".concat(this.width || defaultWidth, "px")
        };
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCGridListFoundation({
        getOffsetWidth: function getOffsetWidth() {
          return _this.$el.offsetWidth;
        },
        getNumberOfTiles: function getNumberOfTiles() {
          return _this.$el.querySelectorAll(MDCGridListFoundation.strings.TILE_SELECTOR).length;
        },
        getOffsetWidthForTileAtIndex: function getOffsetWidthForTileAtIndex(index) {
          return _this.$el.querySelectorAll(MDCGridListFoundation.strings.TILE_SELECTOR)[index].offsetWidth;
        },
        setStyleForTilesElement: function setStyleForTilesElement(property, value) {
          _this.$el.querySelector(MDCGridListFoundation.strings.TILES_SELECTOR).style[property] = value;
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          window.removeEventListener('resize', handler);
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$r = script$r;

  /* template */
  var __vue_render__$o = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mdc-grid-list" }, [
      _c(
        "ul",
        {
          staticClass: "mdc-grid-list__tiles",
          class: _vm.classes,
          style: _vm.styles
        },
        [_vm._t("default")],
        2
      )
    ])
  };
  var __vue_staticRenderFns__$o = [];
  __vue_render__$o._withStripped = true;

    /* style */
    const __vue_inject_styles__$r = undefined;
    /* scoped */
    const __vue_scope_id__$r = undefined;
    /* module identifier */
    const __vue_module_identifier__$r = undefined;
    /* functional template */
    const __vue_is_functional_template__$r = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcGridList = normalizeComponent_1(
      { render: __vue_render__$o, staticRenderFns: __vue_staticRenderFns__$o },
      __vue_inject_styles__$r,
      __vue_script__$r,
      __vue_scope_id__$r,
      __vue_is_functional_template__$r,
      __vue_module_identifier__$r,
      undefined,
      undefined
    );

  //
  var script$s = {
    name: 'mdc-grid-tile',
    inject: ['mdcGrid'],
    mixins: [DispatchEventMixin],
    props: {
      src: String,
      cover: Boolean,
      icon: String,
      title: String,
      'support-text': String,
      selected: Boolean,
      activated: Boolean
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    computed: {
      clickListener: function clickListener() {
        var _this = this;

        return {
          click: function click(e) {
            return _this.dispatchEvent(e);
          }
        };
      },
      itemClasses: function itemClasses() {
        return {
          'mdc-grid-tile--selected': this.selected,
          'mdc-grid-tile--activated': this.activated
        };
      },
      isInteractive: function isInteractive() {
        return this.mdcGrid && this.mdcGrid.interactive;
      },
      hasStartDetail: function hasStartDetail() {
        return this.startIcon || this.$slots['start-detail'];
      },
      hasEndDetail: function hasEndDetail() {
        return this.endIcon || this.$slots['end-detail'];
      }
    },
    watch: {
      isInteractive: function isInteractive(value) {
        if (value) {
          this.addRipple();
        } else {
          this.removeRipple();
        }
      }
    },
    mounted: function mounted() {
      this.isInteractive && this.addRipple();
    },
    beforeDestroy: function beforeDestroy() {
      this.removeRipple();
    },
    methods: {
      addRipple: function addRipple() {
        if (!this.ripple) {
          var ripple = new RippleBase(this);
          ripple.init();
          this.ripple = ripple;
        }
      },
      removeRipple: function removeRipple() {
        if (this.ripple) {
          var ripple = this.ripple;
          this.ripple = null;
          ripple.destroy();
        }
      }
    }
  };

  /* script */
  const __vue_script__$s = script$s;

  /* template */
  var __vue_render__$p = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "li",
      _vm._g(
        {
          staticClass: "mdc-grid-tile",
          class: [_vm.classes, _vm.itemClasses],
          style: _vm.styles,
          attrs: { tabindex: _vm.isInteractive ? "0" : undefined }
        },
        _vm.isInteractive ? _vm.listeners : _vm.clickListener
      ),
      [
        _vm.cover
          ? _c("div", { staticClass: "mdc-grid-tile__primary" }, [
              _c("div", {
                staticClass: "mdc-grid-tile__primary-content",
                style: { backgroundImage: "url(" + _vm.src + ")" }
              })
            ])
          : _c("div", { staticClass: "mdc-grid-tile__primary" }, [
              _c("img", {
                staticClass: "mdc-grid-tile__primary-content",
                attrs: { src: _vm.src }
              })
            ]),
        _vm._v(" "),
        _vm.title || _vm.supportText
          ? _c("span", { staticClass: "mdc-grid-tile__secondary" }, [
              _vm.icon
                ? _c("i", { staticClass: "mdc-grid-tile__icon material-icons" }, [
                    _vm._v(_vm._s(_vm.icon))
                  ])
                : _vm._e(),
              _vm._v(" "),
              _vm.title
                ? _c("span", { staticClass: "mdc-grid-tile__title" }, [
                    _vm._v(_vm._s(_vm.title))
                  ])
                : _vm._e(),
              _vm._v(" "),
              _vm.supportText
                ? _c("span", { staticClass: "mdc-grid-tile__support-text" }, [
                    _vm._v(_vm._s(_vm.supportText))
                  ])
                : _vm._e()
            ])
          : _vm._e()
      ]
    )
  };
  var __vue_staticRenderFns__$p = [];
  __vue_render__$p._withStripped = true;

    /* style */
    const __vue_inject_styles__$s = undefined;
    /* scoped */
    const __vue_scope_id__$s = undefined;
    /* module identifier */
    const __vue_module_identifier__$s = undefined;
    /* functional template */
    const __vue_is_functional_template__$s = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcGridTile = normalizeComponent_1(
      { render: __vue_render__$p, staticRenderFns: __vue_staticRenderFns__$p },
      __vue_inject_styles__$s,
      __vue_script__$s,
      __vue_scope_id__$s,
      __vue_is_functional_template__$s,
      __vue_module_identifier__$s,
      undefined,
      undefined
    );

  var VueMDCGridList = BasePlugin({
    mdcGridList: mdcGridList,
    mdcGridTile: mdcGridTile
  });

  //
  //
  //
  //
  //
  //
  //
  //
  var script$t = {
    name: 'mdc-icon',
    props: {
      icon: String
    }
  };

  /* script */
  const __vue_script__$t = script$t;

  /* template */
  var __vue_render__$q = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "span",
      {
        staticClass: "mdc-icon mdc-icon--material",
        class: { "material-icons": !!_vm.icon }
      },
      [_vm._t("default", [_vm._v(_vm._s(_vm.icon))])],
      2
    )
  };
  var __vue_staticRenderFns__$q = [];
  __vue_render__$q._withStripped = true;

    /* style */
    const __vue_inject_styles__$t = undefined;
    /* scoped */
    const __vue_scope_id__$t = undefined;
    /* module identifier */
    const __vue_module_identifier__$t = undefined;
    /* functional template */
    const __vue_is_functional_template__$t = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcIcon = normalizeComponent_1(
      { render: __vue_render__$q, staticRenderFns: __vue_staticRenderFns__$q },
      __vue_inject_styles__$t,
      __vue_script__$t,
      __vue_scope_id__$t,
      __vue_is_functional_template__$t,
      __vue_module_identifier__$t,
      undefined,
      undefined
    );

  var VueMDCIcon = BasePlugin({
    mdcIcon: mdcIcon
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$a = {
    ICON_BUTTON_ON: 'mdc-icon-button--on',
    ROOT: 'mdc-icon-button'
  };
  var strings$a = {
    ARIA_PRESSED: 'aria-pressed',
    CHANGE_EVENT: 'MDCIconButtonToggle:change'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCIconButtonToggleFoundation =
  /** @class */
  function (_super) {
    __extends(MDCIconButtonToggleFoundation, _super);

    function MDCIconButtonToggleFoundation(adapter) {
      return _super.call(this, _assign({}, MDCIconButtonToggleFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCIconButtonToggleFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$a;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCIconButtonToggleFoundation, "strings", {
      get: function get() {
        return strings$a;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCIconButtonToggleFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          notifyChange: function notifyChange() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          setAttr: function setAttr() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCIconButtonToggleFoundation.prototype.init = function () {
      this.adapter_.setAttr(strings$a.ARIA_PRESSED, "" + this.isOn());
    };

    MDCIconButtonToggleFoundation.prototype.handleClick = function () {
      this.toggle();
      this.adapter_.notifyChange({
        isOn: this.isOn()
      });
    };

    MDCIconButtonToggleFoundation.prototype.isOn = function () {
      return this.adapter_.hasClass(cssClasses$a.ICON_BUTTON_ON);
    };

    MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {
      if (isOn === void 0) {
        isOn = !this.isOn();
      }

      if (isOn) {
        this.adapter_.addClass(cssClasses$a.ICON_BUTTON_ON);
      } else {
        this.adapter_.removeClass(cssClasses$a.ICON_BUTTON_ON);
      }

      this.adapter_.setAttr(strings$a.ARIA_PRESSED, "" + isOn);
    };

    return MDCIconButtonToggleFoundation;
  }(MDCFoundation);

  //
  var script$u = {
    name: 'mdc-icon-button',
    model: {
      prop: 'isOn',
      event: 'change'
    },
    props: {
      isOn: Boolean
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    watch: {
      isOn: 'onOn_'
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCIconButtonToggleFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return Boolean(_this.classes[className]);
        },
        setAttr: function setAttr(attrName, attrValue) {
          return _this.$el.setAttribute(attrName, attrValue);
        },
        notifyChange: function notifyChange(evtData) {
          _this.$emit(MDCIconButtonToggleFoundation.strings.CHANGE_EVENT, evtData);

          _this.$emit('change', evtData.isOn);
        }
      });
      this.foundation.init();
      this.ripple = new RippleBase(this, {
        isUnbounded: function isUnbounded() {
          return true;
        }
      });
      this.ripple.init();
      this.foundation.toggle(this.isOn);
    },
    beforeDestroy: function beforeDestroy() {
      this.ripple.destroy();
      this.foundation.destroy();
    },
    methods: {
      onOn_: function onOn_(isOn) {
        if (this.isOn !== isOn) {
          this.foundation.toggle(isOn);
        }
      },
      onClick: function onClick(evt) {
        this.foundation.handleClick(evt);
      }
    },
    computed: {
      isLink: function isLink() {
        return this.$el && Boolean(this.$el.getAttribute('href'));
      }
    }
  };

  /* script */
  const __vue_script__$u = script$u;

  /* template */
  var __vue_render__$r = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.isLink
      ? _c(
          "a",
          _vm._b(
            {
              staticClass: "mdc-icon-button material-icons",
              class: _vm.classes,
              style: _vm.styles,
              attrs: { "aria-pressed": "false" },
              on: { click: _vm.onClick }
            },
            "a",
            _vm.$attrs,
            false
          ),
          [_vm._t("default")],
          2
        )
      : _c(
          "button",
          _vm._b(
            {
              staticClass: "mdc-icon-button material-icons",
              class: _vm.classes,
              style: _vm.styles,
              attrs: { "aria-pressed": "false" },
              on: { click: _vm.onClick }
            },
            "button",
            _vm.$attrs,
            false
          ),
          [_vm._t("default")],
          2
        )
  };
  var __vue_staticRenderFns__$r = [];
  __vue_render__$r._withStripped = true;

    /* style */
    const __vue_inject_styles__$u = undefined;
    /* scoped */
    const __vue_scope_id__$u = undefined;
    /* module identifier */
    const __vue_module_identifier__$u = undefined;
    /* functional template */
    const __vue_is_functional_template__$u = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcIconButton = normalizeComponent_1(
      { render: __vue_render__$r, staticRenderFns: __vue_staticRenderFns__$r },
      __vue_inject_styles__$u,
      __vue_script__$u,
      __vue_scope_id__$u,
      __vue_is_functional_template__$u,
      __vue_module_identifier__$u,
      undefined,
      undefined
    );

  //
  //
  //
  //
  var script$v = {
    name: 'mdc-icon-toggle',
    props: {
      isOn: Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-icon-button__icon': true,
          'mdc-icon-button__icon--on': this.isOn
        }
      };
    },
    mounted: function mounted() {},
    beforeDestroy: function beforeDestroy() {},
    methods: {},
    computed: {}
  };

  /* script */
  const __vue_script__$v = script$v;

  /* template */
  var __vue_render__$s = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { class: _vm.classes }, [_vm._t("default")], 2)
  };
  var __vue_staticRenderFns__$s = [];
  __vue_render__$s._withStripped = true;

    /* style */
    const __vue_inject_styles__$v = undefined;
    /* scoped */
    const __vue_scope_id__$v = undefined;
    /* module identifier */
    const __vue_module_identifier__$v = undefined;
    /* functional template */
    const __vue_is_functional_template__$v = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcIconToggle = normalizeComponent_1(
      { render: __vue_render__$s, staticRenderFns: __vue_staticRenderFns__$s },
      __vue_inject_styles__$v,
      __vue_script__$v,
      __vue_scope_id__$v,
      __vue_is_functional_template__$v,
      __vue_module_identifier__$v,
      undefined,
      undefined
    );

  var VueMDCIconButton = BasePlugin({
    mdcIconButton: mdcIconButton,
    mdcIconToggle: mdcIconToggle
  });

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  var script$w = {
    name: 'mdc-layout-app'
  };

  /* script */
  const __vue_script__$w = script$w;

  /* template */
  var __vue_render__$t = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mdc-layout-app" }, [
      _c(
        "div",
        { staticClass: "mdc-layout-app--topappbar-wrapper" },
        [_vm._t("topappbar")],
        2
      ),
      _vm._v(" "),
      _c("div", { staticClass: "mdc-layout-app--main-container" }, [
        _c(
          "div",
          { staticClass: "mdc-layout-app--drawer-wrapper" },
          [_vm._t("drawer")],
          2
        ),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "mdc-layout-app--content-wrapper" },
          [_vm._t("default")],
          2
        )
      ])
    ])
  };
  var __vue_staticRenderFns__$t = [];
  __vue_render__$t._withStripped = true;

    /* style */
    const __vue_inject_styles__$w = undefined;
    /* scoped */
    const __vue_scope_id__$w = undefined;
    /* module identifier */
    const __vue_module_identifier__$w = undefined;
    /* functional template */
    const __vue_is_functional_template__$w = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcLayoutApp = normalizeComponent_1(
      { render: __vue_render__$t, staticRenderFns: __vue_staticRenderFns__$t },
      __vue_inject_styles__$w,
      __vue_script__$w,
      __vue_scope_id__$w,
      __vue_is_functional_template__$w,
      __vue_module_identifier__$w,
      undefined,
      undefined
    );

  var VueMDCLayoutApp = BasePlugin({
    mdcLayoutApp: mdcLayoutApp
  });

  //
  //
  //
  //
  //
  //
  //
  //
  var script$x = {
    name: 'mdc-layout-grid',
    props: {
      'fixed-column-width': Boolean,
      'align-left': Boolean,
      'align-right': Boolean
    },
    computed: {
      classes: function classes() {
        return {
          'mdc-layout-grid': true,
          'mdc-layout-grid--fixed-column-width': this.fixedColumnWidth,
          'mdc-layout-grid--align-left': this.alignLeft,
          'mdc-layout-grid--align-right': this.alignRight
        };
      }
    }
  };

  /* script */
  const __vue_script__$x = script$x;

  /* template */
  var __vue_render__$u = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { class: _vm.classes }, [
      _c("div", { staticClass: "mdc-layout-grid__inner" }, [_vm._t("default")], 2)
    ])
  };
  var __vue_staticRenderFns__$u = [];
  __vue_render__$u._withStripped = true;

    /* style */
    const __vue_inject_styles__$x = undefined;
    /* scoped */
    const __vue_scope_id__$x = undefined;
    /* module identifier */
    const __vue_module_identifier__$x = undefined;
    /* functional template */
    const __vue_is_functional_template__$x = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcLayoutGrid = normalizeComponent_1(
      { render: __vue_render__$u, staticRenderFns: __vue_staticRenderFns__$u },
      __vue_inject_styles__$x,
      __vue_script__$x,
      __vue_scope_id__$x,
      __vue_is_functional_template__$x,
      __vue_module_identifier__$x,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  var spanOptions = {
    type: [String, Number],
    default: null,
    validator: function validator(value) {
      var num = Number(value);
      return isFinite(num) && num <= 12 && num > 0;
    }
  };
  var script$y = {
    name: 'mdc-layout-cell',
    props: {
      span: spanOptions,
      order: spanOptions,
      phone: spanOptions,
      tablet: spanOptions,
      desktop: spanOptions,
      align: {
        type: String,
        validator: function validator(value) {
          return ['top', 'bottom', 'middle'].indexOf(value) !== -1;
        }
      }
    },
    computed: {
      classes: function classes() {
        var classes = [];

        if (this.span) {
          classes.push("mdc-layout-grid__cell--span-".concat(this.span));
        }

        if (this.order) {
          classes.push("mdc-layout-grid__cell--order-".concat(this.order));
        }

        if (this.phone) {
          classes.push("mdc-layout-grid__cell--span-".concat(this.phone, "-phone"));
        }

        if (this.tablet) {
          classes.push("mdc-layout-grid__cell--span-".concat(this.tablet, "-tablet"));
        }

        if (this.desktop) {
          classes.push("mdc-layout-grid__cell--span-".concat(this.desktop, "-desktop"));
        }

        if (this.align) {
          classes.push("mdc-layout-grid__cell--align-".concat(this.align));
        }

        return classes;
      }
    }
  };

  /* script */
  const __vue_script__$y = script$y;

  /* template */
  var __vue_render__$v = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mdc-layout-cell mdc-layout-grid__cell",
        class: _vm.classes
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$v = [];
  __vue_render__$v._withStripped = true;

    /* style */
    const __vue_inject_styles__$y = undefined;
    /* scoped */
    const __vue_scope_id__$y = undefined;
    /* module identifier */
    const __vue_module_identifier__$y = undefined;
    /* functional template */
    const __vue_is_functional_template__$y = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcLayoutCell = normalizeComponent_1(
      { render: __vue_render__$v, staticRenderFns: __vue_staticRenderFns__$v },
      __vue_inject_styles__$y,
      __vue_script__$y,
      __vue_scope_id__$y,
      __vue_is_functional_template__$y,
      __vue_module_identifier__$y,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$z = {
    name: 'mdc-layout-inner-grid'
  };

  /* script */
  const __vue_script__$z = script$z;

  /* template */
  var __vue_render__$w = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-layout-inner-grid mdc-layout-grid__inner" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$w = [];
  __vue_render__$w._withStripped = true;

    /* style */
    const __vue_inject_styles__$z = undefined;
    /* scoped */
    const __vue_scope_id__$z = undefined;
    /* module identifier */
    const __vue_module_identifier__$z = undefined;
    /* functional template */
    const __vue_is_functional_template__$z = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcLayoutInnerGrid = normalizeComponent_1(
      { render: __vue_render__$w, staticRenderFns: __vue_staticRenderFns__$w },
      __vue_inject_styles__$z,
      __vue_script__$z,
      __vue_scope_id__$z,
      __vue_is_functional_template__$z,
      __vue_module_identifier__$z,
      undefined,
      undefined
    );

  var VueMDCLayoutGrid = BasePlugin({
    mdcLayoutGrid: mdcLayoutGrid,
    mdcLayoutCell: mdcLayoutCell,
    mdcLayoutInnerGrid: mdcLayoutInnerGrid
  });

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$b = {
    CLOSED_CLASS: 'mdc-linear-progress--closed',
    INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',
    REVERSED_CLASS: 'mdc-linear-progress--reversed'
  };
  var strings$b = {
    BUFFER_SELECTOR: '.mdc-linear-progress__buffer',
    PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar'
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCLinearProgressFoundation =
  /** @class */
  function (_super) {
    __extends(MDCLinearProgressFoundation, _super);

    function MDCLinearProgressFoundation(adapter) {
      return _super.call(this, _assign({}, MDCLinearProgressFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCLinearProgressFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$b;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCLinearProgressFoundation, "strings", {
      get: function get() {
        return strings$b;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCLinearProgressFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          getBuffer: function getBuffer() {
            return null;
          },
          getPrimaryBar: function getPrimaryBar() {
            return null;
          },
          hasClass: function hasClass() {
            return false;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          setStyle: function setStyle() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCLinearProgressFoundation.prototype.init = function () {
      this.isDeterminate_ = !this.adapter_.hasClass(cssClasses$b.INDETERMINATE_CLASS);
      this.isReversed_ = this.adapter_.hasClass(cssClasses$b.REVERSED_CLASS);
      this.progress_ = 0;
    };

    MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {
      this.isDeterminate_ = isDeterminate;

      if (this.isDeterminate_) {
        this.adapter_.removeClass(cssClasses$b.INDETERMINATE_CLASS);
        this.setScale_(this.adapter_.getPrimaryBar(), this.progress_);
      } else {
        this.adapter_.addClass(cssClasses$b.INDETERMINATE_CLASS);
        this.setScale_(this.adapter_.getPrimaryBar(), 1);
        this.setScale_(this.adapter_.getBuffer(), 1);
      }
    };

    MDCLinearProgressFoundation.prototype.setProgress = function (value) {
      this.progress_ = value;

      if (this.isDeterminate_) {
        this.setScale_(this.adapter_.getPrimaryBar(), value);
      }
    };

    MDCLinearProgressFoundation.prototype.setBuffer = function (value) {
      if (this.isDeterminate_) {
        this.setScale_(this.adapter_.getBuffer(), value);
      }
    };

    MDCLinearProgressFoundation.prototype.setReverse = function (isReversed) {
      this.isReversed_ = isReversed;

      if (this.isReversed_) {
        this.adapter_.addClass(cssClasses$b.REVERSED_CLASS);
      } else {
        this.adapter_.removeClass(cssClasses$b.REVERSED_CLASS);
      }
    };

    MDCLinearProgressFoundation.prototype.open = function () {
      this.adapter_.removeClass(cssClasses$b.CLOSED_CLASS);
    };

    MDCLinearProgressFoundation.prototype.close = function () {
      this.adapter_.addClass(cssClasses$b.CLOSED_CLASS);
    };

    MDCLinearProgressFoundation.prototype.setScale_ = function (el, scaleValue) {
      if (!el) {
        return;
      }

      var value = "scaleX(" + scaleValue + ")";
      this.adapter_.setStyle(el, getCorrectPropertyName(window, 'transform'), value);
    };

    return MDCLinearProgressFoundation;
  }(MDCFoundation);

  //
  var ProgressPropType = {
    type: [Number, String],
    validator: function validator(value) {
      return Number(value) >= 0 && Number(value) <= 1;
    }
  };
  var script$A = {
    name: 'mdc-linear-progress',
    props: {
      open: {
        type: Boolean,
        default: true
      },
      indeterminate: Boolean,
      reverse: Boolean,
      accent: Boolean,
      progress: ProgressPropType,
      buffer: ProgressPropType
    },
    data: function data() {
      return {
        classes: {
          'mdc-linear-progress--accent': this.accent
        },
        styles: {}
      };
    },
    watch: {
      open: function open() {
        if (this.open) {
          this.foundation.open();
        } else {
          this.foundation.close();
        }
      },
      progress: function progress() {
        this.foundation.setProgress(Number(this.progress));
      },
      buffer: function buffer() {
        this.foundation.setBuffer(Number(this.buffer));
      },
      indeterminate: function indeterminate() {
        this.foundation.setDeterminate(!this.indeterminate);
      },
      reverse: function reverse() {
        this.foundation.setReverse(this.reverse);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCLinearProgressFoundation({
        addClass: function addClass(className) {
          _this.$set(_this.classes, className, true);
        },
        getPrimaryBar: function getPrimaryBar()
        /* el: Element */
        {
          return _this.$refs.primary;
        },
        getBuffer: function getBuffer()
        /* el: Element */
        {
          return _this.$refs.buffer;
        },
        hasClass: function hasClass(className) {
          _this.$el.classList.contains(className);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.classes, className);
        },
        setStyle: function setStyle(el, styleProperty, value) {
          el.style[styleProperty] = value;
        }
      });
      this.foundation.init();
      this.foundation.setReverse(this.reverse);
      this.foundation.setProgress(Number(this.progress));
      this.foundation.setBuffer(Number(this.buffer));
      this.foundation.setDeterminate(!this.indeterminate);

      if (this.open) {
        this.foundation.open();
      } else {
        this.foundation.close();
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$A = script$A;

  /* template */
  var __vue_render__$x = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mdc-linear-progress",
        class: _vm.classes,
        style: _vm.styles,
        attrs: { role: "progressbar" }
      },
      [
        _c("div", { staticClass: "mdc-linear-progress__buffering-dots" }),
        _vm._v(" "),
        _c("div", { ref: "buffer", staticClass: "mdc-linear-progress__buffer" }),
        _vm._v(" "),
        _c(
          "div",
          {
            ref: "primary",
            staticClass:
              "mdc-linear-progress__bar mdc-linear-progress__primary-bar"
          },
          [_c("span", { staticClass: "mdc-linear-progress__bar-inner" })]
        ),
        _vm._v(" "),
        _vm._m(0)
      ]
    )
  };
  var __vue_staticRenderFns__$x = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        {
          staticClass:
            "mdc-linear-progress__bar mdc-linear-progress__secondary-bar"
        },
        [_c("span", { staticClass: "mdc-linear-progress__bar-inner" })]
      )
    }
  ];
  __vue_render__$x._withStripped = true;

    /* style */
    const __vue_inject_styles__$A = undefined;
    /* scoped */
    const __vue_scope_id__$A = undefined;
    /* module identifier */
    const __vue_module_identifier__$A = undefined;
    /* functional template */
    const __vue_is_functional_template__$A = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcLinearProgress = normalizeComponent_1(
      { render: __vue_render__$x, staticRenderFns: __vue_staticRenderFns__$x },
      __vue_inject_styles__$A,
      __vue_script__$A,
      __vue_scope_id__$A,
      __vue_is_functional_template__$A,
      __vue_module_identifier__$A,
      undefined,
      undefined
    );

  var VueMDCLinearProgress = BasePlugin({
    mdcLinearProgress: mdcLinearProgress
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$c = {
    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCLineRippleFoundation =
  /** @class */
  function (_super) {
    __extends(MDCLineRippleFoundation, _super);

    function MDCLineRippleFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCLineRippleFoundation.defaultAdapter, adapter)) || this;

      _this.transitionEndHandler_ = function (evt) {
        return _this.handleTransitionEnd(evt);
      };

      return _this;
    }

    Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$c;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
      /**
       * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          setStyle: function setStyle() {
            return undefined;
          },
          registerEventHandler: function registerEventHandler() {
            return undefined;
          },
          deregisterEventHandler: function deregisterEventHandler() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCLineRippleFoundation.prototype.init = function () {
      this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);
    };

    MDCLineRippleFoundation.prototype.destroy = function () {
      this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);
    };

    MDCLineRippleFoundation.prototype.activate = function () {
      this.adapter_.removeClass(cssClasses$c.LINE_RIPPLE_DEACTIVATING);
      this.adapter_.addClass(cssClasses$c.LINE_RIPPLE_ACTIVE);
    };

    MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
      this.adapter_.setStyle('transform-origin', xCoordinate + "px center");
    };

    MDCLineRippleFoundation.prototype.deactivate = function () {
      this.adapter_.addClass(cssClasses$c.LINE_RIPPLE_DEACTIVATING);
    };

    MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
      // Wait for the line ripple to be either transparent or opaque
      // before emitting the animation end event
      var isDeactivating = this.adapter_.hasClass(cssClasses$c.LINE_RIPPLE_DEACTIVATING);

      if (evt.propertyName === 'opacity') {
        if (isDeactivating) {
          this.adapter_.removeClass(cssClasses$c.LINE_RIPPLE_ACTIVE);
          this.adapter_.removeClass(cssClasses$c.LINE_RIPPLE_DEACTIVATING);
        }
      }
    };

    return MDCLineRippleFoundation;
  }(MDCFoundation);

  var script$B = {
    name: 'mdc-line-ripple',
    props: {
      rippleCenter: {
        type: [Number, String],
        default: 0
      },
      active: Boolean
    },
    data: function data() {
      return {
        lineClasses: {},
        lineStyles: {}
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCLineRippleFoundation(_extends({
        addClass: function addClass(className) {
          _this.$set(_this.lineClasses, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.lineClasses, className);
        },
        hasClass: function hasClass(className) {
          return Boolean(_this.lineClasses[className]);
        },
        setStyle: function setStyle(name, value) {
          _this.$set(_this.lineStyles, name, value);
        },
        registerEventHandler: function registerEventHandler(evtType, handler) {
          _this.$el.addEventListener(evtType, handler);
        },
        deregisterEventHandler: function deregisterEventHandler(evtType, handler) {
          _this.$el.removeEventListener(evtType, handler);
        }
      }));
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      var foundation = this.foundation;
      this.foundation = null;
      foundation.destroy();
    },
    methods: {
      setRippleCenter: function setRippleCenter(xCoordinate) {
        this.foundation.setRippleCenter(xCoordinate);
      },
      activate: function activate() {
        this.foundation.activate();
      },
      deactivate: function deactivate() {
        this.foundation.deactivate();
      }
    }
  };

  /* script */
  const __vue_script__$B = script$B;

  /* template */
  var __vue_render__$y = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", {
      staticClass: "mdc-line-ripple",
      class: _vm.lineClasses,
      style: _vm.lineStyles
    })
  };
  var __vue_staticRenderFns__$y = [];
  __vue_render__$y._withStripped = true;

    /* style */
    const __vue_inject_styles__$B = undefined;
    /* scoped */
    const __vue_scope_id__$B = undefined;
    /* module identifier */
    const __vue_module_identifier__$B = undefined;
    /* functional template */
    const __vue_is_functional_template__$B = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcLineRipple = normalizeComponent_1(
      { render: __vue_render__$y, staticRenderFns: __vue_staticRenderFns__$y },
      __vue_inject_styles__$B,
      __vue_script__$B,
      __vue_scope_id__$B,
      __vue_is_functional_template__$B,
      __vue_module_identifier__$B,
      undefined,
      undefined
    );

  var VueMDCLineRipple = BasePlugin({
    mdcLineRipple: mdcLineRipple
  });

  //
  var script$C = {
    name: 'mdc-list',
    props: {
      dense: Boolean,
      avatarList: Boolean,
      twoLine: Boolean,
      bordered: Boolean,
      interactive: {
        type: Boolean,
        default: true
      },
      singleSelection: Boolean,
      vertical: {
        type: Boolean,
        default: true
      }
    },
    provide: function provide() {
      return {
        mdcList: this
      };
    },
    computed: {
      classes: function classes() {
        return {
          'mdc-list--dense': this.dense,
          'mdc-list--avatar-list': this.avatarList,
          'mdc-list--two-line': this.twoLine,
          'mdc-list--bordered': this.bordered,
          'mdc-list--non-interactive': !this.interactive
        };
      },
      orientation: function orientation() {
        return this.vertical ? 'vertical' : 'horizontal';
      },
      listElements: function listElements() {
        return [].slice.call(this.$el.querySelectorAll(MDCListFoundation.strings.ENABLED_ITEMS_SELECTOR));
      }
    },
    methods: {
      handleFocusInEvent: function handleFocusInEvent(evt) {
        var index = this.getListItemIndex(evt);
        this.foundation.handleFocusIn(evt, index);
      },
      handleFocusOutEvent: function handleFocusOutEvent(evt) {
        var index = this.getListItemIndex(evt);
        this.foundation.handleFocusOut(evt, index);
      },
      handleKeydownEvent: function handleKeydownEvent(evt) {
        var index = this.getListItemIndex(evt);

        if (index >= 0) {
          this.foundation.handleKeydown(evt, evt.target.classList.contains(MDCListFoundation.cssClasses.LIST_ITEM_CLASS), index);
        }
      },
      handleClickEvent: function handleClickEvent(evt) {
        var index = this.getListItemIndex(evt); // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.

        var toggleCheckbox = !matches(evt.target, MDCListFoundation.strings.CHECKBOX_RADIO_SELECTOR);
        this.foundation.handleClick(index, toggleCheckbox);
      },
      layout: function layout() {
        [].slice.call(this.$el.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (ele) {
          ele.setAttribute('tabindex', -1);
        }) // Child button/a elements are not tabbable until the list item is focused.
        ;
        [].slice.call(this.$el.querySelectorAll(MDCListFoundation.strings.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (ele) {
          return ele.setAttribute('tabindex', -1);
        });
      },
      initializeListType: function initializeListType() {
        // Automatically set single selection if selected/activated classes are present.
        var preselectedElement = this.$el.querySelector(".".concat(MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS, ", .").concat(MDCListFoundation.cssClasses.LIST_ITEM_SELECTED_CLASS));

        if (preselectedElement) {
          if (preselectedElement.classList.contains(MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {
            this.foundation.setUseActivatedClass(true);
          }

          this.singleSelection = true;
          this.selectedIndex = this.listElements.indexOf(preselectedElement);
        }
      },
      getListItemIndex: function getListItemIndex(evt) {
        var eventTarget = evt.target;
        var index = -1; // Find the first ancestor that is a list item or the list.

        while (!eventTarget.classList.contains(MDCListFoundation.cssClasses.LIST_ITEM_CLASS) && !eventTarget.classList.contains(MDCListFoundation.cssClasses.ROOT)) {
          eventTarget = eventTarget.parentElement;
        } // Get the index of the element if it is a list item.


        if (eventTarget.classList.contains(MDCListFoundation.cssClasses.LIST_ITEM_CLASS)) {
          index = this.listElements.indexOf(eventTarget);
        }

        return index;
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCListFoundation({
        getListItemCount: function getListItemCount() {
          return _this.listElements.length;
        },
        getFocusedElementIndex: function getFocusedElementIndex() {
          return _this.listElements.indexOf(document.activeElement);
        },
        setAttributeForElementIndex: function setAttributeForElementIndex(index, attr, value) {
          var element = _this.listElements[index];

          if (element) {
            element.setAttribute(attr, value);
          }
        },
        removeAttributeForElementIndex: function removeAttributeForElementIndex(index, attr) {
          var element = _this.listElements[index];

          if (element) {
            element.removeAttribute(attr);
          }
        },
        addClassForElementIndex: function addClassForElementIndex(index, className) {
          var element = _this.listElements[index];

          if (element) {
            element.classList.add(className);
          }
        },
        removeClassForElementIndex: function removeClassForElementIndex(index, className) {
          var element = _this.listElements[index];

          if (element) {
            element.classList.remove(className);
          }
        },
        focusItemAtIndex: function focusItemAtIndex(index) {
          var element = _this.listElements[index];

          if (element) {
            element.focus();
          }
        },
        setTabIndexForListItemChildren: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {
          var element = _this.listElements[listItemIndex];
          var listItemChildren = [].slice.call(element.querySelectorAll(MDCListFoundation.strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
          listItemChildren.forEach(function (ele) {
            return ele.setAttribute('tabindex', tabIndexValue);
          });
        },
        followHref: function followHref(index) {
          var listItem = _this.listElements[index];

          if (listItem && listItem.href) {
            listItem.click();
          }
        },
        hasCheckboxAtIndex: function hasCheckboxAtIndex(index) {
          var listItem = _this.listElements[index];
          return !!listItem.querySelector(MDCListFoundation.strings.CHECKBOX_SELECTOR);
        },
        hasRadioAtIndex: function hasRadioAtIndex(index) {
          var listItem = _this.listElements[index];
          return !!listItem.querySelector(MDCListFoundation.strings.RADIO_SELECTOR);
        },
        isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex(index) {
          var listItem = _this.listElements[index];
          var toggleEl = listItem.querySelector(MDCListFoundation.strings.CHECKBOX_SELECTOR);
          return toggleEl.checked;
        },
        setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex(index, isChecked) {
          var listItem = _this.listElements[index];
          var toggleEl = listItem.querySelector(MDCListFoundation.strings.CHECKBOX_RADIO_SELECTOR);
          toggleEl.checked = isChecked;
          var event = document.createEvent('Event');
          event.initEvent('change', true, true);
          toggleEl.dispatchEvent(event);
        },
        notifyAction: function notifyAction(index) {
          emitCustomEvent(_this.$el, MDCListFoundation.strings.ACTION_EVENT, {
            index: index
          },
          /** shouldBubble */
          true);
        },
        isFocusInsideList: function isFocusInsideList() {
          return _this.$el.contains(document.activeElement);
        }
      });
      this.foundation.init();
      this.foundation.setSingleSelection(this.singleSelection);
      this.foundation.setVerticalOrientation(this.vertical);
      this.layout();
    }
  };

  /* script */
  const __vue_script__$C = script$C;

  /* template */
  var __vue_render__$z = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "ul",
      {
        staticClass: "mdc-list",
        class: _vm.classes,
        attrs: { "aria-orientation": _vm.orientation },
        on: {
          click: _vm.handleClickEvent,
          keydown: _vm.handleKeydownEvent,
          focusin: _vm.handleFocusInEvent,
          focusout: _vm.handleFocusOutEvent
        }
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$z = [];
  __vue_render__$z._withStripped = true;

    /* style */
    const __vue_inject_styles__$C = undefined;
    /* scoped */
    const __vue_scope_id__$C = undefined;
    /* module identifier */
    const __vue_module_identifier__$C = undefined;
    /* functional template */
    const __vue_is_functional_template__$C = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcList = normalizeComponent_1(
      { render: __vue_render__$z, staticRenderFns: __vue_staticRenderFns__$z },
      __vue_inject_styles__$C,
      __vue_script__$C,
      __vue_scope_id__$C,
      __vue_is_functional_template__$C,
      __vue_module_identifier__$C,
      undefined,
      undefined
    );

  //
  var script$D = {
    name: 'mdc-list-item',
    inject: ['mdcList'],
    props: {
      selected: Boolean,
      activated: Boolean
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    computed: {
      itemClasses: function itemClasses() {
        return {
          'mdc-list-item--selected': this.selected,
          'mdc-list-item--activated': this.activated
        };
      },
      isInteractive: function isInteractive() {
        return this.mdcList && this.mdcList.interactive;
      },
      hasSecondary: function hasSecondary() {
        return this.$slots['secondary'] && this.mdcList && this.mdcList.twoLine;
      },
      hasEndDetail: function hasEndDetail() {
        return !!this.$slots['end-detail'];
      },
      hasStartDetail: function hasStartDetail() {
        return !!this.$slots['start-detail'];
      }
    },
    watch: {
      isInteractive: function isInteractive(value) {
        if (value) {
          this.addRipple();
        } else {
          this.removeRipple();
        }
      }
    },
    mounted: function mounted() {
      this.isInteractive && this.addRipple();
    },
    beforeDestroy: function beforeDestroy() {
      this.removeRipple();
    },
    methods: {
      addRipple: function addRipple() {
        if (!this.ripple) {
          var ripple = new RippleBase(this);
          ripple.init();
          this.ripple = ripple;
        }
      },
      removeRipple: function removeRipple() {
        if (this.ripple) {
          var ripple = this.ripple;
          this.ripple = null;
          ripple.destroy();
        }
      }
    }
  };

  /* script */
  const __vue_script__$D = script$D;

  /* template */
  var __vue_render__$A = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "li",
      _vm._g(
        {
          staticClass: "mdc-list-item",
          class: [_vm.classes, _vm.itemClasses],
          style: _vm.styles,
          attrs: { tabindex: _vm.isInteractive ? "0" : undefined }
        },
        _vm.isInteractive ? _vm.$listeners : {}
      ),
      [
        _vm._t("start-detail"),
        _vm._v(" "),
        _vm.hasSecondary
          ? _c("span", { staticClass: "mdc-list-item__text" }, [
              _c(
                "span",
                { staticClass: "mdc-list-item__primary-text" },
                [_vm._t("default")],
                2
              ),
              _vm._v(" "),
              _vm.hasSecondary
                ? _c(
                    "span",
                    { staticClass: "mdc-list-item__secondary-text" },
                    [_vm._t("secondary")],
                    2
                  )
                : _vm._e()
            ])
          : _c(
              "span",
              { staticClass: "mdc-list-item__text" },
              [_vm._t("default")],
              2
            ),
        _vm._v(" "),
        _vm._t("end-detail")
      ],
      2
    )
  };
  var __vue_staticRenderFns__$A = [];
  __vue_render__$A._withStripped = true;

    /* style */
    const __vue_inject_styles__$D = undefined;
    /* scoped */
    const __vue_scope_id__$D = undefined;
    /* module identifier */
    const __vue_module_identifier__$D = undefined;
    /* functional template */
    const __vue_is_functional_template__$D = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcListItem = normalizeComponent_1(
      { render: __vue_render__$A, staticRenderFns: __vue_staticRenderFns__$A },
      __vue_inject_styles__$D,
      __vue_script__$D,
      __vue_scope_id__$D,
      __vue_is_functional_template__$D,
      __vue_module_identifier__$D,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  var script$E = {
    name: 'mdc-list-divider',
    props: {
      inset: Boolean,
      padded: Boolean
    },
    computed: {
      classes: function classes() {
        return {
          'mdc-list-divider--inset': this.inset,
          'mdc-list-divider--padded': this.padded
        };
      }
    }
  };

  /* script */
  const __vue_script__$E = script$E;

  /* template */
  var __vue_render__$B = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("li", {
      staticClass: "mdc-list-divider",
      class: _vm.classes,
      attrs: { role: "separator" }
    })
  };
  var __vue_staticRenderFns__$B = [];
  __vue_render__$B._withStripped = true;

    /* style */
    const __vue_inject_styles__$E = undefined;
    /* scoped */
    const __vue_scope_id__$E = undefined;
    /* module identifier */
    const __vue_module_identifier__$E = undefined;
    /* functional template */
    const __vue_is_functional_template__$E = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcListDivider = normalizeComponent_1(
      { render: __vue_render__$B, staticRenderFns: __vue_staticRenderFns__$B },
      __vue_inject_styles__$E,
      __vue_script__$E,
      __vue_scope_id__$E,
      __vue_is_functional_template__$E,
      __vue_module_identifier__$E,
      undefined,
      undefined
    );

  //
  //
  //
  //
  var script$F = {
    name: 'mdc-list-group'
  };

  /* script */
  const __vue_script__$F = script$F;

  /* template */
  var __vue_render__$C = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mdc-list-group" }, [_vm._t("default")], 2)
  };
  var __vue_staticRenderFns__$C = [];
  __vue_render__$C._withStripped = true;

    /* style */
    const __vue_inject_styles__$F = undefined;
    /* scoped */
    const __vue_scope_id__$F = undefined;
    /* module identifier */
    const __vue_module_identifier__$F = undefined;
    /* functional template */
    const __vue_is_functional_template__$F = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcListGroup = normalizeComponent_1(
      { render: __vue_render__$C, staticRenderFns: __vue_staticRenderFns__$C },
      __vue_inject_styles__$F,
      __vue_script__$F,
      __vue_scope_id__$F,
      __vue_is_functional_template__$F,
      __vue_module_identifier__$F,
      undefined,
      undefined
    );

  //
  //
  //
  //
  var script$G = {
    name: 'mdc-list-group-header'
  };

  /* script */
  const __vue_script__$G = script$G;

  /* template */
  var __vue_render__$D = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "h3",
      { staticClass: "mdc-list-group-header mdc-list-group__subheader" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$D = [];
  __vue_render__$D._withStripped = true;

    /* style */
    const __vue_inject_styles__$G = undefined;
    /* scoped */
    const __vue_scope_id__$G = undefined;
    /* module identifier */
    const __vue_module_identifier__$G = undefined;
    /* functional template */
    const __vue_is_functional_template__$G = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcListGroupHeader = normalizeComponent_1(
      { render: __vue_render__$D, staticRenderFns: __vue_staticRenderFns__$D },
      __vue_inject_styles__$G,
      __vue_script__$G,
      __vue_scope_id__$G,
      __vue_is_functional_template__$G,
      __vue_module_identifier__$G,
      undefined,
      undefined
    );

  //
  //
  //
  //
  var script$H = {
    name: 'mdc-list-group-divider'
  };

  /* script */
  const __vue_script__$H = script$H;

  /* template */
  var __vue_render__$E = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("hr", { staticClass: "mdc-list-group-divider mdc-list-divider" })
  };
  var __vue_staticRenderFns__$E = [];
  __vue_render__$E._withStripped = true;

    /* style */
    const __vue_inject_styles__$H = undefined;
    /* scoped */
    const __vue_scope_id__$H = undefined;
    /* module identifier */
    const __vue_module_identifier__$H = undefined;
    /* functional template */
    const __vue_is_functional_template__$H = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcListGroupDivider = normalizeComponent_1(
      { render: __vue_render__$E, staticRenderFns: __vue_staticRenderFns__$E },
      __vue_inject_styles__$H,
      __vue_script__$H,
      __vue_scope_id__$H,
      __vue_is_functional_template__$H,
      __vue_module_identifier__$H,
      undefined,
      undefined
    );

  var VueMDCList = BasePlugin({
    mdcList: mdcList,
    mdcListItem: mdcListItem,
    mdcListDivider: mdcListDivider,
    mdcListGroup: mdcListGroup,
    mdcListGroupHeader: mdcListGroupHeader,
    mdcListGroupDivider: mdcListGroupDivider
  });

  //
  var script$I = {
    name: 'mdc-material-icon',
    // model: {
    //   prop: 'isOn',
    //   event: 'change'
    // },
    props: {
      hasRipple: Boolean,
      icon: String
    },
    data: function data() {
      return {
        classes: {
          'material-icons': true,
          'material-icons--ripple-surface': this.hasRipple
        },
        styles: {}
      };
    },
    mounted: function mounted() {
      if (this.hasRipple) {
        this.ripple = new RippleBase(this, {
          isUnbounded: function isUnbounded() {
            return true;
          }
        });
        this.ripple.init();
      }
    },
    beforeDestroy: function beforeDestroy() {
      if (this.ripple) {
        this.ripple.destroy();
      }
    },
    methods: {},
    computed: {}
  };

  /* script */
  const __vue_script__$I = script$I;

  /* template */
  var __vue_render__$F = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "i",
      _vm._g({ class: _vm.classes, style: _vm.styles }, _vm.$listeners),
      [_vm._v(" " + _vm._s(_vm.icon) + " ")]
    )
  };
  var __vue_staticRenderFns__$F = [];
  __vue_render__$F._withStripped = true;

    /* style */
    const __vue_inject_styles__$I = undefined;
    /* scoped */
    const __vue_scope_id__$I = undefined;
    /* module identifier */
    const __vue_module_identifier__$I = undefined;
    /* functional template */
    const __vue_is_functional_template__$I = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcMaterialIcon = normalizeComponent_1(
      { render: __vue_render__$F, staticRenderFns: __vue_staticRenderFns__$F },
      __vue_inject_styles__$I,
      __vue_script__$I,
      __vue_scope_id__$I,
      __vue_is_functional_template__$I,
      __vue_module_identifier__$I,
      undefined,
      undefined
    );

  var VueMDCMaterialIcon = BasePlugin({
    mdcMaterialIcon: mdcMaterialIcon
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$d = {
    ANCHOR: 'mdc-menu-surface--anchor',
    ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
    ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
    FIXED: 'mdc-menu-surface--fixed',
    OPEN: 'mdc-menu-surface--open',
    ROOT: 'mdc-menu-surface'
  }; // tslint:disable:object-literal-sort-keys

  var strings$c = {
    CLOSED_EVENT: 'MDCMenuSurface:closed',
    OPENED_EVENT: 'MDCMenuSurface:opened',
    FOCUSABLE_ELEMENTS: ['button:not(:disabled)', '[href]:not([aria-disabled="true"])', 'input:not(:disabled)', 'select:not(:disabled)', 'textarea:not(:disabled)', '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(', ')
  }; // tslint:enable:object-literal-sort-keys

  var numbers$3 = {
    /** Total duration of menu-surface open animation. */
    TRANSITION_OPEN_DURATION: 120,

    /** Total duration of menu-surface close animation. */
    TRANSITION_CLOSE_DURATION: 75,

    /** Margin left to the edge of the viewport when menu-surface is at maximum possible height. */
    MARGIN_TO_EDGE: 32,

    /** Ratio of anchor width to menu-surface width for switching from corner positioning to center positioning. */
    ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67
  };
  /**
   * Enum for bits in the {@see Corner) bitmap.
   */

  var CornerBit;

  (function (CornerBit) {
    CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
    CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
    CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
    CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
  })(CornerBit || (CornerBit = {}));
  /**
   * Enum for representing an element corner for positioning the menu-surface.
   *
   * The START constants map to LEFT if element directionality is left
   * to right and RIGHT if the directionality is right to left.
   * Likewise END maps to RIGHT or LEFT depending on the directionality.
   */


  var Corner;

  (function (Corner) {
    Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
    Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
    Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
    Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
    Corner[Corner["TOP_START"] = 8] = "TOP_START";
    Corner[Corner["TOP_END"] = 12] = "TOP_END";
    Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
    Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
  })(Corner || (Corner = {}));

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCMenuSurfaceFoundation =
  /** @class */
  function (_super) {
    __extends(MDCMenuSurfaceFoundation, _super);

    function MDCMenuSurfaceFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCMenuSurfaceFoundation.defaultAdapter, adapter)) || this;

      _this.isOpen_ = false;
      _this.isQuickOpen_ = false;
      _this.isHoistedElement_ = false;
      _this.isFixedPosition_ = false;
      _this.openAnimationEndTimerId_ = 0;
      _this.closeAnimationEndTimerId_ = 0;
      _this.animationRequestId_ = 0;
      _this.anchorCorner_ = Corner.TOP_START;
      _this.anchorMargin_ = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      _this.position_ = {
        x: 0,
        y: 0
      };
      return _this;
    }

    Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$d;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
      get: function get() {
        return strings$c;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
      get: function get() {
        return numbers$3;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
      get: function get() {
        return Corner;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
      /**
       * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          hasAnchor: function hasAnchor() {
            return false;
          },
          isElementInContainer: function isElementInContainer() {
            return false;
          },
          isFocused: function isFocused() {
            return false;
          },
          isFirstElementFocused: function isFirstElementFocused() {
            return false;
          },
          isLastElementFocused: function isLastElementFocused() {
            return false;
          },
          isRtl: function isRtl() {
            return false;
          },
          getInnerDimensions: function getInnerDimensions() {
            return {
              height: 0,
              width: 0
            };
          },
          getAnchorDimensions: function getAnchorDimensions() {
            return null;
          },
          getWindowDimensions: function getWindowDimensions() {
            return {
              height: 0,
              width: 0
            };
          },
          getBodyDimensions: function getBodyDimensions() {
            return {
              height: 0,
              width: 0
            };
          },
          getWindowScroll: function getWindowScroll() {
            return {
              x: 0,
              y: 0
            };
          },
          setPosition: function setPosition() {
            return undefined;
          },
          setMaxHeight: function setMaxHeight() {
            return undefined;
          },
          setTransformOrigin: function setTransformOrigin() {
            return undefined;
          },
          saveFocus: function saveFocus() {
            return undefined;
          },
          restoreFocus: function restoreFocus() {
            return undefined;
          },
          focusFirstElement: function focusFirstElement() {
            return undefined;
          },
          focusLastElement: function focusLastElement() {
            return undefined;
          },
          notifyClose: function notifyClose() {
            return undefined;
          },
          notifyOpen: function notifyOpen() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCMenuSurfaceFoundation.prototype.init = function () {
      var _a = MDCMenuSurfaceFoundation.cssClasses,
          ROOT = _a.ROOT,
          OPEN = _a.OPEN;

      if (!this.adapter_.hasClass(ROOT)) {
        throw new Error(ROOT + " class required in root element.");
      }

      if (this.adapter_.hasClass(OPEN)) {
        this.isOpen_ = true;
      }
    };

    MDCMenuSurfaceFoundation.prototype.destroy = function () {
      clearTimeout(this.openAnimationEndTimerId_);
      clearTimeout(this.closeAnimationEndTimerId_); // Cancel any currently running animations.

      cancelAnimationFrame(this.animationRequestId_);
    };
    /**
     * @param corner Default anchor corner alignment of top-left menu surface corner.
     */


    MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {
      this.anchorCorner_ = corner;
    };
    /**
     * @param margin Set of margin values from anchor.
     */


    MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {
      this.anchorMargin_.top = margin.top || 0;
      this.anchorMargin_.right = margin.right || 0;
      this.anchorMargin_.bottom = margin.bottom || 0;
      this.anchorMargin_.left = margin.left || 0;
    };
    /** Used to indicate if the menu-surface is hoisted to the body. */


    MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {
      this.isHoistedElement_ = isHoisted;
    };
    /** Used to set the menu-surface calculations based on a fixed position menu. */


    MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {
      this.isFixedPosition_ = isFixedPosition;
    };
    /** Sets the menu-surface position on the page. */


    MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {
      this.position_.x = this.isFinite_(x) ? x : 0;
      this.position_.y = this.isFinite_(y) ? y : 0;
    };

    MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {
      this.isQuickOpen_ = quickOpen;
    };

    MDCMenuSurfaceFoundation.prototype.isOpen = function () {
      return this.isOpen_;
    };
    /**
     * Open the menu surface.
     */


    MDCMenuSurfaceFoundation.prototype.open = function () {
      var _this = this;

      this.adapter_.saveFocus();

      if (!this.isQuickOpen_) {
        this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
      }

      this.animationRequestId_ = requestAnimationFrame(function () {
        _this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);

        _this.dimensions_ = _this.adapter_.getInnerDimensions();

        _this.autoPosition_();

        if (_this.isQuickOpen_) {
          _this.adapter_.notifyOpen();
        } else {
          _this.openAnimationEndTimerId_ = setTimeout(function () {
            _this.openAnimationEndTimerId_ = 0;

            _this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);

            _this.adapter_.notifyOpen();
          }, numbers$3.TRANSITION_OPEN_DURATION);
        }
      });
      this.isOpen_ = true;
    };
    /**
     * Closes the menu surface.
     */


    MDCMenuSurfaceFoundation.prototype.close = function () {
      var _this = this;

      if (!this.isQuickOpen_) {
        this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
      }

      requestAnimationFrame(function () {
        _this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);

        if (_this.isQuickOpen_) {
          _this.adapter_.notifyClose();
        } else {
          _this.closeAnimationEndTimerId_ = setTimeout(function () {
            _this.closeAnimationEndTimerId_ = 0;

            _this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);

            _this.adapter_.notifyClose();
          }, numbers$3.TRANSITION_CLOSE_DURATION);
        }
      });
      this.isOpen_ = false;
      this.maybeRestoreFocus_();
    };
    /** Handle clicks and close if not within menu-surface element. */


    MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {
      var el = evt.target;

      if (this.adapter_.isElementInContainer(el)) {
        return;
      }

      this.close();
    };
    /** Handle keys that close the surface. */


    MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {
      var keyCode = evt.keyCode,
          key = evt.key,
          shiftKey = evt.shiftKey;
      var isEscape = key === 'Escape' || keyCode === 27;
      var isTab = key === 'Tab' || keyCode === 9;

      if (isEscape) {
        this.close();
      } else if (isTab) {
        if (this.adapter_.isLastElementFocused() && !shiftKey) {
          this.adapter_.focusFirstElement();
          evt.preventDefault();
        } else if (this.adapter_.isFirstElementFocused() && shiftKey) {
          this.adapter_.focusLastElement();
          evt.preventDefault();
        }
      }
    };

    MDCMenuSurfaceFoundation.prototype.autoPosition_ = function () {
      var _a; // Compute measurements for autoposition methods reuse.


      this.measurements_ = this.getAutoLayoutMeasurements_();
      var corner = this.getOriginCorner_();
      var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight_(corner);
      var verticalAlignment = this.hasBit_(corner, CornerBit.BOTTOM) ? 'bottom' : 'top';
      var horizontalAlignment = this.hasBit_(corner, CornerBit.RIGHT) ? 'right' : 'left';
      var horizontalOffset = this.getHorizontalOriginOffset_(corner);
      var verticalOffset = this.getVerticalOriginOffset_(corner);
      var _b = this.measurements_,
          anchorSize = _b.anchorSize,
          surfaceSize = _b.surfaceSize;
      var position = (_a = {}, _a[horizontalAlignment] = horizontalOffset, _a[verticalAlignment] = verticalOffset, _a); // Center align when anchor width is comparable or greater than menu surface, otherwise keep corner.

      if (anchorSize.width / surfaceSize.width > numbers$3.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
        horizontalAlignment = 'center';
      } // If the menu-surface has been hoisted to the body, it's no longer relative to the anchor element


      if (this.isHoistedElement_ || this.isFixedPosition_) {
        this.adjustPositionForHoistedElement_(position);
      }

      this.adapter_.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
      this.adapter_.setPosition(position);
      this.adapter_.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
    };
    /**
     * @return Measurements used to position menu surface popup.
     */


    MDCMenuSurfaceFoundation.prototype.getAutoLayoutMeasurements_ = function () {
      var anchorRect = this.adapter_.getAnchorDimensions();
      var bodySize = this.adapter_.getBodyDimensions();
      var viewportSize = this.adapter_.getWindowDimensions();
      var windowScroll = this.adapter_.getWindowScroll();

      if (!anchorRect) {
        // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
        anchorRect = {
          top: this.position_.y,
          right: this.position_.x,
          bottom: this.position_.y,
          left: this.position_.x,
          width: 0,
          height: 0
        }; // tslint:enable:object-literal-sort-keys
      }

      return {
        anchorSize: anchorRect,
        bodySize: bodySize,
        surfaceSize: this.dimensions_,
        viewportDistance: {
          // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
          top: anchorRect.top,
          right: viewportSize.width - anchorRect.right,
          bottom: viewportSize.height - anchorRect.bottom,
          left: anchorRect.left
        },
        viewportSize: viewportSize,
        windowScroll: windowScroll
      };
    };
    /**
     * Computes the corner of the anchor from which to animate and position the menu surface.
     */


    MDCMenuSurfaceFoundation.prototype.getOriginCorner_ = function () {
      // Defaults: open from the top left.
      var corner = Corner.TOP_LEFT;
      var _a = this.measurements_,
          viewportDistance = _a.viewportDistance,
          anchorSize = _a.anchorSize,
          surfaceSize = _a.surfaceSize;
      var isBottomAligned = this.hasBit_(this.anchorCorner_, CornerBit.BOTTOM);
      var availableTop = isBottomAligned ? viewportDistance.top + anchorSize.height + this.anchorMargin_.bottom : viewportDistance.top + this.anchorMargin_.top;
      var availableBottom = isBottomAligned ? viewportDistance.bottom - this.anchorMargin_.bottom : viewportDistance.bottom + anchorSize.height - this.anchorMargin_.top;
      var topOverflow = surfaceSize.height - availableTop;
      var bottomOverflow = surfaceSize.height - availableBottom;

      if (bottomOverflow > 0 && topOverflow < bottomOverflow) {
        corner = this.setBit_(corner, CornerBit.BOTTOM);
      }

      var isRtl = this.adapter_.isRtl();
      var isFlipRtl = this.hasBit_(this.anchorCorner_, CornerBit.FLIP_RTL);
      var avoidHorizontalOverlap = this.hasBit_(this.anchorCorner_, CornerBit.RIGHT);
      var isAlignedRight = avoidHorizontalOverlap && !isRtl || !avoidHorizontalOverlap && isFlipRtl && isRtl;
      var availableLeft = isAlignedRight ? viewportDistance.left + anchorSize.width + this.anchorMargin_.right : viewportDistance.left + this.anchorMargin_.left;
      var availableRight = isAlignedRight ? viewportDistance.right - this.anchorMargin_.right : viewportDistance.right + anchorSize.width - this.anchorMargin_.left;
      var leftOverflow = surfaceSize.width - availableLeft;
      var rightOverflow = surfaceSize.width - availableRight;

      if (leftOverflow < 0 && isAlignedRight && isRtl || avoidHorizontalOverlap && !isAlignedRight && leftOverflow < 0 || rightOverflow > 0 && leftOverflow < rightOverflow) {
        corner = this.setBit_(corner, CornerBit.RIGHT);
      }

      return corner;
    };
    /**
     * @param corner Origin corner of the menu surface.
     * @return Maximum height of the menu surface, based on available space. 0 indicates should not be set.
     */


    MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight_ = function (corner) {
      var viewportDistance = this.measurements_.viewportDistance;
      var maxHeight = 0;
      var isBottomAligned = this.hasBit_(corner, CornerBit.BOTTOM);
      var isBottomAnchored = this.hasBit_(this.anchorCorner_, CornerBit.BOTTOM);
      var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE; // When maximum height is not specified, it is handled from CSS.

      if (isBottomAligned) {
        maxHeight = viewportDistance.top + this.anchorMargin_.top - MARGIN_TO_EDGE;

        if (!isBottomAnchored) {
          maxHeight += this.measurements_.anchorSize.height;
        }
      } else {
        maxHeight = viewportDistance.bottom - this.anchorMargin_.bottom + this.measurements_.anchorSize.height - MARGIN_TO_EDGE;

        if (isBottomAnchored) {
          maxHeight -= this.measurements_.anchorSize.height;
        }
      }

      return maxHeight;
    };
    /**
     * @param corner Origin corner of the menu surface.
     * @return Horizontal offset of menu surface origin corner from corresponding anchor corner.
     */


    MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset_ = function (corner) {
      var anchorSize = this.measurements_.anchorSize; // isRightAligned corresponds to using the 'right' property on the surface.

      var isRightAligned = this.hasBit_(corner, CornerBit.RIGHT);
      var avoidHorizontalOverlap = this.hasBit_(this.anchorCorner_, CornerBit.RIGHT);

      if (isRightAligned) {
        var rightOffset = avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin_.left : this.anchorMargin_.right; // For hoisted or fixed elements, adjust the offset by the difference between viewport width and body width so
        // when we calculate the right value (`adjustPositionForHoistedElement_`) based on the element position,
        // the right property is correct.

        if (this.isHoistedElement_ || this.isFixedPosition_) {
          return rightOffset - (this.measurements_.viewportSize.width - this.measurements_.bodySize.width);
        }

        return rightOffset;
      }

      return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin_.right : this.anchorMargin_.left;
    };
    /**
     * @param corner Origin corner of the menu surface.
     * @return Vertical offset of menu surface origin corner from corresponding anchor corner.
     */


    MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset_ = function (corner) {
      var anchorSize = this.measurements_.anchorSize;
      var isBottomAligned = this.hasBit_(corner, CornerBit.BOTTOM);
      var avoidVerticalOverlap = this.hasBit_(this.anchorCorner_, CornerBit.BOTTOM);
      var y = 0;

      if (isBottomAligned) {
        y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin_.top : -this.anchorMargin_.bottom;
      } else {
        y = avoidVerticalOverlap ? anchorSize.height + this.anchorMargin_.bottom : this.anchorMargin_.top;
      }

      return y;
    };
    /** Calculates the offsets for positioning the menu-surface when the menu-surface has been hoisted to the body. */


    MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement_ = function (position) {
      var e_1, _a;

      var _b = this.measurements_,
          windowScroll = _b.windowScroll,
          viewportDistance = _b.viewportDistance;
      var props = Object.keys(position);

      try {
        for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
          var prop = props_1_1.value;
          var value = position[prop] || 0; // Hoisted surfaces need to have the anchor elements location on the page added to the
          // position properties for proper alignment on the body.

          value += viewportDistance[prop]; // Surfaces that are absolutely positioned need to have additional calculations for scroll
          // and bottom positioning.

          if (!this.isFixedPosition_) {
            if (prop === 'top') {
              value += windowScroll.y;
            } else if (prop === 'bottom') {
              value -= windowScroll.y;
            } else if (prop === 'left') {
              value += windowScroll.x;
            } else {
              // prop === 'right'
              value -= windowScroll.x;
            }
          }

          position[prop] = value;
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    /**
     * The last focused element when the menu surface was opened should regain focus, if the user is
     * focused on or within the menu surface when it is closed.
     */


    MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus_ = function () {
      var isRootFocused = this.adapter_.isFocused();
      var childHasFocus = document.activeElement && this.adapter_.isElementInContainer(document.activeElement);

      if (isRootFocused || childHasFocus) {
        this.adapter_.restoreFocus();
      }
    };

    MDCMenuSurfaceFoundation.prototype.hasBit_ = function (corner, bit) {
      return Boolean(corner & bit); // tslint:disable-line:no-bitwise
    };

    MDCMenuSurfaceFoundation.prototype.setBit_ = function (corner, bit) {
      return corner | bit; // tslint:disable-line:no-bitwise
    };
    /**
     * isFinite that doesn't force conversion to number type.
     * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
     */


    MDCMenuSurfaceFoundation.prototype.isFinite_ = function (num) {
      return typeof num === 'number' && isFinite(num);
    };

    return MDCMenuSurfaceFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$e = {
    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
    ROOT: 'mdc-menu'
  };
  var strings$d = {
    ARIA_SELECTED_ATTR: 'aria-selected',
    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
    LIST_SELECTOR: '.mdc-list',
    SELECTED_EVENT: 'MDCMenu:selected'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCMenuFoundation =
  /** @class */
  function (_super) {
    __extends(MDCMenuFoundation, _super);

    function MDCMenuFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCMenuFoundation.defaultAdapter, adapter)) || this;

      _this.closeAnimationEndTimerId_ = 0;
      return _this;
    }

    Object.defineProperty(MDCMenuFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$e;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCMenuFoundation, "strings", {
      get: function get() {
        return strings$d;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
      /**
       * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClassToElementAtIndex: function addClassToElementAtIndex() {
            return undefined;
          },
          removeClassFromElementAtIndex: function removeClassFromElementAtIndex() {
            return undefined;
          },
          addAttributeToElementAtIndex: function addAttributeToElementAtIndex() {
            return undefined;
          },
          removeAttributeFromElementAtIndex: function removeAttributeFromElementAtIndex() {
            return undefined;
          },
          elementContainsClass: function elementContainsClass() {
            return false;
          },
          closeSurface: function closeSurface() {
            return undefined;
          },
          getElementIndex: function getElementIndex() {
            return -1;
          },
          getParentElement: function getParentElement() {
            return null;
          },
          getSelectedElementIndex: function getSelectedElementIndex() {
            return -1;
          },
          notifySelected: function notifySelected() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCMenuFoundation.prototype.destroy = function () {
      if (this.closeAnimationEndTimerId_) {
        clearTimeout(this.closeAnimationEndTimerId_);
      }

      this.adapter_.closeSurface();
    };

    MDCMenuFoundation.prototype.handleKeydown = function (evt) {
      var key = evt.key,
          keyCode = evt.keyCode;
      var isTab = key === 'Tab' || keyCode === 9;

      if (isTab) {
        this.adapter_.closeSurface();
      }
    };

    MDCMenuFoundation.prototype.handleItemAction = function (listItem) {
      var _this = this;

      var index = this.adapter_.getElementIndex(listItem);

      if (index < 0) {
        return;
      }

      this.adapter_.notifySelected({
        index: index
      });
      this.adapter_.closeSurface(); // Wait for the menu to close before adding/removing classes that affect styles.

      this.closeAnimationEndTimerId_ = setTimeout(function () {
        var selectionGroup = _this.getSelectionGroup_(listItem);

        if (selectionGroup) {
          _this.handleSelectionGroup_(selectionGroup, index);
        }
      }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
    };
    /**
     * Handles toggling the selected classes in a selection group when a selection is made.
     */


    MDCMenuFoundation.prototype.handleSelectionGroup_ = function (selectionGroup, index) {
      // De-select the previous selection in this group.
      var selectedIndex = this.adapter_.getSelectedElementIndex(selectionGroup);

      if (selectedIndex >= 0) {
        this.adapter_.removeAttributeFromElementAtIndex(selectedIndex, strings$d.ARIA_SELECTED_ATTR);
        this.adapter_.removeClassFromElementAtIndex(selectedIndex, cssClasses$e.MENU_SELECTED_LIST_ITEM);
      } // Select the new list item in this group.


      this.adapter_.addClassToElementAtIndex(index, cssClasses$e.MENU_SELECTED_LIST_ITEM);
      this.adapter_.addAttributeToElementAtIndex(index, strings$d.ARIA_SELECTED_ATTR, 'true');
    };
    /**
     * Returns the parent selection group of an element if one exists.
     */


    MDCMenuFoundation.prototype.getSelectionGroup_ = function (listItem) {
      var parent = this.adapter_.getParentElement(listItem);

      if (!parent) {
        return null;
      }

      var isGroup = this.adapter_.elementContainsClass(parent, cssClasses$e.MENU_SELECTION_GROUP); // Iterate through ancestors until we find the group or get to the list.

      while (!isGroup && parent && !this.adapter_.elementContainsClass(parent, MDCListFoundation.cssClasses.ROOT)) {
        parent = this.adapter_.getParentElement(parent);
        isGroup = parent ? this.adapter_.elementContainsClass(parent, cssClasses$e.MENU_SELECTION_GROUP) : false;
      }

      if (isGroup) {
        return parent;
      } else {
        return null;
      }
    };

    return MDCMenuFoundation;
  }(MDCFoundation);

  //
  var script$J = {
    name: 'mdc-menu',
    model: {
      prop: 'open',
      event: 'change'
    },
    props: {
      open: [Boolean, Object],
      'quick-open': Boolean,
      'anchor-corner': [String, Number],
      'anchor-margin': Object
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    provide: function provide() {
      return {
        mdcMenu: this
      };
    },
    watch: {// anchorCorner(nv) {
      //   this.foundation.setAnchorCorner(Number(nv))
      // },
      // anchorMargin(nv) {
      //   this.foundation.setAnchorMargin(nv)
      // }
    },
    mounted: function mounted() {
      var _this = this;

      this._previousFocus = undefined;
      this.foundation = new MDCMenuFoundation({
        addClassToElementAtIndex: function addClassToElementAtIndex(index, className) {
          var list = _this.items;
          list[index].classList.add(className);
        },
        removeClassFromElementAtIndex: function removeClassFromElementAtIndex(index, className) {
          var list = _this.items;
          list[index].classList.remove(className);
        },
        addAttributeToElementAtIndex: function addAttributeToElementAtIndex(index, attr, value) {
          var list = _this.items;
          list[index].setAttribute(attr, value);
        },
        removeAttributeFromElementAtIndex: function removeAttributeFromElementAtIndex(index, attr) {
          var list = _this.items;
          list[index].removeAttribute(attr);
        },
        elementContainsClass: function elementContainsClass(element, className) {
          return element.classList.contains(className);
        },
        closeSurface: function closeSurface() {
          _this.$emit('change', false);
        },
        getElementIndex: function getElementIndex(element) {
          return _this.items.indexOf(element);
        },
        getParentElement: function getParentElement(element) {
          return element.parentElement;
        },
        getSelectedElementIndex: function getSelectedElementIndex(selectionGroup) {
          var idx = _this.items.indexOf(selectionGroup.querySelector(".".concat(MDCMenuFoundation.cssClasses.MENU_SELECTED_LIST_ITEM)));

          return idx;
        },
        notifySelected: function notifySelected(evtData) {
          emitCustomEvent(_this.$el, MDCMenuFoundation.strings.SELECTED_EVENT, {
            index: evtData.index,
            item: _this.items[evtData.index]
          });

          _this.$emit('select', {
            index: evtData.index,
            item: _this.items[evtData.index]
          });
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this._previousFocus = null;
      this.foundation.destroy();
    },
    computed: {
      items: function items() {
        return this.$refs.list.listElements;
      }
    },
    methods: {
      handleAction: function handleAction(_ref) {
        var index = _ref.detail.index;
        this.foundation.handleItemAction(this.items[index]);
      },
      handleKeydown: function handleKeydown(evt) {
        this.foundation.handleKeydown(evt);
      },
      onChange: function onChange(item) {
        this.$emit('change', item);
      } // onOpen_(value) {
      //   if (value) {
      //     this.foundation.open(typeof value === 'object' ? value : void 0)
      //   } else {
      //     this.foundation.close()
      //   }
      // },
      // show(options) {
      //   this.foundation.open(options)
      // },
      // hide() {
      //   this.foundation.close()
      // },
      // isOpen() {
      //   return this.foundation ? this.foundation.isOpen() : false
      // }

    }
  };

  /* script */
  const __vue_script__$J = script$J;

  /* template */
  var __vue_render__$G = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "mdc-menu-surface",
      {
        ref: "root",
        attrs: { "quick-open": _vm.quickOpen, open: _vm.open },
        on: { change: _vm.onChange, keydown: _vm.handleKeydown }
      },
      [
        _c(
          "mdc-list",
          {
            ref: "list",
            nativeOn: {
              "MDCList:action": function($event) {
                return _vm.handleAction($event)
              }
            }
          },
          [_vm._t("default")],
          2
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$G = [];
  __vue_render__$G._withStripped = true;

    /* style */
    const __vue_inject_styles__$J = undefined;
    /* scoped */
    const __vue_scope_id__$J = undefined;
    /* module identifier */
    const __vue_module_identifier__$J = undefined;
    /* functional template */
    const __vue_is_functional_template__$J = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcMenu = normalizeComponent_1(
      { render: __vue_render__$G, staticRenderFns: __vue_staticRenderFns__$G },
      __vue_inject_styles__$J,
      __vue_script__$J,
      __vue_scope_id__$J,
      __vue_is_functional_template__$J,
      __vue_module_identifier__$J,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cachedCssTransformPropertyName_;
  /**
   * Returns the name of the correct transform property to use on the current browser.
   */

  function getTransformPropertyName(globalObj, forceRefresh) {
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }

    if (cachedCssTransformPropertyName_ === undefined || forceRefresh) {
      var el = globalObj.document.createElement('div');
      cachedCssTransformPropertyName_ = 'transform' in el.style ? 'transform' : 'webkitTransform';
    }

    return cachedCssTransformPropertyName_;
  }

  var script$K = {
    name: 'mdc-menu-surface',
    model: {
      prop: 'open',
      event: 'change'
    },
    props: {
      open: [Boolean, Object],
      'quick-open': Boolean,
      'anchor-corner': [String, Number],
      'anchor-margin': Object
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    provide: function provide() {
      return {
        mdcMenu: this
      };
    },
    watch: {
      open: 'onOpen_',
      quickOpen: function quickOpen(nv) {
        this.foundation.setQuickOpen(nv);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this._previousFocus = undefined;
      this.foundation = new MDCMenuSurfaceFoundation(_extends({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return _this.$el.classList.contains(className);
        },
        hasAnchor: function hasAnchor() {
          return !!_this.anchorElement;
        },
        notifyClose: function notifyClose() {
          emitCustomEvent(_this.$el, MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});

          _this.$emit('change', false);
        },
        notifyOpen: function notifyOpen() {
          emitCustomEvent(_this.$el, MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});

          _this.$emit('change', true);
        },
        isElementInContainer: function isElementInContainer(el) {
          return _this.$el === el || _this.$el.contains(el);
        },
        isRtl: function isRtl() {
          return getComputedStyle(_this.$el).getPropertyValue('direction') === 'rtl';
        },
        setTransformOrigin: function setTransformOrigin(origin) {
          _this.$el.style["".concat(getTransformPropertyName(window), "-origin")] = origin;
        }
      }, this.getFocusAdapterMethods(), this.getDimensionAdapterMethods()));

      if (this.$el.parentElement && this.$el.parentElement.classList.contains(MDCMenuSurfaceFoundation.cssClasses.ANCHOR)) {
        this.anchorElement = this.$el.parentElement;
      }

      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this._previousFocus = null;
      this.foundation.destroy();
    },
    methods: {
      handleBodyClick: function handleBodyClick(evt) {
        this.foundation.handleBodyClick(evt);
      },
      registerBodyClickListener: function registerBodyClickListener() {
        document.body.addEventListener('click', this.handleBodyClick);
      },
      deregisterBodyClickListener: function deregisterBodyClickListener() {
        document.body.removeEventListener('click', this.handleBodyClick);
      },
      handleKeydown: function handleKeydown(evt) {
        this.foundation.handleKeydown(evt);
      },
      getFocusAdapterMethods: function getFocusAdapterMethods() {
        var _this2 = this;

        return {
          isFocused: function isFocused() {
            return document.activeElement === _this2.$el;
          },
          saveFocus: function saveFocus() {
            _this2.previousFocus_ = document.activeElement;
          },
          restoreFocus: function restoreFocus() {
            if (_this2.$el.contains(document.activeElement)) {
              if (_this2.previousFocus_ && _this2.previousFocus_.focus) {
                _this2.previousFocus_.focus();
              }
            }
          },
          isFirstElementFocused: function isFirstElementFocused() {
            return _this2.firstFocusableElement_ && _this2.firstFocusableElement_ === document.activeElement;
          },
          isLastElementFocused: function isLastElementFocused() {
            return _this2.lastFocusableElement_ && _this2.lastFocusableElement_ === document.activeElement;
          },
          focusFirstElement: function focusFirstElement() {
            return _this2.firstFocusableElement_ && _this2.firstFocusableElement_.focus && _this2.firstFocusableElement_.focus();
          },
          focusLastElement: function focusLastElement() {
            return _this2.lastFocusableElement_ && _this2.lastFocusableElement_.focus && _this2.lastFocusableElement_.focus();
          }
        };
      },
      getDimensionAdapterMethods: function getDimensionAdapterMethods() {
        var _this3 = this;

        return {
          getInnerDimensions: function getInnerDimensions() {
            return {
              width: _this3.$el.offsetWidth,
              height: _this3.$el.offsetHeight
            };
          },
          getAnchorDimensions: function getAnchorDimensions() {
            return _this3.anchorElement && _this3.anchorElement.getBoundingClientRect();
          },
          getWindowDimensions: function getWindowDimensions() {
            return {
              width: window.innerWidth,
              height: window.innerHeight
            };
          },
          getBodyDimensions: function getBodyDimensions() {
            return {
              width: document.body.clientWidth,
              height: document.body.clientHeight
            };
          },
          getWindowScroll: function getWindowScroll() {
            return {
              x: window.pageXOffset,
              y: window.pageYOffset
            };
          },
          setPosition: function setPosition(position) {
            _this3.$el.style.left = 'left' in position ? position.left : null;
            _this3.$el.style.right = 'right' in position ? position.right : null;
            _this3.$el.style.top = 'top' in position ? position.top : null;
            _this3.$el.style.bottom = 'bottom' in position ? position.bottom : null;
          },
          setMaxHeight: function setMaxHeight(height) {
            _this3.$el.style.maxHeight = height;
          }
        };
      },
      onOpen_: function onOpen_(value) {
        if (value) {
          var focusableElements = this.$el.querySelectorAll(MDCMenuSurfaceFoundation.strings.FOCUSABLE_ELEMENTS);
          this.firstFocusableElement_ = focusableElements.length > 0 ? focusableElements[0] : null;
          this.lastFocusableElement_ = focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;
          this.foundation.open();
        } else {
          this.foundation.close();
        }
      },
      hoistMenuToBody: function hoistMenuToBody() {
        document.body.appendChild(this.$el.parentElement.removeChild(this.$el));
        this.setIsHoisted(true);
      },
      setIsHoisted: function setIsHoisted(isHoisted) {
        this.foundation.setIsHoisted(isHoisted);
      },
      setMenuSurfaceAnchorElement: function setMenuSurfaceAnchorElement(element) {
        this.anchorElement = element;
      },
      setFixedPosition: function setFixedPosition(isFixed) {
        if (isFixed) {
          this.$el.classList.add(cssClasses.FIXED);
        } else {
          this.$el.classList.remove(cssClasses.FIXED);
        }

        this.foundation.setFixedPosition(isFixed);
      },
      setAbsolutePosition: function setAbsolutePosition(x, y) {
        this.foundation.setAbsolutePosition(x, y);
        this.setIsHoisted(true);
      },
      setAnchorCorner: function setAnchorCorner(corner) {
        this.foundation.setAnchorCorner(corner);
      },
      setAnchorMargin: function setAnchorMargin(margin) {
        this.foundation.setAnchorMargin(margin);
      },
      show: function show(options) {
        this.foundation.open(options);
      },
      hide: function hide() {
        this.foundation.close();
      },
      isOpen: function isOpen() {
        return this.foundation ? this.foundation.isOpen() : false;
      }
    }
  };

  /* script */
  const __vue_script__$K = script$K;

  /* template */
  var __vue_render__$H = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mdc-menu mdc-menu-surface",
        class: _vm.classes,
        on: {
          keydown: _vm.handleKeydown,
          "MDCMenuSurface:opened": _vm.registerBodyClickListener,
          "MDCMenuSurface:closed": _vm.deregisterBodyClickListener
        }
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$H = [];
  __vue_render__$H._withStripped = true;

    /* style */
    const __vue_inject_styles__$K = undefined;
    /* scoped */
    const __vue_scope_id__$K = undefined;
    /* module identifier */
    const __vue_module_identifier__$K = undefined;
    /* functional template */
    const __vue_is_functional_template__$K = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcMenuSurface = normalizeComponent_1(
      { render: __vue_render__$H, staticRenderFns: __vue_staticRenderFns__$H },
      __vue_inject_styles__$K,
      __vue_script__$K,
      __vue_scope_id__$K,
      __vue_is_functional_template__$K,
      __vue_module_identifier__$K,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  var script$L = {
    name: 'mdc-menu-item',
    props: {
      disabled: Boolean
    },
    inject: ['mdcMenu'],
    mounted: function mounted() {
      console.dir(this.mdcMenu);
      this.mdcMenu.items.push(this.$el);
    }
  };

  /* script */
  const __vue_script__$L = script$L;

  /* template */
  var __vue_render__$I = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "li",
      {
        staticClass: "mdc-menu-item mdc-list-item",
        attrs: {
          tabindex: _vm.disabled ? "-1" : "0",
          "aria-disabled": _vm.disabled,
          role: "menuitem"
        }
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$I = [];
  __vue_render__$I._withStripped = true;

    /* style */
    const __vue_inject_styles__$L = undefined;
    /* scoped */
    const __vue_scope_id__$L = undefined;
    /* module identifier */
    const __vue_module_identifier__$L = undefined;
    /* functional template */
    const __vue_is_functional_template__$L = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcMenuItem = normalizeComponent_1(
      { render: __vue_render__$I, staticRenderFns: __vue_staticRenderFns__$I },
      __vue_inject_styles__$L,
      __vue_script__$L,
      __vue_scope_id__$L,
      __vue_is_functional_template__$L,
      __vue_module_identifier__$L,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$M = {
    name: 'mdc-menu-divider'
  };

  /* script */
  const __vue_script__$M = script$M;

  /* template */
  var __vue_render__$J = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("li", {
      staticClass: "mdc-menu-divider mdc-list-divider",
      attrs: { role: "separator" }
    })
  };
  var __vue_staticRenderFns__$J = [];
  __vue_render__$J._withStripped = true;

    /* style */
    const __vue_inject_styles__$M = undefined;
    /* scoped */
    const __vue_scope_id__$M = undefined;
    /* module identifier */
    const __vue_module_identifier__$M = undefined;
    /* functional template */
    const __vue_is_functional_template__$M = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcMenuDivider = normalizeComponent_1(
      { render: __vue_render__$J, staticRenderFns: __vue_staticRenderFns__$J },
      __vue_inject_styles__$M,
      __vue_script__$M,
      __vue_scope_id__$M,
      __vue_is_functional_template__$M,
      __vue_module_identifier__$M,
      undefined,
      undefined
    );

  //
  //
  //
  //
  var script$N = {
    name: 'mdc-menu-anchor'
  };

  /* script */
  const __vue_script__$N = script$N;

  /* template */
  var __vue_render__$K = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-menu-surface--anchor" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$K = [];
  __vue_render__$K._withStripped = true;

    /* style */
    const __vue_inject_styles__$N = undefined;
    /* scoped */
    const __vue_scope_id__$N = undefined;
    /* module identifier */
    const __vue_module_identifier__$N = undefined;
    /* functional template */
    const __vue_is_functional_template__$N = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcMenuAnchor = normalizeComponent_1(
      { render: __vue_render__$K, staticRenderFns: __vue_staticRenderFns__$K },
      __vue_inject_styles__$N,
      __vue_script__$N,
      __vue_scope_id__$N,
      __vue_is_functional_template__$N,
      __vue_module_identifier__$N,
      undefined,
      undefined
    );

  var VueMDCMenu = BasePlugin({
    mdcMenu: mdcMenu,
    mdcMenuSurface: mdcMenuSurface,
    mdcMenuItem: mdcMenuItem,
    mdcMenuDivider: mdcMenuDivider,
    mdcMenuAnchor: mdcMenuAnchor
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$e = {
    NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch'
  };
  var numbers$4 = {
    // This should stay in sync with $mdc-notched-outline-padding * 2.
    NOTCH_ELEMENT_PADDING: 8
  };
  var cssClasses$f = {
    NO_LABEL: 'mdc-notched-outline--no-label',
    OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
    OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded'
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCNotchedOutlineFoundation =
  /** @class */
  function (_super) {
    __extends(MDCNotchedOutlineFoundation, _super);

    function MDCNotchedOutlineFoundation(adapter) {
      return _super.call(this, _assign({}, MDCNotchedOutlineFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
      get: function get() {
        return strings$e;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$f;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
      get: function get() {
        return numbers$4;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
      /**
       * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          setNotchWidthProperty: function setNotchWidthProperty() {
            return undefined;
          },
          removeNotchWidthProperty: function removeNotchWidthProperty() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });
    /**
     * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
     */

    MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
      var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;

      if (notchWidth > 0) {
        notchWidth += numbers$4.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
      }

      this.adapter_.setNotchWidthProperty(notchWidth);
      this.adapter_.addClass(OUTLINE_NOTCHED);
    };
    /**
     * Removes notched outline selector to close the notch in the outline.
     */


    MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
      var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
      this.adapter_.removeClass(OUTLINE_NOTCHED);
      this.adapter_.removeNotchWidthProperty();
    };

    return MDCNotchedOutlineFoundation;
  }(MDCFoundation);

  //
  var script$O = {
    name: 'mdc-notched-outline',
    data: function data() {
      return {
        outlinedClasses: {
          'mdc-notched-outline': true
        }
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCNotchedOutlineFoundation({
        addClass: function addClass(className) {
          _this.$set(_this.outlinedClasses, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.outlinedClasses, className);
        },
        setNotchWidthProperty: function setNotchWidthProperty(width) {
          return _this.$refs.notchEl.style.setProperty('width', width + 'px');
        },
        removeNotchWidthProperty: function removeNotchWidthProperty() {
          return _this.$refs.notchEl.style.removeProperty('width');
        }
      });
      this.foundation.init();

      if (this.$slots.default) {
        // this.$refs.labelEl.style.transitionDuration = '0s'
        this.$set(this.outlinedClasses, MDCNotchedOutlineFoundation.cssClasses.OUTLINE_UPGRADED, true); // requestAnimationFrame(() => {
        //   this.$refs.labelEl.style.transitionDuration = ''
        // })
      } else {
        this.$set(this.outlinedClasses, MDCNotchedOutlineFoundation.cssClasses.NO_LABEL, true);
      }
    },
    beforeDestroy: function beforeDestroy() {
      var foundation = this.foundation;
      this.foundation = null;
      foundation.destroy();
    },
    methods: {
      notch: function notch(notchWidth) {
        this.foundation.notch(notchWidth);
      },
      closeNotch: function closeNotch() {
        this.foundation.closeNotch();
      },
      float: function float(shouldFloat) {
        this.$refs.labelEl && this.$refs.labelEl.float(shouldFloat);
      },
      shake: function shake(shouldShake) {
        this.$refs.labelEl && this.$refs.labelEl.shake(shouldShake);
      },
      getWidth: function getWidth() {
        return this.$refs.labelEl.getWidth();
      }
    }
  };

  /* script */
  const __vue_script__$O = script$O;

  /* template */
  var __vue_render__$L = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { ref: "outlined", class: _vm.outlinedClasses }, [
      _c("div", { staticClass: "mdc-notched-outline__leading" }),
      _vm._v(" "),
      _c(
        "div",
        { ref: "notchEl", staticClass: "mdc-notched-outline__notch" },
        [
          _vm.$slots.default
            ? _c("mdc-floating-label", { ref: "labelEl" }, [_vm._t("default")], 2)
            : _vm._e()
        ],
        1
      ),
      _vm._v(" "),
      _c("div", { staticClass: "mdc-notched-outline__trailing" })
    ])
  };
  var __vue_staticRenderFns__$L = [];
  __vue_render__$L._withStripped = true;

    /* style */
    const __vue_inject_styles__$O = undefined;
    /* scoped */
    const __vue_scope_id__$O = undefined;
    /* module identifier */
    const __vue_module_identifier__$O = undefined;
    /* functional template */
    const __vue_is_functional_template__$O = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcNotchedOutline = normalizeComponent_1(
      { render: __vue_render__$L, staticRenderFns: __vue_staticRenderFns__$L },
      __vue_inject_styles__$O,
      __vue_script__$O,
      __vue_scope_id__$O,
      __vue_is_functional_template__$O,
      __vue_module_identifier__$O,
      undefined,
      undefined
    );

  var VueMDCNotchedOutline = BasePlugin({
    mdcNotchedOutline: mdcNotchedOutline
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$f = {
    NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control'
  };
  var cssClasses$g = {
    DISABLED: 'mdc-radio--disabled',
    ROOT: 'mdc-radio'
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCRadioFoundation =
  /** @class */
  function (_super) {
    __extends(MDCRadioFoundation, _super);

    function MDCRadioFoundation(adapter) {
      return _super.call(this, _assign({}, MDCRadioFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCRadioFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$g;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCRadioFoundation, "strings", {
      get: function get() {
        return strings$f;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCRadioFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          setNativeControlDisabled: function setNativeControlDisabled() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCRadioFoundation.prototype.setDisabled = function (disabled) {
      var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;
      this.adapter_.setNativeControlDisabled(disabled);

      if (disabled) {
        this.adapter_.addClass(DISABLED);
      } else {
        this.adapter_.removeClass(DISABLED);
      }
    };

    return MDCRadioFoundation;
  }(MDCFoundation);

  //
  var script$P = {
    name: 'mdc-radio',
    mixins: [DispatchFocusMixin, VMAUniqueIdMixin],
    model: {
      prop: 'picked',
      event: 'change'
    },
    props: {
      name: {
        type: String,
        required: true
      },
      value: String,
      picked: String,
      checked: Boolean,
      label: String,
      'align-end': Boolean,
      disabled: Boolean
    },
    data: function data() {
      return {
        classes: {},
        styles: {},
        formFieldClasses: {
          'mdc-form-field': this.label,
          'mdc-form-field--align-end': this.label && this.alignEnd
        }
      };
    },
    watch: {
      checked: 'setChecked',
      picked: 'onPicked',
      disabled: function disabled(value) {
        this.foundation.setDisabled(value);
      }
    },
    mounted: function mounted() {
      var _this = this;

      // add foundation
      this.foundation = new MDCRadioFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
          return _this.$refs.control.disabled = disabled;
        }
      }); // add ripple

      this.ripple = new RippleBase(this, {
        isUnbounded: function isUnbounded() {
          return true;
        },
        // Radio buttons technically go "active" whenever there is *any* keyboard interaction. This is not the
        // UI we desire.
        isSurfaceActive: function isSurfaceActive() {
          return false;
        },
        registerInteractionHandler: function registerInteractionHandler(evt, handler) {
          _this.$refs.control.addEventListener(evt, handler, applyPassive());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
          _this.$refs.control.removeEventListener(evt, handler, applyPassive());
        },
        computeBoundingRect: function computeBoundingRect() {
          return _this.$refs.root.getBoundingClientRect();
        }
      });
      this.formField = new MDCFormFieldFoundation({
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          _this.$refs.label.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          _this.$refs.label.removeEventListener(type, handler);
        },
        activateInputRipple: function activateInputRipple() {
          _this.ripple && _this.ripple.activate();
        },
        deactivateInputRipple: function deactivateInputRipple() {
          _this.ripple && _this.ripple.deactivate();
        }
      });
      this.foundation.init();
      this.ripple.init();
      this.formField.init();
      this.foundation.setDisabled(this.disabled);
      this.$refs.control.value = this.value || this.label;
      this.setChecked(this.checked || this.picked == this.$refs.control.value); // refresh model

      this.checked && this.sync();
    },
    beforeDestroy: function beforeDestroy() {
      this.formField.destroy();
      this.ripple.destroy();
      this.foundation.destroy();
    },
    methods: {
      onPicked: function onPicked(nv) {
        this.setChecked(this.picked == this.$refs.control.value);
      },
      setChecked: function setChecked(checked) {
        this.$refs.control.checked = checked;
      },
      isChecked: function isChecked() {
        return this.$refs.control.checked;
      },
      sync: function sync(evt) {
        this.$emit('change', this.$refs.control.value);
      }
    }
  };

  /* script */
  const __vue_script__$P = script$P;

  /* template */
  var __vue_render__$M = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-radio-wrapper", class: _vm.formFieldClasses },
      [
        _c(
          "div",
          {
            ref: "root",
            staticClass: "mdc-radio",
            class: _vm.classes,
            style: _vm.styles
          },
          [
            _c("input", {
              ref: "control",
              staticClass: "mdc-radio__native-control",
              attrs: { id: _vm.vma_uid_, name: _vm.name, type: "radio" },
              on: { change: _vm.sync }
            }),
            _vm._v(" "),
            _vm._m(0)
          ]
        ),
        _vm._v(" "),
        _c(
          "label",
          { ref: "label", attrs: { for: _vm.vma_uid_ } },
          [_vm._t("default", [_vm._v(_vm._s(_vm.label))])],
          2
        )
      ]
    )
  };
  var __vue_staticRenderFns__$M = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "mdc-radio__background" }, [
        _c("div", { staticClass: "mdc-radio__outer-circle" }),
        _vm._v(" "),
        _c("div", { staticClass: "mdc-radio__inner-circle" })
      ])
    }
  ];
  __vue_render__$M._withStripped = true;

    /* style */
    const __vue_inject_styles__$P = undefined;
    /* scoped */
    const __vue_scope_id__$P = undefined;
    /* module identifier */
    const __vue_module_identifier__$P = undefined;
    /* functional template */
    const __vue_is_functional_template__$P = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcRadio = normalizeComponent_1(
      { render: __vue_render__$M, staticRenderFns: __vue_staticRenderFns__$M },
      __vue_inject_styles__$P,
      __vue_script__$P,
      __vue_scope_id__$P,
      __vue_is_functional_template__$P,
      __vue_module_identifier__$P,
      undefined,
      undefined
    );

  var VueMDCRadio = BasePlugin({
    mdcRadio: mdcRadio
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$h = {
    DISABLED: 'mdc-select--disabled',
    FOCUSED: 'mdc-select--focused',
    INVALID: 'mdc-select--invalid',
    OUTLINED: 'mdc-select--outlined',
    REQUIRED: 'mdc-select--required',
    ROOT: 'mdc-select',
    SELECTED_ITEM_CLASS: 'mdc-list-item--selected',
    WITH_LEADING_ICON: 'mdc-select--with-leading-icon'
  };
  var strings$g = {
    ARIA_CONTROLS: 'aria-controls',
    ARIA_SELECTED_ATTR: 'aria-selected',
    CHANGE_EVENT: 'MDCSelect:change',
    ENHANCED_VALUE_ATTR: 'data-value',
    HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
    LABEL_SELECTOR: '.mdc-floating-label',
    LEADING_ICON_SELECTOR: '.mdc-select__icon',
    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
    MENU_SELECTOR: '.mdc-select__menu',
    NATIVE_CONTROL_SELECTOR: '.mdc-select__native-control',
    OUTLINE_SELECTOR: '.mdc-notched-outline',
    SELECTED_ITEM_SELECTOR: "." + cssClasses$h.SELECTED_ITEM_CLASS,
    SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text'
  };
  var numbers$5 = {
    LABEL_SCALE: 0.75
  };

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCSelectFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSelectFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */

    /**
     * @param adapter
     * @param foundationMap Map from subcomponent names to their subfoundations.
     */


    function MDCSelectFoundation(adapter, foundationMap) {
      if (foundationMap === void 0) {
        foundationMap = {};
      }

      var _this = _super.call(this, _assign({}, MDCSelectFoundation.defaultAdapter, adapter)) || this;

      _this.leadingIcon_ = foundationMap.leadingIcon;
      _this.helperText_ = foundationMap.helperText;
      return _this;
    }

    Object.defineProperty(MDCSelectFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$h;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation, "numbers", {
      get: function get() {
        return numbers$5;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation, "strings", {
      get: function get() {
        return strings$g;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
      /**
       * See {@link MDCSelectAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          activateBottomLine: function activateBottomLine() {
            return undefined;
          },
          deactivateBottomLine: function deactivateBottomLine() {
            return undefined;
          },
          setValue: function setValue() {
            return undefined;
          },
          getValue: function getValue() {
            return '';
          },
          floatLabel: function floatLabel() {
            return undefined;
          },
          getLabelWidth: function getLabelWidth() {
            return 0;
          },
          hasOutline: function hasOutline() {
            return false;
          },
          notchOutline: function notchOutline() {
            return undefined;
          },
          closeOutline: function closeOutline() {
            return undefined;
          },
          openMenu: function openMenu() {
            return undefined;
          },
          closeMenu: function closeMenu() {
            return undefined;
          },
          isMenuOpen: function isMenuOpen() {
            return false;
          },
          setSelectedIndex: function setSelectedIndex() {
            return undefined;
          },
          setDisabled: function setDisabled() {
            return undefined;
          },
          setRippleCenter: function setRippleCenter() {
            return undefined;
          },
          notifyChange: function notifyChange() {
            return undefined;
          },
          checkValidity: function checkValidity() {
            return false;
          },
          setValid: function setValid() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCSelectFoundation.prototype.setSelectedIndex = function (index) {
      this.adapter_.setSelectedIndex(index);
      this.adapter_.closeMenu();
      var didChange = true;
      this.handleChange(didChange);
    };

    MDCSelectFoundation.prototype.setValue = function (value) {
      this.adapter_.setValue(value);
      var didChange = true;
      this.handleChange(didChange);
    };

    MDCSelectFoundation.prototype.getValue = function () {
      return this.adapter_.getValue();
    };

    MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {
      if (isDisabled) {
        this.adapter_.addClass(cssClasses$h.DISABLED);
      } else {
        this.adapter_.removeClass(cssClasses$h.DISABLED);
      }

      this.adapter_.setDisabled(isDisabled);
      this.adapter_.closeMenu();

      if (this.leadingIcon_) {
        this.leadingIcon_.setDisabled(isDisabled);
      }
    };
    /**
     * @param content Sets the content of the helper text.
     */


    MDCSelectFoundation.prototype.setHelperTextContent = function (content) {
      if (this.helperText_) {
        this.helperText_.setContent(content);
      }
    };

    MDCSelectFoundation.prototype.layout = function () {
      var openNotch = this.getValue().length > 0;
      this.notchOutline(openNotch);
    };
    /**
     * Handles value changes, via change event or programmatic updates.
     */


    MDCSelectFoundation.prototype.handleChange = function (didChange) {
      if (didChange === void 0) {
        didChange = true;
      }

      var value = this.getValue();
      var optionHasValue = value.length > 0;
      var isRequired = this.adapter_.hasClass(cssClasses$h.REQUIRED);
      this.notchOutline(optionHasValue);

      if (!this.adapter_.hasClass(cssClasses$h.FOCUSED)) {
        this.adapter_.floatLabel(optionHasValue);
      }

      if (didChange) {
        this.adapter_.notifyChange(value);

        if (isRequired) {
          this.setValid(this.isValid());

          if (this.helperText_) {
            this.helperText_.setValidity(this.isValid());
          }
        }
      }
    };
    /**
     * Handles focus events from select element.
     */


    MDCSelectFoundation.prototype.handleFocus = function () {
      this.adapter_.addClass(cssClasses$h.FOCUSED);
      this.adapter_.floatLabel(true);
      this.notchOutline(true);
      this.adapter_.activateBottomLine();

      if (this.helperText_) {
        this.helperText_.showToScreenReader();
      }
    };
    /**
     * Handles blur events from select element.
     */


    MDCSelectFoundation.prototype.handleBlur = function () {
      if (this.adapter_.isMenuOpen()) {
        return;
      }

      this.adapter_.removeClass(cssClasses$h.FOCUSED);
      this.handleChange(false);
      this.adapter_.deactivateBottomLine();
      var isRequired = this.adapter_.hasClass(cssClasses$h.REQUIRED);

      if (isRequired) {
        this.setValid(this.isValid());

        if (this.helperText_) {
          this.helperText_.setValidity(this.isValid());
        }
      }
    };

    MDCSelectFoundation.prototype.handleClick = function (normalizedX) {
      if (this.adapter_.isMenuOpen()) {
        return;
      }

      this.adapter_.setRippleCenter(normalizedX);
      this.adapter_.openMenu();
    };

    MDCSelectFoundation.prototype.handleKeydown = function (event) {
      if (this.adapter_.isMenuOpen()) {
        return;
      }

      var isEnter = event.key === 'Enter' || event.keyCode === 13;
      var isSpace = event.key === 'Space' || event.keyCode === 32;
      var arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;
      var arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;

      if (this.adapter_.hasClass(cssClasses$h.FOCUSED) && (isEnter || isSpace || arrowUp || arrowDown)) {
        this.adapter_.openMenu();
        event.preventDefault();
      }
    };
    /**
     * Opens/closes the notched outline.
     */


    MDCSelectFoundation.prototype.notchOutline = function (openNotch) {
      if (!this.adapter_.hasOutline()) {
        return;
      }

      var isFocused = this.adapter_.hasClass(cssClasses$h.FOCUSED);

      if (openNotch) {
        var labelScale = numbers$5.LABEL_SCALE;
        var labelWidth = this.adapter_.getLabelWidth() * labelScale;
        this.adapter_.notchOutline(labelWidth);
      } else if (!isFocused) {
        this.adapter_.closeOutline();
      }
    };
    /**
     * Sets the aria label of the leading icon.
     */


    MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {
      if (this.leadingIcon_) {
        this.leadingIcon_.setAriaLabel(label);
      }
    };
    /**
     * Sets the text content of the leading icon.
     */


    MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {
      if (this.leadingIcon_) {
        this.leadingIcon_.setContent(content);
      }
    };

    MDCSelectFoundation.prototype.setValid = function (isValid) {
      this.adapter_.setValid(isValid);
    };

    MDCSelectFoundation.prototype.isValid = function () {
      return this.adapter_.checkValidity();
    };

    return MDCSelectFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$h = {
    ARIA_HIDDEN: 'aria-hidden',
    ROLE: 'role'
  };
  var cssClasses$i = {
    HELPER_TEXT_PERSISTENT: 'mdc-select-helper-text--persistent',
    HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCSelectHelperTextFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSelectHelperTextFoundation, _super);

    function MDCSelectHelperTextFoundation(adapter) {
      return _super.call(this, _assign({}, MDCSelectHelperTextFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$i;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
      get: function get() {
        return strings$h;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
      /**
       * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          setAttr: function setAttr() {
            return undefined;
          },
          removeAttr: function removeAttr() {
            return undefined;
          },
          setContent: function setContent() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });
    /**
     * Sets the content of the helper text field.
     */

    MDCSelectHelperTextFoundation.prototype.setContent = function (content) {
      this.adapter_.setContent(content);
    };
    /**
     *  Sets the persistency of the helper text.
     */


    MDCSelectHelperTextFoundation.prototype.setPersistent = function (isPersistent) {
      if (isPersistent) {
        this.adapter_.addClass(cssClasses$i.HELPER_TEXT_PERSISTENT);
      } else {
        this.adapter_.removeClass(cssClasses$i.HELPER_TEXT_PERSISTENT);
      }
    };
    /**
     * @param isValidation True to make the helper text act as an error validation message.
     */


    MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {
      if (isValidation) {
        this.adapter_.addClass(cssClasses$i.HELPER_TEXT_VALIDATION_MSG);
      } else {
        this.adapter_.removeClass(cssClasses$i.HELPER_TEXT_VALIDATION_MSG);
      }
    };
    /**
     * Makes the helper text visible to screen readers.
     */


    MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {
      this.adapter_.removeAttr(strings$h.ARIA_HIDDEN);
    };
    /**
     * Sets the validity of the helper text based on the select validity.
     */


    MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {
      var helperTextIsPersistent = this.adapter_.hasClass(cssClasses$i.HELPER_TEXT_PERSISTENT);
      var helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses$i.HELPER_TEXT_VALIDATION_MSG);
      var validationMsgNeedsDisplay = helperTextIsValidationMsg && !selectIsValid;

      if (validationMsgNeedsDisplay) {
        this.adapter_.setAttr(strings$h.ROLE, 'alert');
      } else {
        this.adapter_.removeAttr(strings$h.ROLE);
      }

      if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
        this.hide_();
      }
    };
    /**
     * Hides the help text from screen readers.
     */


    MDCSelectHelperTextFoundation.prototype.hide_ = function () {
      this.adapter_.setAttr(strings$h.ARIA_HIDDEN, 'true');
    };

    return MDCSelectHelperTextFoundation;
  }(MDCFoundation);

  //
  var script$Q = {
    name: 'select-helper-text',
    props: {
      helptextPersistent: Boolean,
      helptextValidation: Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-select-helper-text': true,
          'mdc-select-helper-text--persistent': this.helptextPersistent,
          'mdc-select-helper-text--validation-msg': this.helptextValidation
        }
      };
    },
    watch: {
      helptextPersistent: function helptextPersistent() {
        this.foundation.setPersistent(this.helptextPersistent);
      },
      helptextValidation: function helptextValidation() {
        this.foundation.setValidation(this.helptextValidation);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCSelectHelperTextFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return Boolean(_this.classes[className]);
        },
        setAttr: function setAttr(attr, value) {
          _this.$el.setAttribute(attr, value);
        },
        removeAttr: function removeAttr(attr) {
          _this.$el.removeAttribute(attr);
        },
        setContent: function setContent()
        /*content*/
        {// help text get's updated from {{helptext}}
          // cf. this.$el.textContent = content
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$Q = script$Q;

  /* template */
  var __vue_render__$N = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "p",
      { ref: "helptextEl", class: _vm.classes, attrs: { "aria-hidden": "true" } },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$N = [];
  __vue_render__$N._withStripped = true;

    /* style */
    const __vue_inject_styles__$Q = undefined;
    /* scoped */
    const __vue_scope_id__$Q = undefined;
    /* module identifier */
    const __vue_module_identifier__$Q = undefined;
    /* functional template */
    const __vue_is_functional_template__$Q = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var SelectHelperText = normalizeComponent_1(
      { render: __vue_render__$N, staticRenderFns: __vue_staticRenderFns__$N },
      __vue_inject_styles__$Q,
      __vue_script__$Q,
      __vue_scope_id__$Q,
      __vue_is_functional_template__$Q,
      __vue_module_identifier__$Q,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$i = {
    ICON_EVENT: 'MDCSelect:icon',
    ICON_ROLE: 'button'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var INTERACTION_EVENTS = ['click', 'keydown'];

  var MDCSelectIconFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSelectIconFoundation, _super);

    function MDCSelectIconFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCSelectIconFoundation.defaultAdapter, adapter)) || this;

      _this.savedTabIndex_ = null;

      _this.interactionHandler_ = function (evt) {
        return _this.handleInteraction(evt);
      };

      return _this;
    }

    Object.defineProperty(MDCSelectIconFoundation, "strings", {
      get: function get() {
        return strings$i;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSelectIconFoundation, "defaultAdapter", {
      /**
       * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          getAttr: function getAttr() {
            return null;
          },
          setAttr: function setAttr() {
            return undefined;
          },
          removeAttr: function removeAttr() {
            return undefined;
          },
          setContent: function setContent() {
            return undefined;
          },
          registerInteractionHandler: function registerInteractionHandler() {
            return undefined;
          },
          deregisterInteractionHandler: function deregisterInteractionHandler() {
            return undefined;
          },
          notifyIconAction: function notifyIconAction() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCSelectIconFoundation.prototype.init = function () {
      var _this = this;

      this.savedTabIndex_ = this.adapter_.getAttr('tabindex');
      INTERACTION_EVENTS.forEach(function (evtType) {
        _this.adapter_.registerInteractionHandler(evtType, _this.interactionHandler_);
      });
    };

    MDCSelectIconFoundation.prototype.destroy = function () {
      var _this = this;

      INTERACTION_EVENTS.forEach(function (evtType) {
        _this.adapter_.deregisterInteractionHandler(evtType, _this.interactionHandler_);
      });
    };

    MDCSelectIconFoundation.prototype.setDisabled = function (disabled) {
      if (!this.savedTabIndex_) {
        return;
      }

      if (disabled) {
        this.adapter_.setAttr('tabindex', '-1');
        this.adapter_.removeAttr('role');
      } else {
        this.adapter_.setAttr('tabindex', this.savedTabIndex_);
        this.adapter_.setAttr('role', strings$i.ICON_ROLE);
      }
    };

    MDCSelectIconFoundation.prototype.setAriaLabel = function (label) {
      this.adapter_.setAttr('aria-label', label);
    };

    MDCSelectIconFoundation.prototype.setContent = function (content) {
      this.adapter_.setContent(content);
    };

    MDCSelectIconFoundation.prototype.handleInteraction = function (evt) {
      var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;

      if (evt.type === 'click' || isEnterKey) {
        this.adapter_.notifyIconAction();
      }
    };

    return MDCSelectIconFoundation;
  }(MDCFoundation);

  var script$R = {
    name: 'select-icon',
    props: {
      icon: String
    },
    data: function data() {
      return {
        classes: {
          'material-icons': true,
          'mdc-select__icon': true
        },
        styles: {}
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCSelectIconFoundation(_extends({
        getAttr: function getAttr(attr) {
          return _this.$el.getAttribute(attr);
        },
        setAttr: function setAttr(attr, value) {
          return _this.$el.setAttribute(attr, value);
        },
        removeAttr: function removeAttr(attr) {
          return _this.$el.removeAttribute(attr);
        },
        setContent: function setContent(content) {
          _this.$el.textContent = content;
        },
        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
          return _this.$el.addEventListener(evtType, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
          return _this.$el.removeEventListener(evtType, handler);
        },
        notifyIconAction: function notifyIconAction() {
          _this.$emit('click');

          emitCustomEvent(_this.$el, MDCSelectIconFoundation.strings.ICON_EVENT, {}, true
          /* shouldBubble  */
          );
        }
      }));
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$R = script$R;

  /* template */
  var __vue_render__$O = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "i",
      _vm._g(
        _vm._b({ class: _vm.classes, style: _vm.styles }, "i", _vm.$attrs, false),
        _vm.$listeners
      ),
      [_vm._v("\n  " + _vm._s(_vm.icon) + "\n")]
    )
  };
  var __vue_staticRenderFns__$O = [];
  __vue_render__$O._withStripped = true;

    /* style */
    const __vue_inject_styles__$R = undefined;
    /* scoped */
    const __vue_scope_id__$R = undefined;
    /* module identifier */
    const __vue_module_identifier__$R = undefined;
    /* functional template */
    const __vue_is_functional_template__$R = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var SelectIcon = normalizeComponent_1(
      { render: __vue_render__$O, staticRenderFns: __vue_staticRenderFns__$O },
      __vue_inject_styles__$R,
      __vue_script__$R,
      __vue_scope_id__$R,
      __vue_is_functional_template__$R,
      __vue_module_identifier__$R,
      undefined,
      undefined
    );

  var script$S = {
    name: 'mdc-select',
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change'
    },
    props: {
      value: String,
      helptext: String,
      leadingIcon: String,
      icon: String,
      helptextPersistent: Boolean,
      helptextValidation: Boolean,
      disabled: Boolean,
      label: String,
      outlined: Boolean,
      id: {
        type: String
      }
    },
    mixins: [VMAUniqueIdMixin],
    data: function data() {
      return {
        styles: {},
        classes: {}
      };
    },
    components: {
      SelectHelperText: SelectHelperText,
      SelectIcon: SelectIcon
    },
    computed: {
      rootClasses: function rootClasses() {
        return _objectSpread({
          'mdc-select': true,
          'mdc-select--outlined': this.outlined,
          'mdc-select--with-leading-icon': this.leadingIcon,
          'mdc-select--disabled': this.disabled
        }, this.classes);
      },
      listeners: function listeners() {
        var _this = this;

        return _objectSpread({}, this.$listeners, {
          change: function change(event) {
            return _this.handleChange(event);
          },
          blur: function blur(event) {
            return _this.handleBlur(event);
          },
          focus: function focus(event) {
            return _this.handleFocus(event);
          },
          mousedown: function mousedown(event) {
            return _this.handleClick(event);
          },
          touchstart: function touchstart(event) {
            return _this.handleClick(event);
          }
        });
      },
      selectAriaControls: function selectAriaControls() {
        return this.helptext ? 'help-' + this.vma_uid_ : undefined;
      }
    },
    watch: {
      disabled: function disabled(value) {
        this.foundation && this.foundation.updateDisabledStyle(value);
      },
      value: 'refreshIndex'
    },
    mounted: function mounted() {
      var _this2 = this;

      this.foundation = new MDCSelectFoundation(_extends({
        // common methods
        addClass: function addClass(className) {
          return _this2.$set(_this2.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this2.$delete(_this2.classes, className);
        },
        hasClass: function hasClass(className) {
          return Boolean(_this2.classes[className]);
        },
        setRippleCenter: function setRippleCenter(normalizedX) {
          return _this2.$refs.lineRippleEl && _this2.$refs.lineRippleEl.setRippleCenter(normalizedX);
        },
        activateBottomLine: function activateBottomLine() {
          if (_this2.$refs.lineRippleEl) {
            _this2.$refs.lineRippleEl.foundation.activate();
          }
        },
        deactivateBottomLine: function deactivateBottomLine() {
          if (_this2.$refs.lineRippleEl) {
            _this2.$refs.lineRippleEl.foundation.deactivate();
          }
        },
        notifyChange: function notifyChange(value) {
          var index = _this2.selectedIndex;
          emitCustomEvent(_this2.$refs.root, MDCSelectFoundation.strings.CHANGE_EVENT, {
            value: value,
            index: index
          }, true
          /* shouldBubble  */
          );

          _this2.$emit('change', value);
        },
        // native methods
        getValue: function getValue() {
          return _this2.$refs.native_control.value;
        },
        setValue: function setValue(value) {
          return _this2.$refs.native_control.value = value;
        },
        openMenu: function openMenu() {},
        closeMenu: function closeMenu() {},
        isMenuOpen: function isMenuOpen() {
          return false;
        },
        setSelectedIndex: function setSelectedIndex(index) {
          _this2.$refs.native_control.selectedIndex = index;
        },
        setDisabled: function setDisabled(isDisabled) {
          return _this2.$refs.native_control.disabled = isDisabled;
        },
        setValid: function setValid(isValid) {
          isValid ? _this2.$delete(_this2.classes, MDCSelectFoundation.cssClasses.INVALID) : _this2.set(_this2.classes, MDCSelectFoundation.cssClasses.INVALID);
        },
        checkValidity: function checkValidity() {
          return _this2.$refs.native_control.checkValidity();
        },
        // outline methods
        hasOutline: function hasOutline() {
          return _this2.outlined;
        },
        notchOutline: function notchOutline(labelWidth) {
          if (_this2.$refs.outlineEl) {
            _this2.$refs.outlineEl.notch(labelWidth);
          }
        },
        closeOutline: function closeOutline() {
          if (_this2.$refs.outlineEl) {
            _this2.$refs.outlineEl.closeNotch();
          }
        },
        // label methods
        floatLabel: function floatLabel(value) {
          if (_this2.$refs.labelEl) {
            _this2.$refs.labelEl.float(value);
          } else {
            _this2.$refs.outlineEl.float(value);
          }
        },
        getLabelWidth: function getLabelWidth() {
          if (_this2.$refs.labelEl) {
            return _this2.$refs.labelEl.getWidth();
          }
        }
      }), {
        helperText: this.$refs.helpertextEl ? this.$refs.helpertextEl.foundation : void 0,
        leadingIcon: this.$refs.leadingIconEl ? this.$refs.leadingIconEl.foundation : undefined
      });
      this.foundation.init();
      this.foundation.handleChange(false); // initial sync with DOM

      this.refreshIndex();
      this.slotObserver = new MutationObserver(function () {
        return _this2.refreshIndex();
      });
      this.slotObserver.observe(this.$refs.native_control, {
        childList: true,
        subtree: true
      });
      this.ripple = new RippleBase(this);
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.slotObserver.disconnect();
      var foundation = this.foundation;
      this.foundation = null;
      foundation.destroy();
      this.ripple && this.ripple.destroy();
    },
    methods: {
      handleChange: function handleChange() {
        this.foundation.handleChange(true);
      },
      handleFocus: function handleFocus() {
        this.foundation.handleFocus();
      },
      handleBlur: function handleBlur() {
        this.foundation.handleBlur();
      },
      handleClick: function handleClick(evt) {
        this.foundation.handleClick(this.getNormalizedXCoordinate(evt));
      },
      refreshIndex: function refreshIndex() {
        var _this3 = this;

        var options = _toConsumableArray(this.$refs.native_control.querySelectorAll('option'));

        var idx = options.findIndex(function (_ref) {
          var value = _ref.value;
          return _this3.value === value;
        });

        if (this.$refs.native_control.selectedIndex !== idx) {
          this.$refs.native_control.selectedIndex = idx;
          this.foundation.handleChange(false);
        }
      },
      getNormalizedXCoordinate: function getNormalizedXCoordinate(evt) {
        var targetClientRect = evt.target.getBoundingClientRect();
        var xCoordinate = evt.clientX;
        return xCoordinate - targetClientRect.left;
      }
    }
  };

  /* script */
  const __vue_script__$S = script$S;

  /* template */
  var __vue_render__$P = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c(
          "div",
          {
            ref: "root",
            class: _vm.rootClasses,
            style: _vm.styles,
            attrs: { id: _vm.id }
          },
          [
            _vm.leadingIcon
              ? _c("select-icon", {
                  ref: "leadingIconEl",
                  attrs: {
                    icon: _vm.leadingIcon,
                    "tab-index": "0",
                    role: "button"
                  }
                })
              : _vm._e(),
            _vm._v(" "),
            _c("i", { staticClass: "mdc-select__dropdown-icon" }),
            _vm._v(" "),
            _c(
              "select",
              _vm._g(
                _vm._b(
                  {
                    ref: "native_control",
                    staticClass: "mdc-select__native-control",
                    attrs: {
                      disabled: _vm.disabled,
                      "aria-controls": _vm.selectAriaControls
                    }
                  },
                  "select",
                  _vm.$attrs,
                  false
                ),
                _vm.listeners
              ),
              [
                !_vm.value
                  ? _c("option", {
                      staticClass: "mdc-option",
                      attrs: { value: "", disabled: "", selected: "" }
                    })
                  : _vm._e(),
                _vm._v(" "),
                _vm._t("default")
              ],
              2
            ),
            _vm._v(" "),
            !_vm.outlined
              ? _c("mdc-floating-label", { ref: "labelEl" }, [
                  _vm._v(_vm._s(_vm.label))
                ])
              : _vm._e(),
            _vm._v(" "),
            !_vm.outlined
              ? _c("mdc-line-ripple", { ref: "lineRippleEl" })
              : _vm._e(),
            _vm._v(" "),
            _vm.outlined
              ? _c("mdc-notched-outline", { ref: "outlineEl" }, [
                  _vm._v(_vm._s(_vm.label))
                ])
              : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _vm.helptext
          ? _c(
              "select-helper-text",
              {
                ref: "helpertextEl",
                attrs: {
                  helptextPersistent: _vm.helptextPersistent,
                  helptextValidation: _vm.helptextValidation,
                  id: "help-" + _vm.vma_uid_
                }
              },
              [_vm._v("\n    " + _vm._s(_vm.helptext) + "\n  ")]
            )
          : _vm._e()
      ],
      1
    )
  };
  var __vue_staticRenderFns__$P = [];
  __vue_render__$P._withStripped = true;

    /* style */
    const __vue_inject_styles__$S = undefined;
    /* scoped */
    const __vue_scope_id__$S = undefined;
    /* module identifier */
    const __vue_module_identifier__$S = undefined;
    /* functional template */
    const __vue_is_functional_template__$S = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcSelect = normalizeComponent_1(
      { render: __vue_render__$P, staticRenderFns: __vue_staticRenderFns__$P },
      __vue_inject_styles__$S,
      __vue_script__$S,
      __vue_scope_id__$S,
      __vue_is_functional_template__$S,
      __vue_module_identifier__$S,
      undefined,
      undefined
    );

  var VueMDCSelect = BasePlugin({
    mdcSelect: mdcSelect
  });

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$j = {
    ACTIVE: 'mdc-slider--active',
    DISABLED: 'mdc-slider--disabled',
    DISCRETE: 'mdc-slider--discrete',
    FOCUS: 'mdc-slider--focus',
    HAS_TRACK_MARKER: 'mdc-slider--display-markers',
    IN_TRANSIT: 'mdc-slider--in-transit',
    IS_DISCRETE: 'mdc-slider--discrete'
  };
  var strings$j = {
    ARIA_DISABLED: 'aria-disabled',
    ARIA_VALUEMAX: 'aria-valuemax',
    ARIA_VALUEMIN: 'aria-valuemin',
    ARIA_VALUENOW: 'aria-valuenow',
    CHANGE_EVENT: 'MDCSlider:change',
    INPUT_EVENT: 'MDCSlider:input',
    LAST_TRACK_MARKER_SELECTOR: '.mdc-slider__track-marker:last-child',
    PIN_VALUE_MARKER_SELECTOR: '.mdc-slider__pin-value-marker',
    STEP_DATA_ATTR: 'data-step',
    THUMB_CONTAINER_SELECTOR: '.mdc-slider__thumb-container',
    TRACK_MARKER_CONTAINER_SELECTOR: '.mdc-slider__track-marker-container',
    TRACK_SELECTOR: '.mdc-slider__track'
  };
  var numbers$6 = {
    PAGE_FACTOR: 4
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var DOWN_EVENTS = ['mousedown', 'pointerdown', 'touchstart'];
  var UP_EVENTS = ['mouseup', 'pointerup', 'touchend'];
  var MOVE_EVENT_MAP = {
    mousedown: 'mousemove',
    pointerdown: 'pointermove',
    touchstart: 'touchmove'
  };
  var KEY_IDS = {
    ARROW_DOWN: 'ArrowDown',
    ARROW_LEFT: 'ArrowLeft',
    ARROW_RIGHT: 'ArrowRight',
    ARROW_UP: 'ArrowUp',
    END: 'End',
    HOME: 'Home',
    PAGE_DOWN: 'PageDown',
    PAGE_UP: 'PageUp'
  };

  var MDCSliderFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSliderFoundation, _super);

    function MDCSliderFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCSliderFoundation.defaultAdapter, adapter)) || this;
      /**
       * We set this to NaN since we want it to be a number, but we can't use '0' or '-1'
       * because those could be valid tabindices set by the client code.
       */


      _this.savedTabIndex_ = NaN;
      _this.active_ = false;
      _this.inTransit_ = false;
      _this.isDiscrete_ = false;
      _this.hasTrackMarker_ = false;
      _this.handlingThumbTargetEvt_ = false;
      _this.min_ = 0;
      _this.max_ = 100;
      _this.step_ = 0;
      _this.value_ = 0;
      _this.disabled_ = false;
      _this.preventFocusState_ = false;

      _this.thumbContainerPointerHandler_ = function () {
        return _this.handlingThumbTargetEvt_ = true;
      };

      _this.interactionStartHandler_ = function (evt) {
        return _this.handleDown_(evt);
      };

      _this.keydownHandler_ = function (evt) {
        return _this.handleKeydown_(evt);
      };

      _this.focusHandler_ = function () {
        return _this.handleFocus_();
      };

      _this.blurHandler_ = function () {
        return _this.handleBlur_();
      };

      _this.resizeHandler_ = function () {
        return _this.layout();
      };

      return _this;
    }

    Object.defineProperty(MDCSliderFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$j;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSliderFoundation, "strings", {
      get: function get() {
        return strings$j;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSliderFoundation, "numbers", {
      get: function get() {
        return numbers$6;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSliderFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          hasClass: function hasClass() {
            return false;
          },
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          getAttribute: function getAttribute() {
            return null;
          },
          setAttribute: function setAttribute() {
            return undefined;
          },
          removeAttribute: function removeAttribute() {
            return undefined;
          },
          computeBoundingRect: function computeBoundingRect() {
            return {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: 0,
              height: 0
            };
          },
          getTabIndex: function getTabIndex() {
            return 0;
          },
          registerInteractionHandler: function registerInteractionHandler() {
            return undefined;
          },
          deregisterInteractionHandler: function deregisterInteractionHandler() {
            return undefined;
          },
          registerThumbContainerInteractionHandler: function registerThumbContainerInteractionHandler() {
            return undefined;
          },
          deregisterThumbContainerInteractionHandler: function deregisterThumbContainerInteractionHandler() {
            return undefined;
          },
          registerBodyInteractionHandler: function registerBodyInteractionHandler() {
            return undefined;
          },
          deregisterBodyInteractionHandler: function deregisterBodyInteractionHandler() {
            return undefined;
          },
          registerResizeHandler: function registerResizeHandler() {
            return undefined;
          },
          deregisterResizeHandler: function deregisterResizeHandler() {
            return undefined;
          },
          notifyInput: function notifyInput() {
            return undefined;
          },
          notifyChange: function notifyChange() {
            return undefined;
          },
          setThumbContainerStyleProperty: function setThumbContainerStyleProperty() {
            return undefined;
          },
          setTrackStyleProperty: function setTrackStyleProperty() {
            return undefined;
          },
          setMarkerValue: function setMarkerValue() {
            return undefined;
          },
          appendTrackMarkers: function appendTrackMarkers() {
            return undefined;
          },
          removeTrackMarkers: function removeTrackMarkers() {
            return undefined;
          },
          setLastTrackMarkersStyleProperty: function setLastTrackMarkersStyleProperty() {
            return undefined;
          },
          isRTL: function isRTL() {
            return false;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCSliderFoundation.prototype.init = function () {
      var _this = this;

      this.isDiscrete_ = this.adapter_.hasClass(cssClasses$j.IS_DISCRETE);
      this.hasTrackMarker_ = this.adapter_.hasClass(cssClasses$j.HAS_TRACK_MARKER);
      DOWN_EVENTS.forEach(function (evtName) {
        _this.adapter_.registerInteractionHandler(evtName, _this.interactionStartHandler_);

        _this.adapter_.registerThumbContainerInteractionHandler(evtName, _this.thumbContainerPointerHandler_);
      });
      this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
      this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
      this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
      this.adapter_.registerResizeHandler(this.resizeHandler_);
      this.layout(); // At last step, provide a reasonable default value to discrete slider

      if (this.isDiscrete_ && this.getStep() === 0) {
        this.step_ = 1;
      }
    };

    MDCSliderFoundation.prototype.destroy = function () {
      var _this = this;

      DOWN_EVENTS.forEach(function (evtName) {
        _this.adapter_.deregisterInteractionHandler(evtName, _this.interactionStartHandler_);

        _this.adapter_.deregisterThumbContainerInteractionHandler(evtName, _this.thumbContainerPointerHandler_);
      });
      this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
      this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
      this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    };

    MDCSliderFoundation.prototype.setupTrackMarker = function () {
      if (this.isDiscrete_ && this.hasTrackMarker_ && this.getStep() !== 0) {
        var min = this.getMin();
        var max = this.getMax();
        var step = this.getStep();
        var numMarkers = (max - min) / step; // In case distance between max & min is indivisible to step,
        // we place the secondary to last marker proportionally at where thumb
        // could reach and place the last marker at max value

        var indivisible = Math.ceil(numMarkers) !== numMarkers;

        if (indivisible) {
          numMarkers = Math.ceil(numMarkers);
        }

        this.adapter_.removeTrackMarkers();
        this.adapter_.appendTrackMarkers(numMarkers);

        if (indivisible) {
          var lastStepRatio = (max - numMarkers * step) / step + 1;
          this.adapter_.setLastTrackMarkersStyleProperty('flex-grow', String(lastStepRatio));
        }
      }
    };

    MDCSliderFoundation.prototype.layout = function () {
      this.rect_ = this.adapter_.computeBoundingRect();
      this.updateUIForCurrentValue_();
    };

    MDCSliderFoundation.prototype.getValue = function () {
      return this.value_;
    };

    MDCSliderFoundation.prototype.setValue = function (value) {
      this.setValue_(value, false);
    };

    MDCSliderFoundation.prototype.getMax = function () {
      return this.max_;
    };

    MDCSliderFoundation.prototype.setMax = function (max) {
      if (max < this.min_) {
        throw new Error('Cannot set max to be less than the slider\'s minimum value');
      }

      this.max_ = max;
      this.setValue_(this.value_, false, true);
      this.adapter_.setAttribute(strings$j.ARIA_VALUEMAX, String(this.max_));
      this.setupTrackMarker();
    };

    MDCSliderFoundation.prototype.getMin = function () {
      return this.min_;
    };

    MDCSliderFoundation.prototype.setMin = function (min) {
      if (min > this.max_) {
        throw new Error('Cannot set min to be greater than the slider\'s maximum value');
      }

      this.min_ = min;
      this.setValue_(this.value_, false, true);
      this.adapter_.setAttribute(strings$j.ARIA_VALUEMIN, String(this.min_));
      this.setupTrackMarker();
    };

    MDCSliderFoundation.prototype.getStep = function () {
      return this.step_;
    };

    MDCSliderFoundation.prototype.setStep = function (step) {
      if (step < 0) {
        throw new Error('Step cannot be set to a negative number');
      }

      if (this.isDiscrete_ && (typeof step !== 'number' || step < 1)) {
        step = 1;
      }

      this.step_ = step;
      this.setValue_(this.value_, false, true);
      this.setupTrackMarker();
    };

    MDCSliderFoundation.prototype.isDisabled = function () {
      return this.disabled_;
    };

    MDCSliderFoundation.prototype.setDisabled = function (disabled) {
      this.disabled_ = disabled;
      this.toggleClass_(cssClasses$j.DISABLED, this.disabled_);

      if (this.disabled_) {
        this.savedTabIndex_ = this.adapter_.getTabIndex();
        this.adapter_.setAttribute(strings$j.ARIA_DISABLED, 'true');
        this.adapter_.removeAttribute('tabindex');
      } else {
        this.adapter_.removeAttribute(strings$j.ARIA_DISABLED);

        if (!isNaN(this.savedTabIndex_)) {
          this.adapter_.setAttribute('tabindex', String(this.savedTabIndex_));
        }
      }
    };
    /**
     * Called when the user starts interacting with the slider
     */


    MDCSliderFoundation.prototype.handleDown_ = function (downEvent) {
      var _this = this;

      if (this.disabled_) {
        return;
      }

      this.preventFocusState_ = true;
      this.setInTransit_(!this.handlingThumbTargetEvt_);
      this.handlingThumbTargetEvt_ = false;
      this.setActive_(true);

      var moveHandler = function moveHandler(moveEvent) {
        _this.handleMove_(moveEvent);
      };

      var moveEventType = MOVE_EVENT_MAP[downEvent.type]; // Note: upHandler is [de]registered on ALL potential pointer-related release event types, since some browsers
      // do not always fire these consistently in pairs.
      // (See https://github.com/material-components/material-components-web/issues/1192)

      var upHandler = function upHandler() {
        _this.handleUp_();

        _this.adapter_.deregisterBodyInteractionHandler(moveEventType, moveHandler);

        UP_EVENTS.forEach(function (evtName) {
          return _this.adapter_.deregisterBodyInteractionHandler(evtName, upHandler);
        });
      };

      this.adapter_.registerBodyInteractionHandler(moveEventType, moveHandler);
      UP_EVENTS.forEach(function (evtName) {
        return _this.adapter_.registerBodyInteractionHandler(evtName, upHandler);
      });
      this.setValueFromEvt_(downEvent);
    };
    /**
     * Called when the user moves the slider
     */


    MDCSliderFoundation.prototype.handleMove_ = function (evt) {
      evt.preventDefault();
      this.setValueFromEvt_(evt);
    };
    /**
     * Called when the user's interaction with the slider ends
     */


    MDCSliderFoundation.prototype.handleUp_ = function () {
      this.setActive_(false);
      this.adapter_.notifyChange();
    };
    /**
     * Returns the pageX of the event
     */


    MDCSliderFoundation.prototype.getPageX_ = function (evt) {
      if (evt.targetTouches && evt.targetTouches.length > 0) {
        return evt.targetTouches[0].pageX;
      }

      return evt.pageX;
    };
    /**
     * Sets the slider value from an event
     */


    MDCSliderFoundation.prototype.setValueFromEvt_ = function (evt) {
      var pageX = this.getPageX_(evt);
      var value = this.computeValueFromPageX_(pageX);
      this.setValue_(value, true);
    };
    /**
     * Computes the new value from the pageX position
     */


    MDCSliderFoundation.prototype.computeValueFromPageX_ = function (pageX) {
      var _a = this,
          max = _a.max_,
          min = _a.min_;

      var xPos = pageX - this.rect_.left;
      var pctComplete = xPos / this.rect_.width;

      if (this.adapter_.isRTL()) {
        pctComplete = 1 - pctComplete;
      } // Fit the percentage complete between the range [min,max]
      // by remapping from [0, 1] to [min, min+(max-min)].


      return min + pctComplete * (max - min);
    };
    /**
     * Handles keydown events
     */


    MDCSliderFoundation.prototype.handleKeydown_ = function (evt) {
      var keyId = this.getKeyId_(evt);
      var value = this.getValueForKeyId_(keyId);

      if (isNaN(value)) {
        return;
      } // Prevent page from scrolling due to key presses that would normally scroll the page


      evt.preventDefault();
      this.adapter_.addClass(cssClasses$j.FOCUS);
      this.setValue_(value, true);
      this.adapter_.notifyChange();
    };
    /**
     * Returns the computed name of the event
     */


    MDCSliderFoundation.prototype.getKeyId_ = function (kbdEvt) {
      if (kbdEvt.key === KEY_IDS.ARROW_LEFT || kbdEvt.keyCode === 37) {
        return KEY_IDS.ARROW_LEFT;
      }

      if (kbdEvt.key === KEY_IDS.ARROW_RIGHT || kbdEvt.keyCode === 39) {
        return KEY_IDS.ARROW_RIGHT;
      }

      if (kbdEvt.key === KEY_IDS.ARROW_UP || kbdEvt.keyCode === 38) {
        return KEY_IDS.ARROW_UP;
      }

      if (kbdEvt.key === KEY_IDS.ARROW_DOWN || kbdEvt.keyCode === 40) {
        return KEY_IDS.ARROW_DOWN;
      }

      if (kbdEvt.key === KEY_IDS.HOME || kbdEvt.keyCode === 36) {
        return KEY_IDS.HOME;
      }

      if (kbdEvt.key === KEY_IDS.END || kbdEvt.keyCode === 35) {
        return KEY_IDS.END;
      }

      if (kbdEvt.key === KEY_IDS.PAGE_UP || kbdEvt.keyCode === 33) {
        return KEY_IDS.PAGE_UP;
      }

      if (kbdEvt.key === KEY_IDS.PAGE_DOWN || kbdEvt.keyCode === 34) {
        return KEY_IDS.PAGE_DOWN;
      }

      return '';
    };
    /**
     * Computes the value given a keyboard key ID
     */


    MDCSliderFoundation.prototype.getValueForKeyId_ = function (keyId) {
      var _a = this,
          max = _a.max_,
          min = _a.min_,
          step = _a.step_;

      var delta = step || (max - min) / 100;
      var valueNeedsToBeFlipped = this.adapter_.isRTL() && (keyId === KEY_IDS.ARROW_LEFT || keyId === KEY_IDS.ARROW_RIGHT);

      if (valueNeedsToBeFlipped) {
        delta = -delta;
      }

      switch (keyId) {
        case KEY_IDS.ARROW_LEFT:
        case KEY_IDS.ARROW_DOWN:
          return this.value_ - delta;

        case KEY_IDS.ARROW_RIGHT:
        case KEY_IDS.ARROW_UP:
          return this.value_ + delta;

        case KEY_IDS.HOME:
          return this.min_;

        case KEY_IDS.END:
          return this.max_;

        case KEY_IDS.PAGE_UP:
          return this.value_ + delta * numbers$6.PAGE_FACTOR;

        case KEY_IDS.PAGE_DOWN:
          return this.value_ - delta * numbers$6.PAGE_FACTOR;

        default:
          return NaN;
      }
    };

    MDCSliderFoundation.prototype.handleFocus_ = function () {
      if (this.preventFocusState_) {
        return;
      }

      this.adapter_.addClass(cssClasses$j.FOCUS);
    };

    MDCSliderFoundation.prototype.handleBlur_ = function () {
      this.preventFocusState_ = false;
      this.adapter_.removeClass(cssClasses$j.FOCUS);
    };
    /**
     * Sets the value of the slider
     */


    MDCSliderFoundation.prototype.setValue_ = function (value, shouldFireInput, force) {
      if (force === void 0) {
        force = false;
      }

      if (value === this.value_ && !force) {
        return;
      }

      var _a = this,
          min = _a.min_,
          max = _a.max_;

      var valueSetToBoundary = value === min || value === max;

      if (this.step_ && !valueSetToBoundary) {
        value = this.quantize_(value);
      }

      if (value < min) {
        value = min;
      } else if (value > max) {
        value = max;
      }

      this.value_ = value;
      this.adapter_.setAttribute(strings$j.ARIA_VALUENOW, String(this.value_));
      this.updateUIForCurrentValue_();

      if (shouldFireInput) {
        this.adapter_.notifyInput();

        if (this.isDiscrete_) {
          this.adapter_.setMarkerValue(value);
        }
      }
    };
    /**
     * Calculates the quantized value
     */


    MDCSliderFoundation.prototype.quantize_ = function (value) {
      var numSteps = Math.round(value / this.step_);
      return numSteps * this.step_;
    };

    MDCSliderFoundation.prototype.updateUIForCurrentValue_ = function () {
      var _this = this;

      var _a = this,
          max = _a.max_,
          min = _a.min_,
          value = _a.value_;

      var pctComplete = (value - min) / (max - min);
      var translatePx = pctComplete * this.rect_.width;

      if (this.adapter_.isRTL()) {
        translatePx = this.rect_.width - translatePx;
      }

      var transformProp = getCorrectPropertyName(window, 'transform');
      var transitionendEvtName = getCorrectEventName(window, 'transitionend');

      if (this.inTransit_) {
        var onTransitionEnd_1 = function onTransitionEnd_1() {
          _this.setInTransit_(false);

          _this.adapter_.deregisterThumbContainerInteractionHandler(transitionendEvtName, onTransitionEnd_1);
        };

        this.adapter_.registerThumbContainerInteractionHandler(transitionendEvtName, onTransitionEnd_1);
      }

      requestAnimationFrame(function () {
        // NOTE(traviskaufman): It would be nice to use calc() here,
        // but IE cannot handle calcs in transforms correctly.
        // See: https://goo.gl/NC2itk
        // Also note that the -50% offset is used to center the slider thumb.
        _this.adapter_.setThumbContainerStyleProperty(transformProp, "translateX(" + translatePx + "px) translateX(-50%)");

        _this.adapter_.setTrackStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
      });
    };
    /**
     * Toggles the active state of the slider
     */


    MDCSliderFoundation.prototype.setActive_ = function (active) {
      this.active_ = active;
      this.toggleClass_(cssClasses$j.ACTIVE, this.active_);
    };
    /**
     * Toggles the inTransit state of the slider
     */


    MDCSliderFoundation.prototype.setInTransit_ = function (inTransit) {
      this.inTransit_ = inTransit;
      this.toggleClass_(cssClasses$j.IN_TRANSIT, this.inTransit_);
    };
    /**
     * Conditionally adds or removes a class based on shouldBePresent
     */


    MDCSliderFoundation.prototype.toggleClass_ = function (className, shouldBePresent) {
      if (shouldBePresent) {
        this.adapter_.addClass(className);
      } else {
        this.adapter_.removeClass(className);
      }
    };

    return MDCSliderFoundation;
  }(MDCFoundation);

  //
  var script$T = {
    name: 'mdc-slider',
    mixins: [DispatchFocusMixin],
    model: {
      prop: 'value',
      event: 'change'
    },
    props: {
      value: [Number, String],
      min: {
        type: [Number, String],
        default: 0
      },
      max: {
        type: [Number, String],
        default: 100
      },
      step: {
        type: [Number, String],
        default: 0
      },
      displayMarkers: Boolean,
      disabled: Boolean,
      layoutOn: String,
      layoutOnSource: {
        type: Object,
        required: false
      }
    },
    data: function data() {
      return {
        classes: {
          'mdc-slider--discrete': !!this.step,
          'mdc-slider--display-markers': this.displayMarkers
        },
        trackStyles: {},
        lastTrackMarkersStyles: {},
        thumbStyles: {},
        markerValue: '',
        numMarkers: 0
      };
    },
    computed: {
      isDiscrete: function isDiscrete() {
        return !!this.step;
      },
      hasMarkers: function hasMarkers() {
        return !!this.step && this.displayMarkers && this.numMarkers;
      }
    },
    watch: {
      value: function value() {
        if (this.foundation.getValue() !== Number(this.value)) {
          this.foundation.setValue(this.value);
        }
      },
      min: function min() {
        this.foundation.setMin(Number(this.min));
      },
      max: function max() {
        this.foundation.setMax(Number(this.max));
      },
      step: function step() {
        this.foundation.setStep(Number(this.step));
      },
      disabled: function disabled() {
        this.foundation.setDisabled(this.disabled);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCSliderFoundation({
        hasClass: function hasClass(className) {
          return _this.$el.classList.contains(className);
        },
        addClass: function addClass(className) {
          _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.classes, className, true);
        },
        getAttribute: function getAttribute(name) {
          return _this.$el.getAttribute(name);
        },
        setAttribute: function setAttribute(name, value) {
          return _this.$el.setAttribute(name, value);
        },
        removeAttribute: function removeAttribute(name) {
          return _this.$el.removeAttribute(name);
        },
        computeBoundingRect: function computeBoundingRect() {
          return _this.$el.getBoundingClientRect();
        },
        getTabIndex: function getTabIndex() {
          return _this.$el.tabIndex;
        },
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          _this.$el.addEventListener(type, handler, applyPassive());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          _this.$el.removeEventListener(type, handler, applyPassive());
        },
        registerThumbContainerInteractionHandler: function registerThumbContainerInteractionHandler(type, handler) {
          _this.$refs.thumbContainer.addEventListener(type, handler, applyPassive());
        },
        deregisterThumbContainerInteractionHandler: function deregisterThumbContainerInteractionHandler(type, handler) {
          _this.$refs.thumbContainer.removeEventListener(type, handler, applyPassive());
        },
        registerBodyInteractionHandler: function registerBodyInteractionHandler(type, handler) {
          document.body.addEventListener(type, handler);
        },
        deregisterBodyInteractionHandler: function deregisterBodyInteractionHandler(type, handler) {
          document.body.removeEventListener(type, handler);
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          window.removeEventListener('resize', handler);
        },
        notifyInput: function notifyInput() {
          _this.$emit('input', _this.foundation.getValue());
        },
        notifyChange: function notifyChange() {
          _this.$emit('change', _this.foundation.getValue());
        },
        setThumbContainerStyleProperty: function setThumbContainerStyleProperty(propertyName, value) {
          _this.$set(_this.thumbStyles, propertyName, value);
        },
        setTrackStyleProperty: function setTrackStyleProperty(propertyName, value) {
          _this.$set(_this.trackStyles, propertyName, value);
        },
        setMarkerValue: function setMarkerValue(value) {
          _this.markerValue = value;
        },
        appendTrackMarkers: function appendTrackMarkers(numMarkers) {
          _this.numMarkers = numMarkers;
        },
        removeTrackMarkers: function removeTrackMarkers() {
          _this.numMarkers = 0;
        },
        setLastTrackMarkersStyleProperty: function setLastTrackMarkersStyleProperty(propertyName, value) {
          _this.$set(_this.lastTrackMarkersStyles, propertyName, value);
        },
        isRTL: function isRTL() {
          return false;
        }
      });
      this.foundation.init();
      this.foundation.setDisabled(this.disabled);

      if (Number(this.min) <= this.foundation.getMax()) {
        this.foundation.setMin(Number(this.min));
        this.foundation.setMax(Number(this.max));
      } else {
        this.foundation.setMax(Number(this.max));
        this.foundation.setMin(Number(this.min));
      }

      this.foundation.setStep(Number(this.step));
      this.foundation.setValue(Number(this.value));

      if (this.hasMarkers) {
        this.foundation.setupTrackMarker();
      }

      this.$root.$on('vma:layout', this.layout);

      if (this.layoutOn) {
        this.layoutOnEventSource = this.layoutOnSource || this.$root;
        this.layoutOnEventSource.$on(this.layoutOn, this.layout);
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.$root.$off('vma:layout', this.layout);

      if (this.layoutOnEventSource) {
        this.layoutOnEventSource.$off(this.layoutOn, this.layout);
      }

      this.foundation.destroy();
    },
    methods: {
      layout: function layout() {
        var _this2 = this;

        this.$nextTick(function () {
          _this2.foundation && _this2.foundation.layout();
        });
      }
    }
  };

  /* script */
  const __vue_script__$T = script$T;

  /* template */
  var __vue_render__$Q = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mdc-slider",
        class: _vm.classes,
        attrs: { tabindex: "0", role: "slider" }
      },
      [
        _c("div", { staticClass: "mdc-slider__track-container" }, [
          _c("div", { staticClass: "mdc-slider__track", style: _vm.trackStyles }),
          _vm._v(" "),
          _vm.hasMarkers
            ? _c(
                "div",
                { staticClass: "mdc-slider__track-marker-container" },
                _vm._l(_vm.numMarkers, function(markerNum) {
                  return _c("div", {
                    key: markerNum,
                    staticClass: "mdc-slider__track-marker",
                    style:
                      markerNum == _vm.numMarkers
                        ? _vm.lastTrackMarkersStyles
                        : {}
                  })
                }),
                0
              )
            : _vm._e()
        ]),
        _vm._v(" "),
        _c(
          "div",
          {
            ref: "thumbContainer",
            staticClass: "mdc-slider__thumb-container",
            style: _vm.thumbStyles
          },
          [
            _vm.isDiscrete
              ? _c("div", { staticClass: "mdc-slider__pin" }, [
                  _c("span", { staticClass: "mdc-slider__pin-value-marker" }, [
                    _vm._v(_vm._s(_vm.markerValue))
                  ])
                ])
              : _vm._e(),
            _vm._v(" "),
            _c(
              "svg",
              {
                staticClass: "mdc-slider__thumb",
                attrs: { width: "21", height: "21" }
              },
              [_c("circle", { attrs: { cx: "10.5", cy: "10.5", r: "7.875" } })]
            ),
            _vm._v(" "),
            _c("div", { staticClass: "mdc-slider__focus-ring" })
          ]
        )
      ]
    )
  };
  var __vue_staticRenderFns__$Q = [];
  __vue_render__$Q._withStripped = true;

    /* style */
    const __vue_inject_styles__$T = undefined;
    /* scoped */
    const __vue_scope_id__$T = undefined;
    /* module identifier */
    const __vue_module_identifier__$T = undefined;
    /* functional template */
    const __vue_is_functional_template__$T = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcSlider = normalizeComponent_1(
      { render: __vue_render__$Q, staticRenderFns: __vue_staticRenderFns__$Q },
      __vue_inject_styles__$T,
      __vue_script__$T,
      __vue_scope_id__$T,
      __vue_is_functional_template__$T,
      __vue_module_identifier__$T,
      undefined,
      undefined
    );

  var VueMDCSlider = BasePlugin({
    mdcSlider: mdcSlider
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$k = {
    CLOSING: 'mdc-snackbar--closing',
    OPEN: 'mdc-snackbar--open',
    OPENING: 'mdc-snackbar--opening'
  };
  var strings$k = {
    ACTION_SELECTOR: '.mdc-snackbar__action',
    ARIA_LIVE_LABEL_TEXT_ATTR: 'data-mdc-snackbar-label-text',
    CLOSED_EVENT: 'MDCSnackbar:closed',
    CLOSING_EVENT: 'MDCSnackbar:closing',
    DISMISS_SELECTOR: '.mdc-snackbar__dismiss',
    LABEL_SELECTOR: '.mdc-snackbar__label',
    OPENED_EVENT: 'MDCSnackbar:opened',
    OPENING_EVENT: 'MDCSnackbar:opening',
    REASON_ACTION: 'action',
    REASON_DISMISS: 'dismiss',
    SURFACE_SELECTOR: '.mdc-snackbar__surface'
  };
  var numbers$7 = {
    DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5000,
    MAX_AUTO_DISMISS_TIMEOUT_MS: 10000,
    MIN_AUTO_DISMISS_TIMEOUT_MS: 4000,
    // These variables need to be kept in sync with the values in _variables.scss.
    SNACKBAR_ANIMATION_CLOSE_TIME_MS: 75,
    SNACKBAR_ANIMATION_OPEN_TIME_MS: 150,

    /**
     * Number of milliseconds to wait between temporarily clearing the label text
     * in the DOM and subsequently restoring it. This is necessary to force IE 11
     * to pick up the `aria-live` content change and announce it to the user.
     */
    ARIA_LIVE_DELAY_MS: 1000
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var OPENING = cssClasses$k.OPENING,
      OPEN = cssClasses$k.OPEN,
      CLOSING = cssClasses$k.CLOSING;
  var REASON_ACTION = strings$k.REASON_ACTION,
      REASON_DISMISS = strings$k.REASON_DISMISS;

  var MDCSnackbarFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSnackbarFoundation, _super);

    function MDCSnackbarFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCSnackbarFoundation.defaultAdapter, adapter)) || this;

      _this.isOpen_ = false;
      _this.animationFrame_ = 0;
      _this.animationTimer_ = 0;
      _this.autoDismissTimer_ = 0;
      _this.autoDismissTimeoutMs_ = numbers$7.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;
      _this.closeOnEscape_ = true;
      return _this;
    }

    Object.defineProperty(MDCSnackbarFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$k;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSnackbarFoundation, "strings", {
      get: function get() {
        return strings$k;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSnackbarFoundation, "numbers", {
      get: function get() {
        return numbers$7;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSnackbarFoundation, "defaultAdapter", {
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          announce: function announce() {
            return undefined;
          },
          notifyClosed: function notifyClosed() {
            return undefined;
          },
          notifyClosing: function notifyClosing() {
            return undefined;
          },
          notifyOpened: function notifyOpened() {
            return undefined;
          },
          notifyOpening: function notifyOpening() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });

    MDCSnackbarFoundation.prototype.destroy = function () {
      this.clearAutoDismissTimer_();
      cancelAnimationFrame(this.animationFrame_);
      this.animationFrame_ = 0;
      clearTimeout(this.animationTimer_);
      this.animationTimer_ = 0;
      this.adapter_.removeClass(OPENING);
      this.adapter_.removeClass(OPEN);
      this.adapter_.removeClass(CLOSING);
    };

    MDCSnackbarFoundation.prototype.open = function () {
      var _this = this;

      this.clearAutoDismissTimer_();
      this.isOpen_ = true;
      this.adapter_.notifyOpening();
      this.adapter_.removeClass(CLOSING);
      this.adapter_.addClass(OPENING);
      this.adapter_.announce(); // Wait a frame once display is no longer "none", to establish basis for animation

      this.runNextAnimationFrame_(function () {
        _this.adapter_.addClass(OPEN);

        _this.animationTimer_ = setTimeout(function () {
          _this.handleAnimationTimerEnd_();

          _this.adapter_.notifyOpened();

          _this.autoDismissTimer_ = setTimeout(function () {
            _this.close(REASON_DISMISS);
          }, _this.getTimeoutMs());
        }, numbers$7.SNACKBAR_ANIMATION_OPEN_TIME_MS);
      });
    };
    /**
     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
     *     client-specific values may also be used if desired.
     */


    MDCSnackbarFoundation.prototype.close = function (reason) {
      var _this = this;

      if (reason === void 0) {
        reason = '';
      }

      if (!this.isOpen_) {
        // Avoid redundant close calls (and events), e.g. repeated interactions as the snackbar is animating closed
        return;
      }

      cancelAnimationFrame(this.animationFrame_);
      this.animationFrame_ = 0;
      this.clearAutoDismissTimer_();
      this.isOpen_ = false;
      this.adapter_.notifyClosing(reason);
      this.adapter_.addClass(cssClasses$k.CLOSING);
      this.adapter_.removeClass(cssClasses$k.OPEN);
      this.adapter_.removeClass(cssClasses$k.OPENING);
      clearTimeout(this.animationTimer_);
      this.animationTimer_ = setTimeout(function () {
        _this.handleAnimationTimerEnd_();

        _this.adapter_.notifyClosed(reason);
      }, numbers$7.SNACKBAR_ANIMATION_CLOSE_TIME_MS);
    };

    MDCSnackbarFoundation.prototype.isOpen = function () {
      return this.isOpen_;
    };

    MDCSnackbarFoundation.prototype.getTimeoutMs = function () {
      return this.autoDismissTimeoutMs_;
    };

    MDCSnackbarFoundation.prototype.setTimeoutMs = function (timeoutMs) {
      // Use shorter variable names to make the code more readable
      var minValue = numbers$7.MIN_AUTO_DISMISS_TIMEOUT_MS;
      var maxValue = numbers$7.MAX_AUTO_DISMISS_TIMEOUT_MS;

      if (timeoutMs <= maxValue && timeoutMs >= minValue) {
        this.autoDismissTimeoutMs_ = timeoutMs;
      } else {
        throw new Error("timeoutMs must be an integer in the range " + minValue + "\u2013" + maxValue + ", but got '" + timeoutMs + "'");
      }
    };

    MDCSnackbarFoundation.prototype.getCloseOnEscape = function () {
      return this.closeOnEscape_;
    };

    MDCSnackbarFoundation.prototype.setCloseOnEscape = function (closeOnEscape) {
      this.closeOnEscape_ = closeOnEscape;
    };

    MDCSnackbarFoundation.prototype.handleKeyDown = function (evt) {
      var isEscapeKey = evt.key === 'Escape' || evt.keyCode === 27;

      if (isEscapeKey && this.getCloseOnEscape()) {
        this.close(REASON_DISMISS);
      }
    };

    MDCSnackbarFoundation.prototype.handleActionButtonClick = function (_evt) {
      this.close(REASON_ACTION);
    };

    MDCSnackbarFoundation.prototype.handleActionIconClick = function (_evt) {
      this.close(REASON_DISMISS);
    };

    MDCSnackbarFoundation.prototype.clearAutoDismissTimer_ = function () {
      clearTimeout(this.autoDismissTimer_);
      this.autoDismissTimer_ = 0;
    };

    MDCSnackbarFoundation.prototype.handleAnimationTimerEnd_ = function () {
      this.animationTimer_ = 0;
      this.adapter_.removeClass(cssClasses$k.OPENING);
      this.adapter_.removeClass(cssClasses$k.CLOSING);
    };
    /**
     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
     */


    MDCSnackbarFoundation.prototype.runNextAnimationFrame_ = function (callback) {
      var _this = this;

      cancelAnimationFrame(this.animationFrame_);
      this.animationFrame_ = requestAnimationFrame(function () {
        _this.animationFrame_ = 0;
        clearTimeout(_this.animationTimer_);
        _this.animationTimer_ = setTimeout(callback, 0);
      });
    };

    return MDCSnackbarFoundation;
  }(MDCFoundation);

  //
  var script$U = {
    name: 'mdc-snackbar',
    model: {
      prop: 'open',
      event: 'change'
    },
    props: {
      open: Boolean,
      stacked: Boolean,
      leading: Boolean,
      labelText: String,
      actionText: String,
      timeoutMs: [String, Number],
      dismissAction: {
        type: [String, Boolean],
        default: true
      }
    },
    data: function data() {
      return {
        classes: {
          'mdc-snackbar--leading': this.leading,
          'mdc-snackbar--stacked': this.stacked
        },
        hidden: false,
        actionHidden: false,
        showLabelText: true
      };
    },
    watch: {
      open: 'onOpen_',
      timeoutMs: 'onTimeoutMs_'
    },
    mounted: function mounted() {
      var _this = this;

      window.addEventListener('keydown', this.handleKeydownEvent);
      this.foundation = new MDCSnackbarFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        announce: function announce() {
          return _this.announce(_this.$refs.labelEl);
        },
        notifyOpening: function notifyOpening() {
          return _this.$emit(MDCSnackbarFoundation.strings.OPENING_EVENT, {});
        },
        notifyOpened: function notifyOpened() {
          _this.$emit(MDCSnackbarFoundation.strings.OPENED_EVENT, {});

          _this.$emit('change', true);

          _this.$emit('show', {});
        },
        notifyClosing: function notifyClosing(reason) {
          return _this.$emit(MDCSnackbarFoundation.strings.CLOSING_EVENT, reason ? {
            reason: reason
          } : {});
        },
        notifyClosed: function notifyClosed(reason) {
          _this.$emit(MDCSnackbarFoundation.strings.CLOSED_EVENT, reason ? {
            reason: reason
          } : {});

          _this.$emit('change', false);

          _this.$emit('hide');
        }
      });
      this.foundation.init();

      if (this.timeoutMs !== void 0) {
        this.foundation.setTimeoutMs(this.timeoutMs);
      }
    },
    computed: {
      showDismissAction: function showDismissAction() {
        return typeof this.dismissAction === 'string' ? this.dismissAction != 'false' : this.dismissAction;
      }
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener('keydown', this.handleKeydownEvent);
      this.foundation.destroy();
    },
    methods: {
      onTimeoutMs_: function onTimeoutMs_(value) {
        if (value !== void 0) {
          this.foundation.setTimeoutMs(value);
        }
      },
      onOpen_: function onOpen_(value) {
        if (value) {
          this.foundation.open();
        } else {
          this.foundation.close();
        }
      },
      surfaceClickHandler: function surfaceClickHandler(evt) {
        if (this.isActionButton_(evt.target)) {
          this.foundation.handleActionButtonClick(evt);
        } else if (this.isActionIcon_(evt.target)) {
          this.foundation.handleActionIconClick(evt);
        }
      },
      handleKeydownEvent: function handleKeydownEvent(evt) {
        this.foundation.handleKeyDown(evt);
      },
      isActionButton_: function isActionButton_(target) {
        return Boolean(closest(target, MDCSnackbarFoundation.strings.ACTION_SELECTOR));
      },
      isActionIcon_: function isActionIcon_(target) {
        return Boolean(closest(target, MDCSnackbarFoundation.strings.DISMISS_SELECTOR));
      },
      announce: function announce(ariaEl) {
        var _this2 = this;

        var labelEl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ariaEl;
        var priority = ariaEl.getAttribute('aria-live');
        var text = this.labelText;

        if (!text) {
          return;
        } // Temporarily disable `aria-live` to prevent JAWS+Firefox from announcing the message twice.


        ariaEl.setAttribute('aria-live', 'off'); // Temporarily clear `textContent` to force a DOM mutation event that will be detected by screen readers.
        // `aria-live` elements are only announced when the element's `textContent` *changes*, so snackbars
        // sent to the browser in the initial HTML response won't be read unless we clear the element's `textContent` first.
        // Similarly, displaying the same snackbar message twice in a row doesn't trigger a DOM mutation event,
        // so screen readers won't announce the second message unless we first clear `textContent`.
        //
        // We have to clear the label text two different ways to make it work in all browsers and screen readers:
        //
        //   1. `textContent = ''` is required for IE11 + JAWS
        //   2. `innerHTML = '&nbsp;'` is required for Chrome + JAWS and NVDA
        //
        // All other browser/screen reader combinations support both methods.
        //
        // The wrapper `<span>` visually hides the space character so that it doesn't cause jank when added/removed.
        // N.B.: Setting `position: absolute`, `opacity: 0`, or `height: 0` prevents Chrome from detecting the DOM change.
        //
        // This technique has been tested in:
        //
        //   * JAWS 2019:
        //       - Chrome 70
        //       - Firefox 60 (ESR)
        //       - IE 11
        //   * NVDA 2018:
        //       - Chrome 70
        //       - Firefox 60 (ESR)
        //       - IE 11
        //   * ChromeVox 53

        this.showLabelText = false; // Prevent visual jank by temporarily displaying the label text in the ::before pseudo-element.
        // CSS generated content is normally announced by screen readers
        // (except in IE 11; see https://tink.uk/accessibility-support-for-css-generated-content/);
        // however, `aria-live` is turned off, so this DOM update will be ignored by screen readers.

        labelEl.setAttribute(MDCSnackbarFoundation.strings.ARIA_LIVE_LABEL_TEXT_ATTR, this.labelText);
        setTimeout(function () {
          // Allow screen readers to announce changes to the DOM again.
          ariaEl.setAttribute('aria-live', priority); // Remove the message from the ::before pseudo-element.

          labelEl.removeAttribute(MDCSnackbarFoundation.strings.ARIA_LIVE_LABEL_TEXT_ATTR); // Restore the original label text, which will be announced by screen readers.

          _this2.showLabelText = true;
        }, MDCSnackbarFoundation.numbers.ARIA_LIVE_DELAY_MS);
      }
    }
  };

  /* script */
  const __vue_script__$U = script$U;

  /* template */
  var __vue_render__$R = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { ref: "root", staticClass: "mdc-snackbar", class: _vm.classes },
      [
        _c(
          "div",
          {
            staticClass: "mdc-snackbar__surface",
            on: { click: _vm.surfaceClickHandler }
          },
          [
            _c(
              "div",
              {
                ref: "labelEl",
                staticClass: "mdc-snackbar__label",
                attrs: { role: "status", "aria-live": "polite" }
              },
              [
                _vm.showLabelText
                  ? [_vm._v("\n        " + _vm._s(_vm.labelText) + "\n      ")]
                  : _c(
                      "span",
                      {
                        staticStyle: {
                          display: "inline-block",
                          width: "0",
                          height: "1px"
                        }
                      },
                      [_vm._v(" ")]
                    )
              ],
              2
            ),
            _vm._v(" "),
            _vm.showDismissAction || _vm.actionText
              ? _c("div", { staticClass: "mdc-snackbar__actions" }, [
                  _vm.actionText
                    ? _c(
                        "button",
                        _vm._g(
                          {
                            ref: "actionEl",
                            staticClass: "mdc-button mdc-snackbar__action",
                            attrs: { type: "button" }
                          },
                          _vm.$listeners
                        ),
                        [
                          _vm._v(
                            "\n        " + _vm._s(_vm.actionText) + "\n      "
                          )
                        ]
                      )
                    : _vm._e(),
                  _vm._v(" "),
                  _vm.showDismissAction
                    ? _c(
                        "button",
                        {
                          staticClass:
                            "mdc-icon-button mdc-snackbar__dismiss material-icons",
                          attrs: { title: "Dismiss" }
                        },
                        [_vm._v("\n        close\n      ")]
                      )
                    : _vm._e()
                ])
              : _vm._e()
          ]
        )
      ]
    )
  };
  var __vue_staticRenderFns__$R = [];
  __vue_render__$R._withStripped = true;

    /* style */
    const __vue_inject_styles__$U = undefined;
    /* scoped */
    const __vue_scope_id__$U = undefined;
    /* module identifier */
    const __vue_module_identifier__$U = undefined;
    /* functional template */
    const __vue_is_functional_template__$U = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcSnackbar = normalizeComponent_1(
      { render: __vue_render__$R, staticRenderFns: __vue_staticRenderFns__$R },
      __vue_inject_styles__$U,
      __vue_script__$U,
      __vue_scope_id__$U,
      __vue_is_functional_template__$U,
      __vue_module_identifier__$U,
      undefined,
      undefined
    );

  var VueMDCSnackbar = BasePlugin({
    mdcSnackbar: mdcSnackbar
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /** CSS classes used by the switch. */
  var cssClasses$l = {
    /** Class used for a switch that is in the "checked" (on) position. */
    CHECKED: 'mdc-switch--checked',

    /** Class used for a switch that is disabled. */
    DISABLED: 'mdc-switch--disabled'
  };
  /** String constants used by the switch. */

  var strings$l = {
    /** A CSS selector used to locate the native HTML control for the switch.  */
    NATIVE_CONTROL_SELECTOR: '.mdc-switch__native-control',

    /** A CSS selector used to locate the ripple surface element for the switch. */
    RIPPLE_SURFACE_SELECTOR: '.mdc-switch__thumb-underlay'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * Foundation for the MDC Switch. Encapsulates business logic for the switch.
   *
   * See architecture documentation for more details.
   * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
   */

  var MDCSwitchFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSwitchFoundation, _super);

    function MDCSwitchFoundation(adapter) {
      return _super.call(this, _assign({}, MDCSwitchFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCSwitchFoundation, "strings", {
      /** The string constants used by the switch. */
      get: function get() {
        return strings$l;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation, "cssClasses", {
      /** The CSS classes used by the switch. */
      get: function get() {
        return cssClasses$l;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation, "defaultAdapter", {
      /** The default Adapter for the switch. */
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          setNativeControlChecked: function setNativeControlChecked() {
            return undefined;
          },
          setNativeControlDisabled: function setNativeControlDisabled() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });
    /** Sets the checked state of the switch. */

    MDCSwitchFoundation.prototype.setChecked = function (checked) {
      this.adapter_.setNativeControlChecked(checked);
      this.updateCheckedStyling_(checked);
    };
    /** Sets the disabled state of the switch. */


    MDCSwitchFoundation.prototype.setDisabled = function (disabled) {
      this.adapter_.setNativeControlDisabled(disabled);

      if (disabled) {
        this.adapter_.addClass(cssClasses$l.DISABLED);
      } else {
        this.adapter_.removeClass(cssClasses$l.DISABLED);
      }
    };
    /** Handles the change event for the switch native control. */


    MDCSwitchFoundation.prototype.handleChange = function (evt) {
      var nativeControl = evt.target;
      this.updateCheckedStyling_(nativeControl.checked);
    };
    /** Updates the styling of the switch based on its checked state. */


    MDCSwitchFoundation.prototype.updateCheckedStyling_ = function (checked) {
      if (checked) {
        this.adapter_.addClass(cssClasses$l.CHECKED);
      } else {
        this.adapter_.removeClass(cssClasses$l.CHECKED);
      }
    };

    return MDCSwitchFoundation;
  }(MDCFoundation);

  //
  var script$V = {
    name: 'mdc-switch',
    mixins: [DispatchFocusMixin, VMAUniqueIdMixin],
    model: {
      prop: 'checked',
      event: 'change'
    },
    props: {
      checked: Boolean,
      disabled: Boolean,
      value: String,
      label: String,
      alignEnd: Boolean,
      name: String
    },
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    computed: {
      hasLabel: function hasLabel() {
        return this.label || this.$slots.default;
      }
    },
    watch: {
      checked: function checked(value) {
        this.foundation && this.foundation.setChecked(value);
      },
      disabled: function disabled(value) {
        this.foundation && this.foundation.setDisabled(value);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCSwitchFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        setNativeControlChecked: function setNativeControlChecked(checked) {
          return _this.$refs.control.checked = checked;
        },
        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
          return _this.$refs.control.disabled = disabled;
        }
      });
      this.foundation.init();
      this.foundation.setChecked(this.checked);
      this.foundation.setDisabled(this.disabled);
      this.ripple = new RippleBase(this);
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation && this.foundation.destroy();
      this.ripple && this.ripple.destroy();
    },
    methods: {
      onChanged: function onChanged(event) {
        this.foundation && this.foundation.handleChange(event);
        this.$emit('change', event.target.checked);
      }
    }
  };

  /* script */
  const __vue_script__$V = script$V;

  /* template */
  var __vue_render__$S = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mdc-switch-wrapper",
        class: {
          "mdc-form-field": _vm.hasLabel,
          "mdc-form-field--align-end": _vm.hasLabel && _vm.alignEnd
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "mdc-switch",
            class: _vm.classes,
            attrs: { styles: _vm.styles }
          },
          [
            _c("div", { staticClass: "mdc-switch__track" }),
            _vm._v(" "),
            _c("div", { staticClass: "mdc-switch__thumb-underlay" }, [
              _c("div", { staticClass: "mdc-switch__thumb" }, [
                _c("input", {
                  ref: "control",
                  staticClass: "mdc-switch__native-control",
                  attrs: {
                    name: _vm.name,
                    id: _vm.vma_uid_,
                    type: "checkbox",
                    role: "switch"
                  },
                  domProps: { value: _vm.value },
                  on: { change: _vm.onChanged }
                })
              ])
            ])
          ]
        ),
        _vm._v(" "),
        _vm.hasLabel
          ? _c(
              "label",
              { staticClass: "mdc-switch-label", attrs: { for: _vm.vma_uid_ } },
              [_vm._t("default", [_vm._v(_vm._s(_vm.label))])],
              2
            )
          : _vm._e()
      ]
    )
  };
  var __vue_staticRenderFns__$S = [];
  __vue_render__$S._withStripped = true;

    /* style */
    const __vue_inject_styles__$V = undefined;
    /* scoped */
    const __vue_scope_id__$V = undefined;
    /* module identifier */
    const __vue_module_identifier__$V = undefined;
    /* functional template */
    const __vue_is_functional_template__$V = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcSwitch = normalizeComponent_1(
      { render: __vue_render__$S, staticRenderFns: __vue_staticRenderFns__$S },
      __vue_inject_styles__$V,
      __vue_script__$V,
      __vue_scope_id__$V,
      __vue_is_functional_template__$V,
      __vue_module_identifier__$V,
      undefined,
      undefined
    );

  var VueMDCSwitch = BasePlugin({
    mdcSwitch: mdcSwitch
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$m = {
    ACTIVE: 'mdc-tab--active'
  };
  var strings$m = {
    ARIA_SELECTED: 'aria-selected',
    CONTENT_SELECTOR: '.mdc-tab__content',
    INTERACTED_EVENT: 'MDCTab:interacted',
    RIPPLE_SELECTOR: '.mdc-tab__ripple',
    TABINDEX: 'tabIndex',
    TAB_INDICATOR_SELECTOR: '.mdc-tab-indicator'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTabFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTabFoundation, _super);

    function MDCTabFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCTabFoundation.defaultAdapter, adapter)) || this;

      _this.focusOnActivate_ = true;
      return _this;
    }

    Object.defineProperty(MDCTabFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$m;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabFoundation, "strings", {
      get: function get() {
        return strings$m;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          setAttr: function setAttr() {
            return undefined;
          },
          activateIndicator: function activateIndicator() {
            return undefined;
          },
          deactivateIndicator: function deactivateIndicator() {
            return undefined;
          },
          notifyInteracted: function notifyInteracted() {
            return undefined;
          },
          getOffsetLeft: function getOffsetLeft() {
            return 0;
          },
          getOffsetWidth: function getOffsetWidth() {
            return 0;
          },
          getContentOffsetLeft: function getContentOffsetLeft() {
            return 0;
          },
          getContentOffsetWidth: function getContentOffsetWidth() {
            return 0;
          },
          focus: function focus() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCTabFoundation.prototype.handleClick = function () {
      // It's up to the parent component to keep track of the active Tab and
      // ensure we don't activate a Tab that's already active.
      this.adapter_.notifyInteracted();
    };

    MDCTabFoundation.prototype.isActive = function () {
      return this.adapter_.hasClass(cssClasses$m.ACTIVE);
    };
    /**
     * Sets whether the tab should focus itself when activated
     */


    MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {
      this.focusOnActivate_ = focusOnActivate;
    };
    /**
     * Activates the Tab
     */


    MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {
      this.adapter_.addClass(cssClasses$m.ACTIVE);
      this.adapter_.setAttr(strings$m.ARIA_SELECTED, 'true');
      this.adapter_.setAttr(strings$m.TABINDEX, '0');
      this.adapter_.activateIndicator(previousIndicatorClientRect);

      if (this.focusOnActivate_) {
        this.adapter_.focus();
      }
    };
    /**
     * Deactivates the Tab
     */


    MDCTabFoundation.prototype.deactivate = function () {
      // Early exit
      if (!this.isActive()) {
        return;
      }

      this.adapter_.removeClass(cssClasses$m.ACTIVE);
      this.adapter_.setAttr(strings$m.ARIA_SELECTED, 'false');
      this.adapter_.setAttr(strings$m.TABINDEX, '-1');
      this.adapter_.deactivateIndicator();
    };
    /**
     * Returns the dimensions of the Tab
     */


    MDCTabFoundation.prototype.computeDimensions = function () {
      var rootWidth = this.adapter_.getOffsetWidth();
      var rootLeft = this.adapter_.getOffsetLeft();
      var contentWidth = this.adapter_.getContentOffsetWidth();
      var contentLeft = this.adapter_.getContentOffsetLeft();
      return {
        contentLeft: rootLeft + contentLeft,
        contentRight: rootLeft + contentLeft + contentWidth,
        rootLeft: rootLeft,
        rootRight: rootLeft + rootWidth
      };
    };

    return MDCTabFoundation;
  }(MDCFoundation);

  //
  var script$W = {
    name: 'mdc-tab',
    mixins: [CustomLinkMixin, DispatchEventMixin, VMAUniqueIdMixin],
    props: {
      active: Boolean,
      icon: [String, Array, Object],
      stacked: Boolean,
      minWidth: Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-tab--stacked': this.stacked,
          'mdc-tab--min-width': this.minWidth
        },
        styles: {}
      };
    },
    inject: ['mdcTabBar'],
    computed: {
      hasIcon: function hasIcon() {
        if (this.icon || this.$slots.icon) {
          return this.icon ? extractIconProp(this.icon) : {};
        }

        return false;
      },
      hasText: function hasText() {
        return !!this.$slots.default;
      }
    },
    watch: {
      active: function active(value) {}
    },
    mounted: function mounted() {
      var _this = this;

      this.id = this.vma_uid_;
      this.foundation = new MDCTabFoundation({
        setAttr: function setAttr(attr, value) {
          return _this.$el.setAttribute(attr, value);
        },
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return _this.$el.classList.contains(className);
        },
        activateIndicator: function activateIndicator(previousIndicatorClientRect) {
          _this.$refs.tabIndicator.activate(previousIndicatorClientRect);
        },
        deactivateIndicator: function deactivateIndicator() {
          _this.$refs.tabIndicator.deactivate();
        },
        notifyInteracted: function notifyInteracted() {
          return emitCustomEvent(_this.$el, MDCTabFoundation.strings.INTERACTED_EVENT, {
            tabId: _this.id
          }, true
          /* bubble */
          );
        },
        getOffsetLeft: function getOffsetLeft() {
          return _this.$el.offsetLeft;
        },
        getOffsetWidth: function getOffsetWidth() {
          return _this.$el.offsetWidth;
        },
        getContentOffsetLeft: function getContentOffsetLeft() {
          return _this.$refs.content.offsetLeft;
        },
        getContentOffsetWidth: function getContentOffsetWidth() {
          return _this.$refs.content.offsetWidth;
        },
        focus: function focus() {
          return _this.$el.focus();
        }
      });
      this.foundation.init(); // console.log('tab mounted')

      this.mdcTabBar.tabList.push(this); // this.setActive(this.active)
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    },
    methods: {
      activate: function activate(computeIndicatorClientRect) {
        this.foundation.activate(computeIndicatorClientRect);
      },
      deactivate: function deactivate() {
        this.foundation.deactivate();
      },
      handleClick: function handleClick(evt) {
        this.foundation.handleClick(evt);
      },
      isActive: function isActive() {
        return this.foundation.isActive();
      },
      setActive: function setActive(isActive) {
        if (isActive) {
          this.$set(this.classes, 'mdc-tab--active', true), this.$refs.tabIndicator.activate();
        }
      },
      computeIndicatorClientRect: function computeIndicatorClientRect() {
        return this.$refs.tabIndicator.computeContentClientRect();
      },
      computeDimensions: function computeDimensions() {
        return this.foundation.computeDimensions();
      },
      focus: function focus() {
        this.$el.focus();
      }
    }
  };

  /* script */
  const __vue_script__$W = script$W;

  /* template */
  var __vue_render__$T = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-link",
      {
        staticClass: "mdc-tab",
        class: _vm.classes,
        style: _vm.styles,
        attrs: {
          link: _vm.link,
          role: "tab",
          "aria-selected": "false",
          tabindex: "-1"
        },
        on: { click: _vm.handleClick }
      },
      [
        _c("span", { ref: "content", staticClass: "mdc-tab__content" }, [
          !!_vm.hasIcon
            ? _c(
                "i",
                {
                  ref: "icon",
                  staticClass: "mdc-tab__icon",
                  class: _vm.hasIcon.classes,
                  attrs: { tabindex: "0", "aria-hidden": "true" }
                },
                [_vm._t("icon", [_vm._v(_vm._s(_vm.hasIcon.content))])],
                2
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.hasText
            ? _c(
                "span",
                { staticClass: "mdc-tab__text-label" },
                [_vm._t("default")],
                2
              )
            : _vm._e()
        ]),
        _vm._v(" "),
        _c("mdc-tab-indicator", { ref: "tabIndicator" }),
        _vm._v(" "),
        _c("mdc-tab-ripple")
      ],
      1
    )
  };
  var __vue_staticRenderFns__$T = [];
  __vue_render__$T._withStripped = true;

    /* style */
    const __vue_inject_styles__$W = undefined;
    /* scoped */
    const __vue_scope_id__$W = undefined;
    /* module identifier */
    const __vue_module_identifier__$W = undefined;
    /* functional template */
    const __vue_is_functional_template__$W = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTab = normalizeComponent_1(
      { render: __vue_render__$T, staticRenderFns: __vue_staticRenderFns__$T },
      __vue_inject_styles__$W,
      __vue_script__$W,
      __vue_scope_id__$W,
      __vue_is_functional_template__$W,
      __vue_module_identifier__$W,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$n = {
    ARROW_LEFT_KEY: 'ArrowLeft',
    ARROW_RIGHT_KEY: 'ArrowRight',
    END_KEY: 'End',
    ENTER_KEY: 'Enter',
    HOME_KEY: 'Home',
    SPACE_KEY: 'Space',
    TAB_ACTIVATED_EVENT: 'MDCTabBar:activated',
    TAB_SCROLLER_SELECTOR: '.mdc-tab-scroller',
    TAB_SELECTOR: '.mdc-tab'
  };
  var numbers$8 = {
    ARROW_LEFT_KEYCODE: 37,
    ARROW_RIGHT_KEYCODE: 39,
    END_KEYCODE: 35,
    ENTER_KEYCODE: 13,
    EXTRA_SCROLL_AMOUNT: 20,
    HOME_KEYCODE: 36,
    SPACE_KEYCODE: 32
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var ACCEPTABLE_KEYS = new Set(); // IE11 has no support for new Set with iterable so we need to initialize this by hand

  ACCEPTABLE_KEYS.add(strings$n.ARROW_LEFT_KEY);
  ACCEPTABLE_KEYS.add(strings$n.ARROW_RIGHT_KEY);
  ACCEPTABLE_KEYS.add(strings$n.END_KEY);
  ACCEPTABLE_KEYS.add(strings$n.HOME_KEY);
  ACCEPTABLE_KEYS.add(strings$n.ENTER_KEY);
  ACCEPTABLE_KEYS.add(strings$n.SPACE_KEY);
  var KEYCODE_MAP = new Map(); // IE11 has no support for new Map with iterable so we need to initialize this by hand

  KEYCODE_MAP.set(numbers$8.ARROW_LEFT_KEYCODE, strings$n.ARROW_LEFT_KEY);
  KEYCODE_MAP.set(numbers$8.ARROW_RIGHT_KEYCODE, strings$n.ARROW_RIGHT_KEY);
  KEYCODE_MAP.set(numbers$8.END_KEYCODE, strings$n.END_KEY);
  KEYCODE_MAP.set(numbers$8.HOME_KEYCODE, strings$n.HOME_KEY);
  KEYCODE_MAP.set(numbers$8.ENTER_KEYCODE, strings$n.ENTER_KEY);
  KEYCODE_MAP.set(numbers$8.SPACE_KEYCODE, strings$n.SPACE_KEY);

  var MDCTabBarFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTabBarFoundation, _super);

    function MDCTabBarFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCTabBarFoundation.defaultAdapter, adapter)) || this;

      _this.useAutomaticActivation_ = false;
      return _this;
    }

    Object.defineProperty(MDCTabBarFoundation, "strings", {
      get: function get() {
        return strings$n;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabBarFoundation, "numbers", {
      get: function get() {
        return numbers$8;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabBarFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          scrollTo: function scrollTo() {
            return undefined;
          },
          incrementScroll: function incrementScroll() {
            return undefined;
          },
          getScrollPosition: function getScrollPosition() {
            return 0;
          },
          getScrollContentWidth: function getScrollContentWidth() {
            return 0;
          },
          getOffsetWidth: function getOffsetWidth() {
            return 0;
          },
          isRTL: function isRTL() {
            return false;
          },
          setActiveTab: function setActiveTab() {
            return undefined;
          },
          activateTabAtIndex: function activateTabAtIndex() {
            return undefined;
          },
          deactivateTabAtIndex: function deactivateTabAtIndex() {
            return undefined;
          },
          focusTabAtIndex: function focusTabAtIndex() {
            return undefined;
          },
          getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex() {
            return {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: 0,
              height: 0
            };
          },
          getTabDimensionsAtIndex: function getTabDimensionsAtIndex() {
            return {
              rootLeft: 0,
              rootRight: 0,
              contentLeft: 0,
              contentRight: 0
            };
          },
          getPreviousActiveTabIndex: function getPreviousActiveTabIndex() {
            return -1;
          },
          getFocusedTabIndex: function getFocusedTabIndex() {
            return -1;
          },
          getIndexOfTabById: function getIndexOfTabById() {
            return -1;
          },
          getTabListLength: function getTabListLength() {
            return 0;
          },
          notifyTabActivated: function notifyTabActivated() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });
    /**
     * Switches between automatic and manual activation modes.
     * See https://www.w3.org/TR/wai-aria-practices/#tabpanel for examples.
     */

    MDCTabBarFoundation.prototype.setUseAutomaticActivation = function (useAutomaticActivation) {
      this.useAutomaticActivation_ = useAutomaticActivation;
    };

    MDCTabBarFoundation.prototype.activateTab = function (index) {
      var previousActiveIndex = this.adapter_.getPreviousActiveTabIndex();

      if (!this.indexIsInRange_(index) || index === previousActiveIndex) {
        return;
      }

      this.adapter_.deactivateTabAtIndex(previousActiveIndex);
      this.adapter_.activateTabAtIndex(index, this.adapter_.getTabIndicatorClientRectAtIndex(previousActiveIndex));
      this.scrollIntoView(index);
      this.adapter_.notifyTabActivated(index);
    };

    MDCTabBarFoundation.prototype.handleKeyDown = function (evt) {
      // Get the key from the event
      var key = this.getKeyFromEvent_(evt); // Early exit if the event key isn't one of the keyboard navigation keys

      if (key === undefined) {
        return;
      } // Prevent default behavior for movement keys, but not for activation keys, since :active is used to apply ripple


      if (!this.isActivationKey_(key)) {
        evt.preventDefault();
      }

      if (this.useAutomaticActivation_) {
        if (this.isActivationKey_(key)) {
          return;
        }

        var index = this.determineTargetFromKey_(this.adapter_.getPreviousActiveTabIndex(), key);
        this.adapter_.setActiveTab(index);
        this.scrollIntoView(index);
      } else {
        var focusedTabIndex = this.adapter_.getFocusedTabIndex();

        if (this.isActivationKey_(key)) {
          this.adapter_.setActiveTab(focusedTabIndex);
        } else {
          var index = this.determineTargetFromKey_(focusedTabIndex, key);
          this.adapter_.focusTabAtIndex(index);
          this.scrollIntoView(index);
        }
      }
    };
    /**
     * Handles the MDCTab:interacted event
     */


    MDCTabBarFoundation.prototype.handleTabInteraction = function (evt) {
      this.adapter_.setActiveTab(this.adapter_.getIndexOfTabById(evt.detail.tabId));
    };
    /**
     * Scrolls the tab at the given index into view
     * @param index The tab index to make visible
     */


    MDCTabBarFoundation.prototype.scrollIntoView = function (index) {
      // Early exit if the index is out of range
      if (!this.indexIsInRange_(index)) {
        return;
      } // Always scroll to 0 if scrolling to the 0th index


      if (index === 0) {
        return this.adapter_.scrollTo(0);
      } // Always scroll to the max value if scrolling to the Nth index
      // MDCTabScroller.scrollTo() will never scroll past the max possible value


      if (index === this.adapter_.getTabListLength() - 1) {
        return this.adapter_.scrollTo(this.adapter_.getScrollContentWidth());
      }

      if (this.isRTL_()) {
        return this.scrollIntoViewRTL_(index);
      }

      this.scrollIntoView_(index);
    };
    /**
     * Private method for determining the index of the destination tab based on what key was pressed
     * @param origin The original index from which to determine the destination
     * @param key The name of the key
     */


    MDCTabBarFoundation.prototype.determineTargetFromKey_ = function (origin, key) {
      var isRTL = this.isRTL_();
      var maxIndex = this.adapter_.getTabListLength() - 1;
      var shouldGoToEnd = key === strings$n.END_KEY;
      var shouldDecrement = key === strings$n.ARROW_LEFT_KEY && !isRTL || key === strings$n.ARROW_RIGHT_KEY && isRTL;
      var shouldIncrement = key === strings$n.ARROW_RIGHT_KEY && !isRTL || key === strings$n.ARROW_LEFT_KEY && isRTL;
      var index = origin;

      if (shouldGoToEnd) {
        index = maxIndex;
      } else if (shouldDecrement) {
        index -= 1;
      } else if (shouldIncrement) {
        index += 1;
      } else {
        index = 0;
      }

      if (index < 0) {
        index = maxIndex;
      } else if (index > maxIndex) {
        index = 0;
      }

      return index;
    };
    /**
     * Calculates the scroll increment that will make the tab at the given index visible
     * @param index The index of the tab
     * @param nextIndex The index of the next tab
     * @param scrollPosition The current scroll position
     * @param barWidth The width of the Tab Bar
     */


    MDCTabBarFoundation.prototype.calculateScrollIncrement_ = function (index, nextIndex, scrollPosition, barWidth) {
      var nextTabDimensions = this.adapter_.getTabDimensionsAtIndex(nextIndex);
      var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
      var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
      var leftIncrement = relativeContentRight - numbers$8.EXTRA_SCROLL_AMOUNT;
      var rightIncrement = relativeContentLeft + numbers$8.EXTRA_SCROLL_AMOUNT;

      if (nextIndex < index) {
        return Math.min(leftIncrement, 0);
      }

      return Math.max(rightIncrement, 0);
    };
    /**
     * Calculates the scroll increment that will make the tab at the given index visible in RTL
     * @param index The index of the tab
     * @param nextIndex The index of the next tab
     * @param scrollPosition The current scroll position
     * @param barWidth The width of the Tab Bar
     * @param scrollContentWidth The width of the scroll content
     */


    MDCTabBarFoundation.prototype.calculateScrollIncrementRTL_ = function (index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
      var nextTabDimensions = this.adapter_.getTabDimensionsAtIndex(nextIndex);
      var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
      var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
      var leftIncrement = relativeContentRight + numbers$8.EXTRA_SCROLL_AMOUNT;
      var rightIncrement = relativeContentLeft - numbers$8.EXTRA_SCROLL_AMOUNT;

      if (nextIndex > index) {
        return Math.max(leftIncrement, 0);
      }

      return Math.min(rightIncrement, 0);
    };
    /**
     * Determines the index of the adjacent tab closest to either edge of the Tab Bar
     * @param index The index of the tab
     * @param tabDimensions The dimensions of the tab
     * @param scrollPosition The current scroll position
     * @param barWidth The width of the tab bar
     */


    MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdge_ = function (index, tabDimensions, scrollPosition, barWidth) {
      /**
       * Tabs are laid out in the Tab Scroller like this:
       *
       *    Scroll Position
       *    +---+
       *    |   |   Bar Width
       *    |   +-----------------------------------+
       *    |   |                                   |
       *    |   V                                   V
       *    |   +-----------------------------------+
       *    V   |             Tab Scroller          |
       *    +------------+--------------+-------------------+
       *    |    Tab     |      Tab     |        Tab        |
       *    +------------+--------------+-------------------+
       *        |                                   |
       *        +-----------------------------------+
       *
       * To determine the next adjacent index, we look at the Tab root left and
       * Tab root right, both relative to the scroll position. If the Tab root
       * left is less than 0, then we know it's out of view to the left. If the
       * Tab root right minus the bar width is greater than 0, we know the Tab is
       * out of view to the right. From there, we either increment or decrement
       * the index.
       */
      var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
      var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
      var relativeRootDelta = relativeRootLeft + relativeRootRight;
      var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
      var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;

      if (leftEdgeIsCloser) {
        return index - 1;
      }

      if (rightEdgeIsCloser) {
        return index + 1;
      }

      return -1;
    };
    /**
     * Determines the index of the adjacent tab closest to either edge of the Tab Bar in RTL
     * @param index The index of the tab
     * @param tabDimensions The dimensions of the tab
     * @param scrollPosition The current scroll position
     * @param barWidth The width of the tab bar
     * @param scrollContentWidth The width of the scroller content
     */


    MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdgeRTL_ = function (index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
      var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
      var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
      var rootDelta = rootLeft + rootRight;
      var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
      var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;

      if (leftEdgeIsCloser) {
        return index + 1;
      }

      if (rightEdgeIsCloser) {
        return index - 1;
      }

      return -1;
    };
    /**
     * Returns the key associated with a keydown event
     * @param evt The keydown event
     */


    MDCTabBarFoundation.prototype.getKeyFromEvent_ = function (evt) {
      if (ACCEPTABLE_KEYS.has(evt.key)) {
        return evt.key;
      }

      return KEYCODE_MAP.get(evt.keyCode);
    };

    MDCTabBarFoundation.prototype.isActivationKey_ = function (key) {
      return key === strings$n.SPACE_KEY || key === strings$n.ENTER_KEY;
    };
    /**
     * Returns whether a given index is inclusively between the ends
     * @param index The index to test
     */


    MDCTabBarFoundation.prototype.indexIsInRange_ = function (index) {
      return index >= 0 && index < this.adapter_.getTabListLength();
    };
    /**
     * Returns the view's RTL property
     */


    MDCTabBarFoundation.prototype.isRTL_ = function () {
      return this.adapter_.isRTL();
    };
    /**
     * Scrolls the tab at the given index into view for left-to-right user agents.
     * @param index The index of the tab to scroll into view
     */


    MDCTabBarFoundation.prototype.scrollIntoView_ = function (index) {
      var scrollPosition = this.adapter_.getScrollPosition();
      var barWidth = this.adapter_.getOffsetWidth();
      var tabDimensions = this.adapter_.getTabDimensionsAtIndex(index);
      var nextIndex = this.findAdjacentTabIndexClosestToEdge_(index, tabDimensions, scrollPosition, barWidth);

      if (!this.indexIsInRange_(nextIndex)) {
        return;
      }

      var scrollIncrement = this.calculateScrollIncrement_(index, nextIndex, scrollPosition, barWidth);
      this.adapter_.incrementScroll(scrollIncrement);
    };
    /**
     * Scrolls the tab at the given index into view in RTL
     * @param index The tab index to make visible
     */


    MDCTabBarFoundation.prototype.scrollIntoViewRTL_ = function (index) {
      var scrollPosition = this.adapter_.getScrollPosition();
      var barWidth = this.adapter_.getOffsetWidth();
      var tabDimensions = this.adapter_.getTabDimensionsAtIndex(index);
      var scrollWidth = this.adapter_.getScrollContentWidth();
      var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL_(index, tabDimensions, scrollPosition, barWidth, scrollWidth);

      if (!this.indexIsInRange_(nextIndex)) {
        return;
      }

      var scrollIncrement = this.calculateScrollIncrementRTL_(index, nextIndex, scrollPosition, barWidth, scrollWidth);
      this.adapter_.incrementScroll(scrollIncrement);
    };

    return MDCTabBarFoundation;
  }(MDCFoundation);

  var script$X = {
    name: 'mdc-tab-bar',
    data: function data() {
      return {
        classes: {},
        indicatorStyles: {},
        tabList: []
      };
    },
    props: {
      activeTabIndex: [Number, String]
    },
    provide: function provide() {
      return {
        mdcTabBar: this
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCTabBarFoundation({
        scrollTo: function scrollTo(scrollX) {
          return _this.$refs.scroller.scrollTo(scrollX);
        },
        incrementScroll: function incrementScroll(scrollXIncrement) {
          return _this.$refs.scroller.incrementScroll(scrollXIncrement);
        },
        getScrollPosition: function getScrollPosition() {
          return _this.$refs.scroller.getScrollPosition();
        },
        getScrollContentWidth: function getScrollContentWidth() {
          return _this.$refs.scroller.getScrollContentWidth();
        },
        getOffsetWidth: function getOffsetWidth() {
          return _this.$el.offsetWidth;
        },
        isRTL: function isRTL() {
          return window.getComputedStyle(_this.$el).getPropertyValue('direction') === 'rtl';
        },
        setActiveTab: function setActiveTab(index) {
          _this.foundation.activateTab(index);
        },
        activateTabAtIndex: function activateTabAtIndex(index, clientRect) {
          _this.tabList[index].activate(clientRect);
        },
        deactivateTabAtIndex: function deactivateTabAtIndex(index) {
          _this.tabList[index] && _this.tabList[index].deactivate();
        },
        focusTabAtIndex: function focusTabAtIndex(index) {
          return _this.tabList[index].focus();
        },
        getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex(index) {
          return _this.tabList[index] && _this.tabList[index].computeIndicatorClientRect();
        },
        getTabDimensionsAtIndex: function getTabDimensionsAtIndex(index) {
          return _this.tabList[index].computeDimensions();
        },
        getPreviousActiveTabIndex: function getPreviousActiveTabIndex() {
          for (var i = 0; i < _this.tabList.length; i++) {
            if (_this.tabList[i].isActive()) {
              return i;
            }
          }

          return -1;
        },
        getFocusedTabIndex: function getFocusedTabIndex() {
          var tabElements = _this.getTabElements_();

          var activeElement = document.activeElement;
          return tabElements.indexOf(activeElement);
        },
        getIndexOfTabById: function getIndexOfTabById(id) {
          for (var i = 0; i < _this.tabList.length; i++) {
            if (_this.tabList[i].id === id) {
              return i;
            }
          }

          return -1;
        },
        getTabListLength: function getTabListLength() {
          return _this.tabList.length;
        },
        notifyTabActivated: function notifyTabActivated(index) {
          emitCustomEvent(_this.$el, MDCTabBarFoundation.strings.TAB_ACTIVATED_EVENT, {
            index: index
          }, true);

          _this.$emit('change', index);
        }
      });
      this.foundation.init(); // ensure active tab

      this.foundation.activateTab(this.activeTabIndex || 0);
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    },
    computed: {
      listeners: function listeners() {
        var _this2 = this;

        return _objectSpread({}, this.$listeners, {
          'MDCTab:interacted': function MDCTabInteracted(event) {
            return _this2.handleInteraction(event);
          },
          keydown: function keydown(event) {
            return _this2.handleKeyDown(event);
          }
        });
      }
    },
    methods: {
      handleInteraction: function handleInteraction(evt) {
        this.foundation.handleTabInteraction(evt);
      },
      handleKeyDown: function handleKeyDown(evt) {
        this.foundation.handleKeyDown(evt);
      }
    }
  };

  /* script */
  const __vue_script__$X = script$X;

  /* template */
  var __vue_render__$U = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      _vm._g(
        {
          staticClass: "mdc-tab-bar",
          class: _vm.classes,
          attrs: { role: "tablist" }
        },
        _vm.listeners
      ),
      [_c("mdc-tab-scroller", { ref: "scroller" }, [_vm._t("default")], 2)],
      1
    )
  };
  var __vue_staticRenderFns__$U = [];
  __vue_render__$U._withStripped = true;

    /* style */
    const __vue_inject_styles__$X = undefined;
    /* scoped */
    const __vue_scope_id__$X = undefined;
    /* module identifier */
    const __vue_module_identifier__$X = undefined;
    /* functional template */
    const __vue_is_functional_template__$X = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTabBar = normalizeComponent_1(
      { render: __vue_render__$U, staticRenderFns: __vue_staticRenderFns__$U },
      __vue_inject_styles__$X,
      __vue_script__$X,
      __vue_scope_id__$X,
      __vue_is_functional_template__$X,
      __vue_module_identifier__$X,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$n = {
    ANIMATING: 'mdc-tab-scroller--animating',
    SCROLL_AREA_SCROLL: 'mdc-tab-scroller__scroll-area--scroll',
    SCROLL_TEST: 'mdc-tab-scroller__test'
  };
  var strings$o = {
    AREA_SELECTOR: '.mdc-tab-scroller__scroll-area',
    CONTENT_SELECTOR: '.mdc-tab-scroller__scroll-content'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var MDCTabScrollerRTL =
  /** @class */
  function () {
    function MDCTabScrollerRTL(adapter) {
      this.adapter_ = adapter;
    }

    return MDCTabScrollerRTL;
  }();

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTabScrollerRTLDefault =
  /** @class */
  function (_super) {
    __extends(MDCTabScrollerRTLDefault, _super);

    function MDCTabScrollerRTLDefault() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    MDCTabScrollerRTLDefault.prototype.getScrollPositionRTL = function () {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var right = this.calculateScrollEdges_().right; // Scroll values on most browsers are ints instead of floats so we round

      return Math.round(right - currentScrollLeft);
    };

    MDCTabScrollerRTLDefault.prototype.scrollToRTL = function (scrollX) {
      var edges = this.calculateScrollEdges_();
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue_(edges.right - scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };

    MDCTabScrollerRTLDefault.prototype.incrementScrollRTL = function (scrollX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue_(currentScrollLeft - scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };

    MDCTabScrollerRTLDefault.prototype.getAnimatingScrollPosition = function (scrollX) {
      return scrollX;
    };

    MDCTabScrollerRTLDefault.prototype.calculateScrollEdges_ = function () {
      var contentWidth = this.adapter_.getScrollContentOffsetWidth();
      var rootWidth = this.adapter_.getScrollAreaOffsetWidth();
      return {
        left: 0,
        right: contentWidth - rootWidth
      };
    };

    MDCTabScrollerRTLDefault.prototype.clampScrollValue_ = function (scrollX) {
      var edges = this.calculateScrollEdges_();
      return Math.min(Math.max(edges.left, scrollX), edges.right);
    };

    return MDCTabScrollerRTLDefault;
  }(MDCTabScrollerRTL);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTabScrollerRTLNegative =
  /** @class */
  function (_super) {
    __extends(MDCTabScrollerRTLNegative, _super);

    function MDCTabScrollerRTLNegative() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    MDCTabScrollerRTLNegative.prototype.getScrollPositionRTL = function (translateX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      return Math.round(translateX - currentScrollLeft);
    };

    MDCTabScrollerRTLNegative.prototype.scrollToRTL = function (scrollX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue_(-scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };

    MDCTabScrollerRTLNegative.prototype.incrementScrollRTL = function (scrollX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue_(currentScrollLeft - scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };

    MDCTabScrollerRTLNegative.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
      return scrollX - translateX;
    };

    MDCTabScrollerRTLNegative.prototype.calculateScrollEdges_ = function () {
      var contentWidth = this.adapter_.getScrollContentOffsetWidth();
      var rootWidth = this.adapter_.getScrollAreaOffsetWidth();
      return {
        left: rootWidth - contentWidth,
        right: 0
      };
    };

    MDCTabScrollerRTLNegative.prototype.clampScrollValue_ = function (scrollX) {
      var edges = this.calculateScrollEdges_();
      return Math.max(Math.min(edges.right, scrollX), edges.left);
    };

    return MDCTabScrollerRTLNegative;
  }(MDCTabScrollerRTL);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTabScrollerRTLReverse =
  /** @class */
  function (_super) {
    __extends(MDCTabScrollerRTLReverse, _super);

    function MDCTabScrollerRTLReverse() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    MDCTabScrollerRTLReverse.prototype.getScrollPositionRTL = function (translateX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft(); // Scroll values on most browsers are ints instead of floats so we round

      return Math.round(currentScrollLeft - translateX);
    };

    MDCTabScrollerRTLReverse.prototype.scrollToRTL = function (scrollX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue_(scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: currentScrollLeft - clampedScrollLeft
      };
    };

    MDCTabScrollerRTLReverse.prototype.incrementScrollRTL = function (scrollX) {
      var currentScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue_(currentScrollLeft + scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: currentScrollLeft - clampedScrollLeft
      };
    };

    MDCTabScrollerRTLReverse.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
      return scrollX + translateX;
    };

    MDCTabScrollerRTLReverse.prototype.calculateScrollEdges_ = function () {
      var contentWidth = this.adapter_.getScrollContentOffsetWidth();
      var rootWidth = this.adapter_.getScrollAreaOffsetWidth();
      return {
        left: contentWidth - rootWidth,
        right: 0
      };
    };

    MDCTabScrollerRTLReverse.prototype.clampScrollValue_ = function (scrollX) {
      var edges = this.calculateScrollEdges_();
      return Math.min(Math.max(edges.right, scrollX), edges.left);
    };

    return MDCTabScrollerRTLReverse;
  }(MDCTabScrollerRTL);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTabScrollerFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTabScrollerFoundation, _super);

    function MDCTabScrollerFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCTabScrollerFoundation.defaultAdapter, adapter)) || this;
      /**
       * Controls whether we should handle the transitionend and interaction events during the animation.
       */


      _this.isAnimating_ = false;
      return _this;
    }

    Object.defineProperty(MDCTabScrollerFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$n;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabScrollerFoundation, "strings", {
      get: function get() {
        return strings$o;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabScrollerFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          eventTargetMatchesSelector: function eventTargetMatchesSelector() {
            return false;
          },
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          addScrollAreaClass: function addScrollAreaClass() {
            return undefined;
          },
          setScrollAreaStyleProperty: function setScrollAreaStyleProperty() {
            return undefined;
          },
          setScrollContentStyleProperty: function setScrollContentStyleProperty() {
            return undefined;
          },
          getScrollContentStyleValue: function getScrollContentStyleValue() {
            return '';
          },
          setScrollAreaScrollLeft: function setScrollAreaScrollLeft() {
            return undefined;
          },
          getScrollAreaScrollLeft: function getScrollAreaScrollLeft() {
            return 0;
          },
          getScrollContentOffsetWidth: function getScrollContentOffsetWidth() {
            return 0;
          },
          getScrollAreaOffsetWidth: function getScrollAreaOffsetWidth() {
            return 0;
          },
          computeScrollAreaClientRect: function computeScrollAreaClientRect() {
            return {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: 0,
              height: 0
            };
          },
          computeScrollContentClientRect: function computeScrollContentClientRect() {
            return {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: 0,
              height: 0
            };
          },
          computeHorizontalScrollbarHeight: function computeHorizontalScrollbarHeight() {
            return 0;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCTabScrollerFoundation.prototype.init = function () {
      // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll
      // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.
      var horizontalScrollbarHeight = this.adapter_.computeHorizontalScrollbarHeight();
      this.adapter_.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');
      this.adapter_.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);
    };
    /**
     * Computes the current visual scroll position
     */


    MDCTabScrollerFoundation.prototype.getScrollPosition = function () {
      if (this.isRTL_()) {
        return this.computeCurrentScrollPositionRTL_();
      }

      var currentTranslateX = this.calculateCurrentTranslateX_();
      var scrollLeft = this.adapter_.getScrollAreaScrollLeft();
      return scrollLeft - currentTranslateX;
    };
    /**
     * Handles interaction events that occur during transition
     */


    MDCTabScrollerFoundation.prototype.handleInteraction = function () {
      // Early exit if we aren't animating
      if (!this.isAnimating_) {
        return;
      } // Prevent other event listeners from handling this event


      this.stopScrollAnimation_();
    };
    /**
     * Handles the transitionend event
     */


    MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {
      // Early exit if we aren't animating or the event was triggered by a different element.
      var evtTarget = evt.target;

      if (!this.isAnimating_ || !this.adapter_.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {
        return;
      }

      this.isAnimating_ = false;
      this.adapter_.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
    };
    /**
     * Increment the scroll value by the scrollXIncrement
     * @param scrollXIncrement The value by which to increment the scroll position
     */


    MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {
      // Early exit for non-operational increment values
      if (scrollXIncrement === 0) {
        return;
      }

      if (this.isRTL_()) {
        return this.incrementScrollRTL_(scrollXIncrement);
      }

      this.incrementScroll_(scrollXIncrement);
    };
    /**
     * Scrolls to the given scrollX value
     */


    MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {
      if (this.isRTL_()) {
        return this.scrollToRTL_(scrollX);
      }

      this.scrollTo_(scrollX);
    };
    /**
     * Returns the appropriate version of the MDCTabScrollerRTL
     */


    MDCTabScrollerFoundation.prototype.getRTLScroller = function () {
      if (!this.rtlScrollerInstance_) {
        this.rtlScrollerInstance_ = this.rtlScrollerFactory_();
      }

      return this.rtlScrollerInstance_;
    };
    /**
     * Returns the translateX value from a CSS matrix transform function string
     */


    MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX_ = function () {
      var transformValue = this.adapter_.getScrollContentStyleValue('transform'); // Early exit if no transform is present

      if (transformValue === 'none') {
        return 0;
      } // The transform value comes back as a matrix transformation in the form
      // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so
      // we're going to grab all the parenthesized values, strip out tx, and
      // parse it.


      var match = /\((.+?)\)/.exec(transformValue);

      if (!match) {
        return 0;
      }

      var matrixParams = match[1]; // tslint:disable-next-line:ban-ts-ignore "Unused vars" should be a linter warning, not a compiler error.
      // @ts-ignore These unused variables should retain their semantic names for clarity.

      var _a = __read(matrixParams.split(','), 6),
          a = _a[0],
          b = _a[1],
          c = _a[2],
          d = _a[3],
          tx = _a[4],
          ty = _a[5];

      return parseFloat(tx); // tslint:disable-line:ban
    };
    /**
     * Calculates a safe scroll value that is > 0 and < the max scroll value
     * @param scrollX The distance to scroll
     */


    MDCTabScrollerFoundation.prototype.clampScrollValue_ = function (scrollX) {
      var edges = this.calculateScrollEdges_();
      return Math.min(Math.max(edges.left, scrollX), edges.right);
    };

    MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL_ = function () {
      var translateX = this.calculateCurrentTranslateX_();
      return this.getRTLScroller().getScrollPositionRTL(translateX);
    };

    MDCTabScrollerFoundation.prototype.calculateScrollEdges_ = function () {
      var contentWidth = this.adapter_.getScrollContentOffsetWidth();
      var rootWidth = this.adapter_.getScrollAreaOffsetWidth();
      return {
        left: 0,
        right: contentWidth - rootWidth
      };
    };
    /**
     * Internal scroll method
     * @param scrollX The new scroll position
     */


    MDCTabScrollerFoundation.prototype.scrollTo_ = function (scrollX) {
      var currentScrollX = this.getScrollPosition();
      var safeScrollX = this.clampScrollValue_(scrollX);
      var scrollDelta = safeScrollX - currentScrollX;
      this.animate_({
        finalScrollPosition: safeScrollX,
        scrollDelta: scrollDelta
      });
    };
    /**
     * Internal RTL scroll method
     * @param scrollX The new scroll position
     */


    MDCTabScrollerFoundation.prototype.scrollToRTL_ = function (scrollX) {
      var animation = this.getRTLScroller().scrollToRTL(scrollX);
      this.animate_(animation);
    };
    /**
     * Internal increment scroll method
     * @param scrollX The new scroll position increment
     */


    MDCTabScrollerFoundation.prototype.incrementScroll_ = function (scrollX) {
      var currentScrollX = this.getScrollPosition();
      var targetScrollX = scrollX + currentScrollX;
      var safeScrollX = this.clampScrollValue_(targetScrollX);
      var scrollDelta = safeScrollX - currentScrollX;
      this.animate_({
        finalScrollPosition: safeScrollX,
        scrollDelta: scrollDelta
      });
    };
    /**
     * Internal increment scroll RTL method
     * @param scrollX The new scroll position RTL increment
     */


    MDCTabScrollerFoundation.prototype.incrementScrollRTL_ = function (scrollX) {
      var animation = this.getRTLScroller().incrementScrollRTL(scrollX);
      this.animate_(animation);
    };
    /**
     * Animates the tab scrolling
     * @param animation The animation to apply
     */


    MDCTabScrollerFoundation.prototype.animate_ = function (animation) {
      var _this = this; // Early exit if translateX is 0, which means there's no animation to perform


      if (animation.scrollDelta === 0) {
        return;
      }

      this.stopScrollAnimation_(); // This animation uses the FLIP approach.
      // Read more here: https://aerotwist.com/blog/flip-your-animations/

      this.adapter_.setScrollAreaScrollLeft(animation.finalScrollPosition);
      this.adapter_.setScrollContentStyleProperty('transform', "translateX(" + animation.scrollDelta + "px)"); // Force repaint

      this.adapter_.computeScrollAreaClientRect();
      requestAnimationFrame(function () {
        _this.adapter_.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);

        _this.adapter_.setScrollContentStyleProperty('transform', 'none');
      });
      this.isAnimating_ = true;
    };
    /**
     * Stops scroll animation
     */


    MDCTabScrollerFoundation.prototype.stopScrollAnimation_ = function () {
      this.isAnimating_ = false;
      var currentScrollPosition = this.getAnimatingScrollPosition_();
      this.adapter_.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
      this.adapter_.setScrollContentStyleProperty('transform', 'translateX(0px)');
      this.adapter_.setScrollAreaScrollLeft(currentScrollPosition);
    };
    /**
     * Gets the current scroll position during animation
     */


    MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition_ = function () {
      var currentTranslateX = this.calculateCurrentTranslateX_();
      var scrollLeft = this.adapter_.getScrollAreaScrollLeft();

      if (this.isRTL_()) {
        return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
      }

      return scrollLeft - currentTranslateX;
    };
    /**
     * Determines the RTL Scroller to use
     */


    MDCTabScrollerFoundation.prototype.rtlScrollerFactory_ = function () {
      // Browsers have three different implementations of scrollLeft in RTL mode,
      // dependent on the browser. The behavior is based off the max LTR
      // scrollleft value and 0.
      //
      // * Default scrolling in RTL *
      //    - Left-most value: 0
      //    - Right-most value: Max LTR scrollLeft value
      //
      // * Negative scrolling in RTL *
      //    - Left-most value: Negated max LTR scrollLeft value
      //    - Right-most value: 0
      //
      // * Reverse scrolling in RTL *
      //    - Left-most value: Max LTR scrollLeft value
      //    - Right-most value: 0
      //
      // We use those principles below to determine which RTL scrollLeft
      // behavior is implemented in the current browser.
      var initialScrollLeft = this.adapter_.getScrollAreaScrollLeft();
      this.adapter_.setScrollAreaScrollLeft(initialScrollLeft - 1);
      var newScrollLeft = this.adapter_.getScrollAreaScrollLeft(); // If the newScrollLeft value is negative,then we know that the browser has
      // implemented negative RTL scrolling, since all other implementations have
      // only positive values.

      if (newScrollLeft < 0) {
        // Undo the scrollLeft test check
        this.adapter_.setScrollAreaScrollLeft(initialScrollLeft);
        return new MDCTabScrollerRTLNegative(this.adapter_);
      }

      var rootClientRect = this.adapter_.computeScrollAreaClientRect();
      var contentClientRect = this.adapter_.computeScrollContentClientRect();
      var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right); // Undo the scrollLeft test check

      this.adapter_.setScrollAreaScrollLeft(initialScrollLeft); // By calculating the clientRect of the root element and the clientRect of
      // the content element, we can determine how much the scroll value changed
      // when we performed the scrollLeft subtraction above.

      if (rightEdgeDelta === newScrollLeft) {
        return new MDCTabScrollerRTLReverse(this.adapter_);
      }

      return new MDCTabScrollerRTLDefault(this.adapter_);
    };

    MDCTabScrollerFoundation.prototype.isRTL_ = function () {
      return this.adapter_.getScrollContentStyleValue('direction') === 'rtl';
    };

    return MDCTabScrollerFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * Stores result from computeHorizontalScrollbarHeight to avoid redundant processing.
   */

  var horizontalScrollbarHeight_;
  /**
   * Computes the height of browser-rendered horizontal scrollbars using a self-created test element.
   * May return 0 (e.g. on OS X browsers under default configuration).
   */

  function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
    if (shouldCacheResult === void 0) {
      shouldCacheResult = true;
    }

    if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== 'undefined') {
      return horizontalScrollbarHeight_;
    }

    var el = documentObj.createElement('div');
    el.classList.add(cssClasses$n.SCROLL_TEST);
    documentObj.body.appendChild(el);
    var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
    documentObj.body.removeChild(el);

    if (shouldCacheResult) {
      horizontalScrollbarHeight_ = horizontalScrollbarHeight;
    }

    return horizontalScrollbarHeight;
  }

  //
  var script$Y = {
    name: 'mdc-tab-scroller',
    data: function data() {
      return {
        classes: {},
        areaClasses: {},
        areaStyles: {},
        contentStyles: {}
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCTabScrollerFoundation({
        eventTargetMatchesSelector: function eventTargetMatchesSelector(evtTarget, selector) {
          var MATCHES = matches(HTMLElement.prototype);
          return evtTarget[MATCHES](selector);
        },
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        addScrollAreaClass: function addScrollAreaClass(className) {
          return _this.$set(_this.areaClasses, className, true);
        },
        setScrollAreaStyleProperty: function setScrollAreaStyleProperty(prop, value) {
          return _this.$set(_this.areaStyles, prop, value);
        },
        setScrollContentStyleProperty: function setScrollContentStyleProperty(prop, value) {
          return _this.$set(_this.contentStyles, prop, value);
        },
        getScrollContentStyleValue: function getScrollContentStyleValue(propName) {
          return window.getComputedStyle(_this.$refs.content).getPropertyValue(propName);
        },
        setScrollAreaScrollLeft: function setScrollAreaScrollLeft(scrollX) {
          return _this.$refs.area.scrollLeft = scrollX;
        },
        getScrollAreaScrollLeft: function getScrollAreaScrollLeft() {
          return _this.$refs.area.scrollLeft;
        },
        getScrollContentOffsetWidth: function getScrollContentOffsetWidth() {
          return _this.$refs.content.offsetWidth;
        },
        getScrollAreaOffsetWidth: function getScrollAreaOffsetWidth() {
          return _this.$refs.area.offsetWidth;
        },
        computeScrollAreaClientRect: function computeScrollAreaClientRect() {
          return _this.$refs.area.getBoundingClientRect();
        },
        computeScrollContentClientRect: function computeScrollContentClientRect() {
          return _this.$refs.content.getBoundingClientRect();
        },
        computeHorizontalScrollbarHeight: function computeHorizontalScrollbarHeight$1() {
          return computeHorizontalScrollbarHeight(document);
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    },
    methods: {
      handleTransitionEnd: function handleTransitionEnd(evt) {
        this.foundation.handleTransitionEnd(evt);
      },
      handleInteraction: function handleInteraction(evt) {
        this.foundation.handleInteraction(evt);
      },
      getScrollPosition: function getScrollPosition() {
        return this.foundation.getScrollPosition();
      },
      getScrollContentWidth: function getScrollContentWidth() {
        return this.$refs.content.offsetWidth;
      },
      incrementScroll: function incrementScroll(scrollXIncrement) {
        this.foundation.incrementScroll(scrollXIncrement);
      },
      scrollTo: function scrollTo(scrollX) {
        this.foundation.scrollTo(scrollX);
      }
    }
  };

  /* script */
  const __vue_script__$Y = script$Y;

  /* template */
  var __vue_render__$V = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "mdc-tab-scroller", class: _vm.classes }, [
      _c(
        "div",
        {
          ref: "area",
          staticClass: "mdc-tab-scroller__scroll-area",
          class: _vm.areaClasses,
          style: _vm.areaStyles,
          on: {
            mousedown: _vm.handleInteraction,
            wheel: _vm.handleInteraction,
            pointerdown: _vm.handleInteraction,
            touchstart: _vm.handleInteraction,
            keydown: _vm.handleInteraction
          }
        },
        [
          _c(
            "div",
            {
              ref: "content",
              staticClass: "mdc-tab-scroller__scroll-content",
              style: _vm.contentStyles,
              on: { transitionend: _vm.handleTransitionEnd }
            },
            [_vm._t("default")],
            2
          )
        ]
      )
    ])
  };
  var __vue_staticRenderFns__$V = [];
  __vue_render__$V._withStripped = true;

    /* style */
    const __vue_inject_styles__$Y = undefined;
    /* scoped */
    const __vue_scope_id__$Y = undefined;
    /* module identifier */
    const __vue_module_identifier__$Y = undefined;
    /* functional template */
    const __vue_is_functional_template__$Y = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTabScroller = normalizeComponent_1(
      { render: __vue_render__$V, staticRenderFns: __vue_staticRenderFns__$V },
      __vue_inject_styles__$Y,
      __vue_script__$Y,
      __vue_scope_id__$Y,
      __vue_is_functional_template__$Y,
      __vue_module_identifier__$Y,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$o = {
    ACTIVE: 'mdc-tab-indicator--active',
    FADE: 'mdc-tab-indicator--fade',
    NO_TRANSITION: 'mdc-tab-indicator--no-transition'
  };
  var strings$p = {
    CONTENT_SELECTOR: '.mdc-tab-indicator__content'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTabIndicatorFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTabIndicatorFoundation, _super);

    function MDCTabIndicatorFoundation(adapter) {
      return _super.call(this, _assign({}, MDCTabIndicatorFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCTabIndicatorFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$o;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabIndicatorFoundation, "strings", {
      get: function get() {
        return strings$p;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTabIndicatorFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          computeContentClientRect: function computeContentClientRect() {
            return {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: 0,
              height: 0
            };
          },
          setContentStyleProperty: function setContentStyleProperty() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCTabIndicatorFoundation.prototype.computeContentClientRect = function () {
      return this.adapter_.computeContentClientRect();
    };

    return MDCTabIndicatorFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /* istanbul ignore next: subclass is not a branch statement */

  var MDCSlidingTabIndicatorFoundation =
  /** @class */
  function (_super) {
    __extends(MDCSlidingTabIndicatorFoundation, _super);

    function MDCSlidingTabIndicatorFoundation() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    MDCSlidingTabIndicatorFoundation.prototype.activate = function (previousIndicatorClientRect) {
      // Early exit if no indicator is present to handle cases where an indicator
      // may be activated without a prior indicator state
      if (!previousIndicatorClientRect) {
        this.adapter_.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
        return;
      } // This animation uses the FLIP approach. You can read more about it at the link below:
      // https://aerotwist.com/blog/flip-your-animations/
      // Calculate the dimensions based on the dimensions of the previous indicator


      var currentClientRect = this.computeContentClientRect();
      var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
      var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
      this.adapter_.addClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
      this.adapter_.setContentStyleProperty('transform', "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")"); // Force repaint before updating classes and transform to ensure the transform properly takes effect

      this.computeContentClientRect();
      this.adapter_.removeClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
      this.adapter_.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
      this.adapter_.setContentStyleProperty('transform', '');
    };

    MDCSlidingTabIndicatorFoundation.prototype.deactivate = function () {
      this.adapter_.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
    };

    return MDCSlidingTabIndicatorFoundation;
  }(MDCTabIndicatorFoundation);

  //
  var script$Z = {
    name: 'mdc-tab-indicator',
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCSlidingTabIndicatorFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        computeContentClientRect: function computeContentClientRect() {
          return _this.$refs.content.getBoundingClientRect();
        },
        setContentStyleProperty: function setContentStyleProperty(prop, value) {
          _this.$set(_this.styles, prop, value);
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    },
    methods: {
      activate: function activate(previousIndicatorClientRect) {
        this.foundation.activate(previousIndicatorClientRect);
      },
      deactivate: function deactivate() {
        this.foundation.deactivate();
      },
      computeContentClientRect: function computeContentClientRect() {
        return this.foundation.computeContentClientRect();
      }
    }
  };

  /* script */
  const __vue_script__$Z = script$Z;

  /* template */
  var __vue_render__$W = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("span", { staticClass: "mdc-tab-indicator", class: _vm.classes }, [
      _c("span", {
        ref: "content",
        staticClass:
          "mdc-tab-indicator__content mdc-tab-indicator__content--underline",
        style: _vm.styles
      })
    ])
  };
  var __vue_staticRenderFns__$W = [];
  __vue_render__$W._withStripped = true;

    /* style */
    const __vue_inject_styles__$Z = undefined;
    /* scoped */
    const __vue_scope_id__$Z = undefined;
    /* module identifier */
    const __vue_module_identifier__$Z = undefined;
    /* functional template */
    const __vue_is_functional_template__$Z = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTabIndicator = normalizeComponent_1(
      { render: __vue_render__$W, staticRenderFns: __vue_staticRenderFns__$W },
      __vue_inject_styles__$Z,
      __vue_script__$Z,
      __vue_scope_id__$Z,
      __vue_is_functional_template__$Z,
      __vue_module_identifier__$Z,
      undefined,
      undefined
    );

  //
  var script$_ = {
    name: 'mdc-tab-ripple',
    data: function data() {
      return {
        classes: {},
        styles: {}
      };
    },
    mounted: function mounted() {
      this.ripple = new RippleBase(this);
      this.ripple.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.ripple.destroy();
    }
  };

  /* script */
  const __vue_script__$_ = script$_;

  /* template */
  var __vue_render__$X = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("span", {
      staticClass: "mdc-tab__ripple",
      class: _vm.classes,
      style: _vm.styles
    })
  };
  var __vue_staticRenderFns__$X = [];
  __vue_render__$X._withStripped = true;

    /* style */
    const __vue_inject_styles__$_ = undefined;
    /* scoped */
    const __vue_scope_id__$_ = undefined;
    /* module identifier */
    const __vue_module_identifier__$_ = undefined;
    /* functional template */
    const __vue_is_functional_template__$_ = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTabRipple = normalizeComponent_1(
      { render: __vue_render__$X, staticRenderFns: __vue_staticRenderFns__$X },
      __vue_inject_styles__$_,
      __vue_script__$_,
      __vue_scope_id__$_,
      __vue_is_functional_template__$_,
      __vue_module_identifier__$_,
      undefined,
      undefined
    );

  var VueMDCTabs = BasePlugin({
    mdcTab: mdcTab,
    mdcTabBar: mdcTabBar,
    mdcTabScroller: mdcTabScroller,
    mdcTabIndicator: mdcTabIndicator,
    mdcTabRipple: mdcTabRipple
  });

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$q = {
    ARIA_CONTROLS: 'aria-controls',
    ICON_SELECTOR: '.mdc-text-field__icon',
    INPUT_SELECTOR: '.mdc-text-field__input',
    LABEL_SELECTOR: '.mdc-floating-label',
    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
    OUTLINE_SELECTOR: '.mdc-notched-outline'
  };
  var cssClasses$p = {
    DENSE: 'mdc-text-field--dense',
    DISABLED: 'mdc-text-field--disabled',
    FOCUSED: 'mdc-text-field--focused',
    HELPER_LINE: 'mdc-text-field-helper-line',
    INVALID: 'mdc-text-field--invalid',
    OUTLINED: 'mdc-text-field--outlined',
    ROOT: 'mdc-text-field',
    TEXTAREA: 'mdc-text-field--textarea',
    WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon'
  };
  var numbers$9 = {
    DENSE_LABEL_SCALE: 0.923,
    LABEL_SCALE: 0.75
  };
  /**
   * Whitelist based off of https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
   * under the "Validation-related attributes" section.
   */

  var VALIDATION_ATTR_WHITELIST = ['pattern', 'min', 'max', 'required', 'step', 'minlength', 'maxlength'];
  /**
   * Label should always float for these types as they show some UI even if value is empty.
   */

  var ALWAYS_FLOAT_TYPES = ['color', 'date', 'datetime-local', 'month', 'range', 'time', 'week'];

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
  var INTERACTION_EVENTS$1 = ['click', 'keydown'];

  var MDCTextFieldFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTextFieldFoundation, _super);
    /**
     * @param adapter
     * @param foundationMap Map from subcomponent names to their subfoundations.
     */


    function MDCTextFieldFoundation(adapter, foundationMap) {
      if (foundationMap === void 0) {
        foundationMap = {};
      }

      var _this = _super.call(this, _assign({}, MDCTextFieldFoundation.defaultAdapter, adapter)) || this;

      _this.isFocused_ = false;
      _this.receivedUserInput_ = false;
      _this.isValid_ = true;
      _this.useNativeValidation_ = true;
      _this.helperText_ = foundationMap.helperText;
      _this.characterCounter_ = foundationMap.characterCounter;
      _this.leadingIcon_ = foundationMap.leadingIcon;
      _this.trailingIcon_ = foundationMap.trailingIcon;

      _this.inputFocusHandler_ = function () {
        return _this.activateFocus();
      };

      _this.inputBlurHandler_ = function () {
        return _this.deactivateFocus();
      };

      _this.inputInputHandler_ = function () {
        return _this.handleInput();
      };

      _this.setPointerXOffset_ = function (evt) {
        return _this.setTransformOrigin(evt);
      };

      _this.textFieldInteractionHandler_ = function () {
        return _this.handleTextFieldInteraction();
      };

      _this.validationAttributeChangeHandler_ = function (attributesList) {
        return _this.handleValidationAttributeChange(attributesList);
      };

      return _this;
    }

    Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$p;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "strings", {
      get: function get() {
        return strings$q;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "numbers", {
      get: function get() {
        return numbers$9;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
      get: function get() {
        return !this.isFocused_ && !this.isValid() && Boolean(this.getValue());
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat_", {
      get: function get() {
        var type = this.getNativeInput_().type;
        return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
      get: function get() {
        return this.shouldAlwaysFloat_ || this.isFocused_ || Boolean(this.getValue()) || this.isBadInput_();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return true;
          },
          registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler() {
            return undefined;
          },
          deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler() {
            return undefined;
          },
          registerInputInteractionHandler: function registerInputInteractionHandler() {
            return undefined;
          },
          deregisterInputInteractionHandler: function deregisterInputInteractionHandler() {
            return undefined;
          },
          registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler() {
            return new MutationObserver(function () {
              return undefined;
            });
          },
          deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler() {
            return undefined;
          },
          getNativeInput: function getNativeInput() {
            return null;
          },
          isFocused: function isFocused() {
            return false;
          },
          activateLineRipple: function activateLineRipple() {
            return undefined;
          },
          deactivateLineRipple: function deactivateLineRipple() {
            return undefined;
          },
          setLineRippleTransformOrigin: function setLineRippleTransformOrigin() {
            return undefined;
          },
          shakeLabel: function shakeLabel() {
            return undefined;
          },
          floatLabel: function floatLabel() {
            return undefined;
          },
          hasLabel: function hasLabel() {
            return false;
          },
          getLabelWidth: function getLabelWidth() {
            return 0;
          },
          hasOutline: function hasOutline() {
            return false;
          },
          notchOutline: function notchOutline() {
            return undefined;
          },
          closeOutline: function closeOutline() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCTextFieldFoundation.prototype.init = function () {
      var _this = this;

      if (this.adapter_.isFocused()) {
        this.inputFocusHandler_();
      } else if (this.adapter_.hasLabel() && this.shouldFloat) {
        this.notchOutline(true);
        this.adapter_.floatLabel(true);
      }

      this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);
      this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);
      this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);
      POINTERDOWN_EVENTS.forEach(function (evtType) {
        _this.adapter_.registerInputInteractionHandler(evtType, _this.setPointerXOffset_);
      });
      INTERACTION_EVENTS$1.forEach(function (evtType) {
        _this.adapter_.registerTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);
      });
      this.validationObserver_ = this.adapter_.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler_);
      this.setCharacterCounter_(this.getValue().length);
    };

    MDCTextFieldFoundation.prototype.destroy = function () {
      var _this = this;

      this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);
      this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);
      this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);
      POINTERDOWN_EVENTS.forEach(function (evtType) {
        _this.adapter_.deregisterInputInteractionHandler(evtType, _this.setPointerXOffset_);
      });
      INTERACTION_EVENTS$1.forEach(function (evtType) {
        _this.adapter_.deregisterTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);
      });
      this.adapter_.deregisterValidationAttributeChangeHandler(this.validationObserver_);
    };
    /**
     * Handles user interactions with the Text Field.
     */


    MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
      var nativeInput = this.adapter_.getNativeInput();

      if (nativeInput && nativeInput.disabled) {
        return;
      }

      this.receivedUserInput_ = true;
    };
    /**
     * Handles validation attribute changes
     */


    MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
      var _this = this;

      attributesList.some(function (attributeName) {
        if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
          _this.styleValidity_(true);

          return true;
        }

        return false;
      });

      if (attributesList.indexOf('maxlength') > -1) {
        this.setCharacterCounter_(this.getValue().length);
      }
    };
    /**
     * Opens/closes the notched outline.
     */


    MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
      if (!this.adapter_.hasOutline()) {
        return;
      }

      if (openNotch) {
        var isDense = this.adapter_.hasClass(cssClasses$p.DENSE);
        var labelScale = isDense ? numbers$9.DENSE_LABEL_SCALE : numbers$9.LABEL_SCALE;
        var labelWidth = this.adapter_.getLabelWidth() * labelScale;
        this.adapter_.notchOutline(labelWidth);
      } else {
        this.adapter_.closeOutline();
      }
    };
    /**
     * Activates the text field focus state.
     */


    MDCTextFieldFoundation.prototype.activateFocus = function () {
      this.isFocused_ = true;
      this.styleFocused_(this.isFocused_);
      this.adapter_.activateLineRipple();

      if (this.adapter_.hasLabel()) {
        this.notchOutline(this.shouldFloat);
        this.adapter_.floatLabel(this.shouldFloat);
        this.adapter_.shakeLabel(this.shouldShake);
      }

      if (this.helperText_) {
        this.helperText_.showToScreenReader();
      }
    };
    /**
     * Sets the line ripple's transform origin, so that the line ripple activate
     * animation will animate out from the user's click location.
     */


    MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
      var touches = evt.touches;
      var targetEvent = touches ? touches[0] : evt;
      var targetClientRect = targetEvent.target.getBoundingClientRect();
      var normalizedX = targetEvent.clientX - targetClientRect.left;
      this.adapter_.setLineRippleTransformOrigin(normalizedX);
    };
    /**
     * Handles input change of text input and text area.
     */


    MDCTextFieldFoundation.prototype.handleInput = function () {
      this.autoCompleteFocus();
      this.setCharacterCounter_(this.getValue().length);
    };
    /**
     * Activates the Text Field's focus state in cases when the input value
     * changes without user input (e.g. programmatically).
     */


    MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
      if (!this.receivedUserInput_) {
        this.activateFocus();
      }
    };
    /**
     * Deactivates the Text Field's focus state.
     */


    MDCTextFieldFoundation.prototype.deactivateFocus = function () {
      this.isFocused_ = false;
      this.adapter_.deactivateLineRipple();
      var isValid = this.isValid();
      this.styleValidity_(isValid);
      this.styleFocused_(this.isFocused_);

      if (this.adapter_.hasLabel()) {
        this.notchOutline(this.shouldFloat);
        this.adapter_.floatLabel(this.shouldFloat);
        this.adapter_.shakeLabel(this.shouldShake);
      }

      if (!this.shouldFloat) {
        this.receivedUserInput_ = false;
      }
    };

    MDCTextFieldFoundation.prototype.getValue = function () {
      return this.getNativeInput_().value;
    };
    /**
     * @param value The value to set on the input Element.
     */


    MDCTextFieldFoundation.prototype.setValue = function (value) {
      // Prevent Safari from moving the caret to the end of the input when the value has not changed.
      if (this.getValue() !== value) {
        this.getNativeInput_().value = value;
      }

      var isValid = this.isValid();
      this.styleValidity_(isValid);

      if (this.adapter_.hasLabel()) {
        this.notchOutline(this.shouldFloat);
        this.adapter_.floatLabel(this.shouldFloat);
        this.adapter_.shakeLabel(this.shouldShake);
      }
    };
    /**
     * @return The custom validity state, if set; otherwise, the result of a native validity check.
     */


    MDCTextFieldFoundation.prototype.isValid = function () {
      return this.useNativeValidation_ ? this.isNativeInputValid_() : this.isValid_;
    };
    /**
     * @param isValid Sets the custom validity state of the Text Field.
     */


    MDCTextFieldFoundation.prototype.setValid = function (isValid) {
      this.isValid_ = isValid;
      this.styleValidity_(isValid);
      var shouldShake = !isValid && !this.isFocused_;

      if (this.adapter_.hasLabel()) {
        this.adapter_.shakeLabel(shouldShake);
      }
    };
    /**
     * Enables or disables the use of native validation. Use this for custom validation.
     * @param useNativeValidation Set this to false to ignore native input validation.
     */


    MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
      this.useNativeValidation_ = useNativeValidation;
    };

    MDCTextFieldFoundation.prototype.isDisabled = function () {
      return this.getNativeInput_().disabled;
    };
    /**
     * @param disabled Sets the text-field disabled or enabled.
     */


    MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
      this.getNativeInput_().disabled = disabled;
      this.styleDisabled_(disabled);
    };
    /**
     * @param content Sets the content of the helper text.
     */


    MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
      if (this.helperText_) {
        this.helperText_.setContent(content);
      }
    };
    /**
     * Sets the aria label of the leading icon.
     */


    MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
      if (this.leadingIcon_) {
        this.leadingIcon_.setAriaLabel(label);
      }
    };
    /**
     * Sets the text content of the leading icon.
     */


    MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
      if (this.leadingIcon_) {
        this.leadingIcon_.setContent(content);
      }
    };
    /**
     * Sets the aria label of the trailing icon.
     */


    MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
      if (this.trailingIcon_) {
        this.trailingIcon_.setAriaLabel(label);
      }
    };
    /**
     * Sets the text content of the trailing icon.
     */


    MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
      if (this.trailingIcon_) {
        this.trailingIcon_.setContent(content);
      }
    };
    /**
     * Sets character counter values that shows characters used and the total character limit.
     */


    MDCTextFieldFoundation.prototype.setCharacterCounter_ = function (currentLength) {
      if (!this.characterCounter_) return;
      var maxLength = this.getNativeInput_().maxLength;

      if (maxLength === -1) {
        throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
      }

      this.characterCounter_.setCounterValue(currentLength, maxLength);
    };
    /**
     * @return True if the Text Field input fails in converting the user-supplied value.
     */


    MDCTextFieldFoundation.prototype.isBadInput_ = function () {
      // The badInput property is not supported in IE 11 💩.
      return this.getNativeInput_().validity.badInput || false;
    };
    /**
     * @return The result of native validity checking (ValidityState.valid).
     */


    MDCTextFieldFoundation.prototype.isNativeInputValid_ = function () {
      return this.getNativeInput_().validity.valid;
    };
    /**
     * Styles the component based on the validity state.
     */


    MDCTextFieldFoundation.prototype.styleValidity_ = function (isValid) {
      var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;

      if (isValid) {
        this.adapter_.removeClass(INVALID);
      } else {
        this.adapter_.addClass(INVALID);
      }

      if (this.helperText_) {
        this.helperText_.setValidity(isValid);
      }
    };
    /**
     * Styles the component based on the focused state.
     */


    MDCTextFieldFoundation.prototype.styleFocused_ = function (isFocused) {
      var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;

      if (isFocused) {
        this.adapter_.addClass(FOCUSED);
      } else {
        this.adapter_.removeClass(FOCUSED);
      }
    };
    /**
     * Styles the component based on the disabled state.
     */


    MDCTextFieldFoundation.prototype.styleDisabled_ = function (isDisabled) {
      var _a = MDCTextFieldFoundation.cssClasses,
          DISABLED = _a.DISABLED,
          INVALID = _a.INVALID;

      if (isDisabled) {
        this.adapter_.addClass(DISABLED);
        this.adapter_.removeClass(INVALID);
      } else {
        this.adapter_.removeClass(DISABLED);
      }

      if (this.leadingIcon_) {
        this.leadingIcon_.setDisabled(isDisabled);
      }

      if (this.trailingIcon_) {
        this.trailingIcon_.setDisabled(isDisabled);
      }
    };
    /**
     * @return The native text input element from the host environment, or an object with the same shape for unit tests.
     */


    MDCTextFieldFoundation.prototype.getNativeInput_ = function () {
      // this.adapter_ may be undefined in foundation unit tests. This happens when testdouble is creating a mock object
      // and invokes the shouldShake/shouldFloat getters (which in turn call getValue(), which calls this method) before
      // init() has been called from the MDCTextField constructor. To work around that issue, we return a dummy object.
      var nativeInput = this.adapter_ ? this.adapter_.getNativeInput() : null;
      return nativeInput || {
        disabled: false,
        maxLength: -1,
        type: 'input',
        validity: {
          badInput: false,
          valid: true
        },
        value: ''
      };
    };

    return MDCTextFieldFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$q = {
    HELPER_TEXT_PERSISTENT: 'mdc-text-field-helper-text--persistent',
    HELPER_TEXT_VALIDATION_MSG: 'mdc-text-field-helper-text--validation-msg',
    ROOT: 'mdc-text-field-helper-text'
  };
  var strings$r = {
    ARIA_HIDDEN: 'aria-hidden',
    ROLE: 'role',
    ROOT_SELECTOR: "." + cssClasses$q.ROOT
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTextFieldHelperTextFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTextFieldHelperTextFoundation, _super);

    function MDCTextFieldHelperTextFoundation(adapter) {
      return _super.call(this, _assign({}, MDCTextFieldHelperTextFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCTextFieldHelperTextFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$q;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldHelperTextFoundation, "strings", {
      get: function get() {
        return strings$r;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldHelperTextFoundation, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          setAttr: function setAttr() {
            return undefined;
          },
          removeAttr: function removeAttr() {
            return undefined;
          },
          setContent: function setContent() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });
    /**
     * Sets the content of the helper text field.
     */

    MDCTextFieldHelperTextFoundation.prototype.setContent = function (content) {
      this.adapter_.setContent(content);
    };
    /**
     * @param isPersistent Sets the persistency of the helper text.
     */


    MDCTextFieldHelperTextFoundation.prototype.setPersistent = function (isPersistent) {
      if (isPersistent) {
        this.adapter_.addClass(cssClasses$q.HELPER_TEXT_PERSISTENT);
      } else {
        this.adapter_.removeClass(cssClasses$q.HELPER_TEXT_PERSISTENT);
      }
    };
    /**
     * @param isValidation True to make the helper text act as an error validation message.
     */


    MDCTextFieldHelperTextFoundation.prototype.setValidation = function (isValidation) {
      if (isValidation) {
        this.adapter_.addClass(cssClasses$q.HELPER_TEXT_VALIDATION_MSG);
      } else {
        this.adapter_.removeClass(cssClasses$q.HELPER_TEXT_VALIDATION_MSG);
      }
    };
    /**
     * Makes the helper text visible to the screen reader.
     */


    MDCTextFieldHelperTextFoundation.prototype.showToScreenReader = function () {
      this.adapter_.removeAttr(strings$r.ARIA_HIDDEN);
    };
    /**
     * Sets the validity of the helper text based on the input validity.
     */


    MDCTextFieldHelperTextFoundation.prototype.setValidity = function (inputIsValid) {
      var helperTextIsPersistent = this.adapter_.hasClass(cssClasses$q.HELPER_TEXT_PERSISTENT);
      var helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses$q.HELPER_TEXT_VALIDATION_MSG);
      var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;

      if (validationMsgNeedsDisplay) {
        this.adapter_.setAttr(strings$r.ROLE, 'alert');
      } else {
        this.adapter_.removeAttr(strings$r.ROLE);
      }

      if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
        this.hide_();
      }
    };
    /**
     * Hides the help text from screen readers.
     */


    MDCTextFieldHelperTextFoundation.prototype.hide_ = function () {
      this.adapter_.setAttr(strings$r.ARIA_HIDDEN, 'true');
    };

    return MDCTextFieldHelperTextFoundation;
  }(MDCFoundation);

  var script$$ = {
    name: 'textfield-helper-text',
    // functional: true,
    props: {
      persistent: Boolean,
      validation: Boolean,
      helptext: String
    },
    data: function data() {
      var context = this.$slots.default ? this.$slots.default[0].data.attrs : this;
      return {
        classes: {
          'mdc-text-field-helper-text': true,
          'mdc-text-field-helper-text--persistent': context.persistent,
          'mdc-text-field-helper-text--validation-msg': context.validation
        }
      };
    },
    render: function render(h) {
      var classes = classNames(this.classes);

      if (this.$slots.default) {
        var node = this.$slots.default[0];
        node.data.class = classes;
        return node;
      } else {
        return h('p', {
          class: classes,
          attrs: this.$attrs
        }, this.helptext);
      }
    },
    watch: {
      persistent: function persistent() {
        this.foundation.setPersistent(this.persistent);
      },
      validation: function validation() {
        this.foundation.setValidation(this.validation);
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCTextFieldHelperTextFoundation({
        addClass: function addClass(className) {
          return _this.$set(_this.classes, className, true);
        },
        removeClass: function removeClass(className) {
          return _this.$delete(_this.classes, className);
        },
        hasClass: function hasClass(className) {
          return Boolean(_this.classes[className]);
        },
        setAttr: function setAttr(attr, value) {
          _this.$el.setAttribute(attr, value);
        },
        removeAttr: function removeAttr(attr) {
          _this.$el.removeAttribute(attr);
        },
        setContent: function setContent()
        /*content*/
        {// help text get's updated from {{helptext}}
          // cf. this.$el.textContent = content
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  }; // ===
  // Private functions
  // ===

  var hasOwn = {}.hasOwnProperty;

  function classNames() {
    var classes = [];

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;

      var argType = _typeof(arg);

      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg) && arg.length) {
        var inner = classNames.apply(null, arg);

        if (inner) {
          classes.push(inner);
        }
      } else if (argType === 'object') {
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes.push(key);
          }
        }
      }
    }

    return classes.join(' ');
  }

  /* script */
  const __vue_script__$$ = script$$;

  /* template */

    /* style */
    const __vue_inject_styles__$$ = undefined;
    /* scoped */
    const __vue_scope_id__$$ = undefined;
    /* module identifier */
    const __vue_module_identifier__$$ = undefined;
    /* functional template */
    const __vue_is_functional_template__$$ = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var TextfieldHelperText = normalizeComponent_1(
      {},
      __vue_inject_styles__$$,
      __vue_script__$$,
      __vue_scope_id__$$,
      __vue_is_functional_template__$$,
      __vue_module_identifier__$$,
      undefined,
      undefined
    );

  /**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var strings$s = {
    ICON_EVENT: 'MDCTextField:icon',
    ICON_ROLE: 'button'
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var INTERACTION_EVENTS$2 = ['click', 'keydown'];

  var MDCTextFieldIconFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTextFieldIconFoundation, _super);

    function MDCTextFieldIconFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCTextFieldIconFoundation.defaultAdapter, adapter)) || this;

      _this.savedTabIndex_ = null;

      _this.interactionHandler_ = function (evt) {
        return _this.handleInteraction(evt);
      };

      return _this;
    }

    Object.defineProperty(MDCTextFieldIconFoundation, "strings", {
      get: function get() {
        return strings$s;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldIconFoundation, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          getAttr: function getAttr() {
            return null;
          },
          setAttr: function setAttr() {
            return undefined;
          },
          removeAttr: function removeAttr() {
            return undefined;
          },
          setContent: function setContent() {
            return undefined;
          },
          registerInteractionHandler: function registerInteractionHandler() {
            return undefined;
          },
          deregisterInteractionHandler: function deregisterInteractionHandler() {
            return undefined;
          },
          notifyIconAction: function notifyIconAction() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCTextFieldIconFoundation.prototype.init = function () {
      var _this = this;

      this.savedTabIndex_ = this.adapter_.getAttr('tabindex');
      INTERACTION_EVENTS$2.forEach(function (evtType) {
        _this.adapter_.registerInteractionHandler(evtType, _this.interactionHandler_);
      });
    };

    MDCTextFieldIconFoundation.prototype.destroy = function () {
      var _this = this;

      INTERACTION_EVENTS$2.forEach(function (evtType) {
        _this.adapter_.deregisterInteractionHandler(evtType, _this.interactionHandler_);
      });
    };

    MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {
      if (!this.savedTabIndex_) {
        return;
      }

      if (disabled) {
        this.adapter_.setAttr('tabindex', '-1');
        this.adapter_.removeAttr('role');
      } else {
        this.adapter_.setAttr('tabindex', this.savedTabIndex_);
        this.adapter_.setAttr('role', strings$s.ICON_ROLE);
      }
    };

    MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {
      this.adapter_.setAttr('aria-label', label);
    };

    MDCTextFieldIconFoundation.prototype.setContent = function (content) {
      this.adapter_.setContent(content);
    };

    MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {
      var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;

      if (evt.type === 'click' || isEnterKey) {
        this.adapter_.notifyIconAction();
      }
    };

    return MDCTextFieldIconFoundation;
  }(MDCFoundation);

  var script$10 = {
    name: 'textfield-icon',
    functional: true,
    props: {
      disabled: Boolean
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCTextFieldIconFoundation(_extends({
        getAttr: function getAttr(attr) {
          return _this.$el.getAttribute(attr);
        },
        setAttr: function setAttr(attr, value) {
          return _this.$el.setAttribute(attr, value);
        },
        removeAttr: function removeAttr(attr) {
          return _this.$el.removeAttribute(attr);
        },
        setContent: function setContent(content) {
          _this.$el.textContent = content;
        },
        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
          return _this.$el.addEventListener(evtType, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
          return _this.$el.removeEventListener(evtType, handler);
        },
        notifyIconAction: function notifyIconAction() {
          _this.$emit('click');

          emitCustomEvent(_this.$el, MDCTextFieldIconFoundation.strings.ICON_EVENT, {}, true
          /* shouldBubble  */
          );
        }
      }));
      this.foundation.init();
    },
    render: function render(h, context) {
      var node = context.children[0];
      node.data.class = 'mdc-text-field__icon';
      return node;
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$10 = script$10;

  /* template */

    /* style */
    const __vue_inject_styles__$10 = undefined;
    /* scoped */
    const __vue_scope_id__$10 = undefined;
    /* module identifier */
    const __vue_module_identifier__$10 = undefined;
    /* functional template */
    const __vue_is_functional_template__$10 = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var TextfieldIcon = normalizeComponent_1(
      {},
      __vue_inject_styles__$10,
      __vue_script__$10,
      __vue_scope_id__$10,
      __vue_is_functional_template__$10,
      __vue_module_identifier__$10,
      undefined,
      undefined
    );

  var script$11 = {
    name: 'mdc-textfield',
    mixins: [CustomElementMixin, DispatchFocusMixin, VMAUniqueIdMixin],
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'model'
    },
    props: {
      value: [String, Number],
      type: {
        type: String,
        default: 'text',
        validator: function validator(value) {
          return ['text', 'email', 'search', 'password', 'tel', 'url', 'number'].indexOf(value) !== -1;
        }
      },
      dense: Boolean,
      label: String,
      outline: Boolean,
      disabled: Boolean,
      required: Boolean,
      valid: {
        type: Boolean,
        default: undefined
      },
      fullwidth: Boolean,
      multiline: Boolean,
      size: {
        type: [Number, String],
        default: 20
      },
      minlength: {
        type: [Number, String],
        default: undefined
      },
      maxlength: {
        type: [Number, String],
        default: undefined
      },
      rows: {
        type: [Number, String],
        default: 8
      },
      cols: {
        type: [Number, String],
        default: 40
      },
      id: {
        type: String
      },
      helptext: String,
      helptextPersistent: Boolean,
      helptextValidation: Boolean
    },
    data: function data() {
      return {
        text: this.value,
        rootClasses: {
          'mdc-textfield': true,
          'mdc-text-field': true,
          'mdc-text-field--upgraded': true,
          'mdc-text-field--disabled': this.disabled,
          'mdc-text-field--dense': this.dense,
          'mdc-text-field--fullwidth': this.fullwidth,
          'mdc-text-field--textarea': this.multiline,
          'mdc-text-field--outlined': !this.fullwidth && this.outline,
          'mdc-text-field--with-leading-icon': Boolean(this.$slots.leadingIcon),
          'mdc-text-field--with-trailing-icon': Boolean(this.$slots.trailingIcon),
          'mdc-text-field--no-label': !this.label
        },
        inputClasses: {
          'mdc-text-field__input': true
        },
        labelClasses: {
          'mdc-floating-label': true
        },
        lineRippleClasses: {
          'mdc-line-ripple': true
        },
        lineRippleStyles: {},
        outlineClasses: {},
        notchStyles: {}
      };
    },
    components: {
      TextfieldHelperText: TextfieldHelperText,
      TextfieldIcon: TextfieldIcon
    },
    computed: {
      inputPlaceHolder: function inputPlaceHolder() {
        return this.fullwidth ? this.label : undefined;
      },
      inputAriaControls: function inputAriaControls() {
        return this.help ? 'help-' + this.vma_uid_ : undefined;
      },
      hasLabel: function hasLabel() {
        return !this.fullwidth && !this.outline && this.label;
      },
      hasOutlineLabel: function hasOutlineLabel() {
        return this.hasOutline && this.label;
      },
      hasOutline: function hasOutline() {
        return !this.fullwidth && this.outline;
      },
      hasLineRipple: function hasLineRipple() {
        return !this.hasOutline && !this.multiline;
      },
      hasHelptext: function hasHelptext() {
        return this.$slots.helpText || this.helptext;
      }
    },
    watch: {
      disabled: function disabled() {
        this.foundation && this.foundation.setDisabled(this.disabled);
      },
      required: function required() {
        this.$refs.input && (this.$refs.input.required = this.required);
      },
      valid: function valid() {
        if (typeof this.valid !== 'undefined') {
          this.foundation && this.foundation.setValid(this.valid);
        }
      },
      dense: function dense() {
        this.$set(this.rootClasses, 'mdc-text-field--dense', this.dense);
      },
      value: function value(_value) {
        if (this.foundation) {
          if (_value !== this.foundation.getValue()) {
            this.foundation.setValue(_value);
          }
        }
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCTextFieldFoundation(_extends({
        addClass: function addClass(className) {
          _this.$set(_this.rootClasses, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.rootClasses, className);
        },
        hasClass: function hasClass(className) {
          _this.$refs.root.classList.contains(className);
        },
        registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler(evtType, handler) {
          _this.$refs.root.addEventListener(evtType, handler);
        },
        deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler(evtType, handler) {
          _this.$refs.root.removeEventListener(evtType, handler);
        },
        isFocused: function isFocused() {
          return document.activeElement === _this.$refs.input;
        },
        isRtl: function isRtl() {
          return window.getComputedStyle(_this.$refs.root).getPropertyValue('direction') === 'rtl';
        },
        registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler(handler) {
          var getAttributesList = function getAttributesList(mutationsList) {
            return mutationsList.map(function (mutation) {
              return mutation.attributeName;
            });
          };

          var observer = new MutationObserver(function (mutationsList) {
            return handler(getAttributesList(mutationsList));
          });
          var targetNode = _this.$refs.input;
          var config = {
            attributes: true
          };
          observer.observe(targetNode, config);
          return observer;
        },
        deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler(observer) {
          observer.disconnect();
        }
      }, this.getInputAdapterMethods(), this.getLabelAdapterMethods(), this.getLineRippleAdapterMethods(), this.getOutlineAdapterMethods()), {
        helperText: this.$refs.helpertextEl ? this.$refs.helpertextEl.foundation : void 0,
        leadingIcon: this.$refs.leadingIconEl ? this.$refs.leadingIconEl.foundation : void 0,
        trailingIcon: this.$refs.trailingIconEl ? this.$refs.trailingIconEl.foundation : void 0
      });
      this.foundation.init();
      this.foundation.setValue(this.value);
      this.foundation.setDisabled(this.disabled);
      this.$refs.input && (this.$refs.input.required = this.required);

      if (typeof this.valid !== 'undefined') {
        this.foundation.setValid(this.valid);
      }

      if (this.textbox) {
        this.ripple = new RippleBase(this);
        this.ripple.init();
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation && this.foundation.destroy();
      this.ripple && this.ripple.destroy();
    },
    methods: {
      getInputAdapterMethods: function getInputAdapterMethods() {
        var _this2 = this;

        return {
          registerInputInteractionHandler: function registerInputInteractionHandler(evtType, handler) {
            _this2.$refs.input.addEventListener(evtType, handler, applyPassive());
          },
          deregisterInputInteractionHandler: function deregisterInputInteractionHandler(evtType, handler) {
            _this2.$refs.input.removeEventListener(evtType, handler, applyPassive());
          },
          getNativeInput: function getNativeInput() {
            return _this2.$refs.input;
          }
        };
      },
      getLabelAdapterMethods: function getLabelAdapterMethods() {
        var _this3 = this;

        return {
          shakeLabel: function shakeLabel(shouldShake) {
            _this3.$refs.labelEl && _this3.$refs.labelEl.shake(shouldShake);
          },
          floatLabel: function floatLabel(shouldFloat) {
            _this3.$refs.labelEl && _this3.$refs.labelEl.float(shouldFloat);
          },
          hasLabel: function hasLabel() {
            return !!_this3.$refs.labelEl || !!_this3.$refs.notchedEl;
          },
          getLabelWidth: function getLabelWidth() {
            return _this3.$refs.labelEl && _this3.$refs.labelEl.getWidth();
          }
        };
      },
      getLineRippleAdapterMethods: function getLineRippleAdapterMethods() {
        var _this4 = this;

        return {
          deactivateLineRipple: function deactivateLineRipple() {
            if (_this4.$refs.lineRippleEl) {
              _this4.$refs.lineRippleEl.deactivate();
            }
          },
          activateLineRipple: function activateLineRipple() {
            if (_this4.$refs.lineRippleEl) {
              _this4.$refs.lineRippleEl.activate();
            }
          },
          setLineRippleTransformOrigin: function setLineRippleTransformOrigin(normalizedX) {
            if (_this4.$refs.lineRippleEl) {
              _this4.$refs.lineRippleEl.setRippleCenter(normalizedX);
            }
          }
        };
      },
      getOutlineAdapterMethods: function getOutlineAdapterMethods() {
        var _this5 = this;

        return {
          hasOutline: function hasOutline() {
            return !!_this5.hasOutline;
          },
          notchOutline: function notchOutline(notchWidth, isRtl) {
            return _this5.$refs.labelEl.notch(notchWidth, isRtl);
          },
          closeOutline: function closeOutline() {
            return _this5.$refs.labelEl.closeNotch();
          }
        };
      },
      updateValue: function updateValue(value) {
        this.$emit('model', value);
      },
      focus: function focus() {
        this.$refs.input && this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input && this.$refs.input.blur();
      }
    }
  };

  /* script */
  const __vue_script__$11 = script$11;

  /* template */
  var __vue_render__$Y = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "mdc-textfield-wrapper",
        style: { width: _vm.fullwidth ? "100%" : undefined },
        attrs: { id: _vm.id }
      },
      [
        _c(
          "div",
          { ref: "root", class: _vm.rootClasses },
          [
            _vm.$slots.leadingIcon
              ? _c(
                  "textfield-icon",
                  { ref: "leadingIconEl" },
                  [_vm._t("leadingIcon")],
                  2
                )
              : _vm._e(),
            _vm._v(" "),
            _vm.multiline
              ? _c(
                  "textarea",
                  _vm._g(
                    _vm._b(
                      {
                        ref: "input",
                        class: _vm.inputClasses,
                        attrs: {
                          id: _vm.vma_uid_,
                          minlength: _vm.minlength,
                          maxlength: _vm.maxlength,
                          placeholder: _vm.inputPlaceHolder,
                          "aria-label": _vm.inputPlaceHolder,
                          "aria-controls": _vm.inputAriaControls,
                          rows: _vm.rows,
                          cols: _vm.cols
                        },
                        on: {
                          input: function($event) {
                            return _vm.updateValue($event.target.value)
                          }
                        }
                      },
                      "textarea",
                      _vm.$attrs,
                      false
                    ),
                    _vm.$listeners
                  )
                )
              : _c(
                  "input",
                  _vm._g(
                    _vm._b(
                      {
                        ref: "input",
                        class: _vm.inputClasses,
                        attrs: {
                          id: _vm.vma_uid_,
                          type: _vm.type,
                          minlength: _vm.minlength,
                          maxlength: _vm.maxlength,
                          placeholder: _vm.inputPlaceHolder,
                          "aria-label": _vm.inputPlaceHolder,
                          "aria-controls": _vm.inputAriaControls
                        },
                        on: {
                          input: function($event) {
                            return _vm.updateValue($event.target.value)
                          }
                        }
                      },
                      "input",
                      _vm.$attrs,
                      false
                    ),
                    _vm.$listeners
                  )
                ),
            _vm._v(" "),
            _vm.hasLabel
              ? _c(
                  "mdc-floating-label",
                  { ref: "labelEl", attrs: { for: _vm.vma_uid_ } },
                  [_vm._v(_vm._s(_vm.label))]
                )
              : _vm._e(),
            _vm._v(" "),
            _vm.$slots.trailingIcon
              ? _c(
                  "textfield-icon",
                  { ref: "trailingIconEl" },
                  [_vm._t("trailingIcon")],
                  2
                )
              : _vm._e(),
            _vm._v(" "),
            _vm.hasOutline
              ? _c("mdc-notched-outline", { ref: "labelEl" }, [
                  _vm._v(_vm._s(_vm.label))
                ])
              : _vm._e(),
            _vm._v(" "),
            _vm.hasLineRipple
              ? _c("mdc-line-ripple", { ref: "lineRippleEl" })
              : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _vm.hasHelptext
          ? _c(
              "textfield-helper-text",
              {
                ref: "helpertextEl",
                attrs: {
                  id: "help-" + _vm.vma_uid_,
                  helptext: _vm.helptext,
                  persistent: _vm.helptextPersistent,
                  validation: _vm.helptextValidation
                }
              },
              [_vm._t("helpText")],
              2
            )
          : _vm._e()
      ],
      1
    )
  };
  var __vue_staticRenderFns__$Y = [];
  __vue_render__$Y._withStripped = true;

    /* style */
    const __vue_inject_styles__$11 = undefined;
    /* scoped */
    const __vue_scope_id__$11 = undefined;
    /* module identifier */
    const __vue_module_identifier__$11 = undefined;
    /* functional template */
    const __vue_is_functional_template__$11 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTextField = normalizeComponent_1(
      { render: __vue_render__$Y, staticRenderFns: __vue_staticRenderFns__$Y },
      __vue_inject_styles__$11,
      __vue_script__$11,
      __vue_scope_id__$11,
      __vue_is_functional_template__$11,
      __vue_module_identifier__$11,
      undefined,
      undefined
    );

  var VueMDCTextfield = BasePlugin({
    mdcTextField: mdcTextField
  });

  //
  var THEME_COLORS = ['primary', 'secondary', 'background', 'primary-light', 'secondary-light', 'secondary-dark', 'primary-dark'];
  var THEME_STYLES = ['text-primary', 'text-secondary', 'text-hint', 'text-icon', 'text-disabled'];
  var script$12 = {
    name: 'mdc-theme',
    components: {
      CustomElement: CustomElement
    },
    props: {
      tag: {
        type: String,
        default: 'div'
      },
      color: String,
      background: String
    },
    computed: {
      classes: function classes() {
        var classes = {};

        if (this.color && THEME_COLORS.indexOf(this.color) !== -1) {
          classes["mdc-theme--".concat(this.color)] = true;
        }

        if (this.background && THEME_COLORS.indexOf(this.background) !== -1) {
          classes["mdc-theme--".concat(this.background, "-bg")] = true;

          if (this.color && THEME_STYLES.indexOf(this.color) !== -1) {
            classes["mdc-theme--".concat(this.color, "-on-").concat(this.background)] = true;
          }
        }

        return classes;
      }
    }
  };

  /* script */
  const __vue_script__$12 = script$12;

  /* template */
  var __vue_render__$Z = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "custom-element",
      { staticClass: "mdc-theme", class: _vm.classes, attrs: { tag: _vm.tag } },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$Z = [];
  __vue_render__$Z._withStripped = true;

    /* style */
    const __vue_inject_styles__$12 = undefined;
    /* scoped */
    const __vue_scope_id__$12 = undefined;
    /* module identifier */
    const __vue_module_identifier__$12 = undefined;
    /* functional template */
    const __vue_is_functional_template__$12 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTheme = normalizeComponent_1(
      { render: __vue_render__$Z, staticRenderFns: __vue_staticRenderFns__$Z },
      __vue_inject_styles__$12,
      __vue_script__$12,
      __vue_scope_id__$12,
      __vue_is_functional_template__$12,
      __vue_module_identifier__$12,
      undefined,
      undefined
    );

  var VueMDCTheme = BasePlugin({
    mdcTheme: mdcTheme
  });

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$r = {
    FIXED: 'mdc-toolbar--fixed',
    FIXED_AT_LAST_ROW: 'mdc-toolbar--fixed-at-last-row',
    FIXED_LASTROW: 'mdc-toolbar--fixed-lastrow-only',
    FLEXIBLE_DEFAULT_BEHAVIOR: 'mdc-toolbar--flexible-default-behavior',
    FLEXIBLE_MAX: 'mdc-toolbar--flexible-space-maximized',
    FLEXIBLE_MIN: 'mdc-toolbar--flexible-space-minimized',
    TOOLBAR_ROW_FLEXIBLE: 'mdc-toolbar--flexible'
  };
  var strings$t = {
    CHANGE_EVENT: 'MDCToolbar:change',
    FIRST_ROW_SELECTOR: '.mdc-toolbar__row:first-child',
    ICON_SELECTOR: '.mdc-toolbar__icon',
    TITLE_SELECTOR: '.mdc-toolbar__title'
  };
  var numbers$a = {
    MAX_TITLE_SIZE: 2.125,
    MIN_TITLE_SIZE: 1.25,
    TOOLBAR_MOBILE_BREAKPOINT: 600,
    TOOLBAR_ROW_HEIGHT: 64,
    TOOLBAR_ROW_MOBILE_HEIGHT: 56
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCToolbarFoundation =
  /** @class */
  function (_super) {
    __extends(MDCToolbarFoundation, _super);

    function MDCToolbarFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCToolbarFoundation.defaultAdapter, adapter)) || this;

      _this.checkRowHeightFrame_ = 0;
      _this.scrollFrame_ = 0;
      _this.executedLastChange_ = false;
      _this.isFixed_ = false;
      _this.isFixedLastRow_ = false;
      _this.hasFlexibleFirstRow_ = false;
      _this.useFlexDefaultBehavior_ = false;
      _this.calculations_ = {
        flexibleExpansionHeight: 0,
        flexibleExpansionRatio: 0,
        maxTranslateYDistance: 0,
        maxTranslateYRatio: 0,
        scrollThreshold: 0,
        scrollThresholdRatio: 0,
        toolbarHeight: 0,
        toolbarRatio: 0,
        toolbarRowHeight: 0
      };
      return _this;
    }

    Object.defineProperty(MDCToolbarFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$r;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCToolbarFoundation, "strings", {
      get: function get() {
        return strings$t;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCToolbarFoundation, "numbers", {
      get: function get() {
        return numbers$a;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCToolbarFoundation, "defaultAdapter", {
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          hasClass: function hasClass() {
            return false;
          },
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          registerScrollHandler: function registerScrollHandler() {
            return undefined;
          },
          deregisterScrollHandler: function deregisterScrollHandler() {
            return undefined;
          },
          registerResizeHandler: function registerResizeHandler() {
            return undefined;
          },
          deregisterResizeHandler: function deregisterResizeHandler() {
            return undefined;
          },
          getViewportWidth: function getViewportWidth() {
            return 0;
          },
          getViewportScrollY: function getViewportScrollY() {
            return 0;
          },
          getOffsetHeight: function getOffsetHeight() {
            return 0;
          },
          getFirstRowElementOffsetHeight: function getFirstRowElementOffsetHeight() {
            return 0;
          },
          notifyChange: function notifyChange() {
            return undefined;
          },
          setStyle: function setStyle() {
            return undefined;
          },
          setStyleForTitleElement: function setStyleForTitleElement() {
            return undefined;
          },
          setStyleForFlexibleRowElement: function setStyleForFlexibleRowElement() {
            return undefined;
          },
          setStyleForFixedAdjustElement: function setStyleForFixedAdjustElement() {
            return undefined;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCToolbarFoundation.prototype.init = function () {
      var _this = this;

      this.isFixed_ = this.adapter_.hasClass(cssClasses$r.FIXED);
      this.isFixedLastRow_ = this.adapter_.hasClass(cssClasses$r.FIXED_LASTROW) && this.isFixed_;
      this.hasFlexibleFirstRow_ = this.adapter_.hasClass(cssClasses$r.TOOLBAR_ROW_FLEXIBLE);

      if (this.hasFlexibleFirstRow_) {
        this.useFlexDefaultBehavior_ = this.adapter_.hasClass(cssClasses$r.FLEXIBLE_DEFAULT_BEHAVIOR);
      }

      this.resizeHandler_ = function () {
        return _this.checkRowHeight_();
      };

      this.scrollHandler_ = function () {
        return _this.updateToolbarStyles_();
      };

      this.adapter_.registerResizeHandler(this.resizeHandler_);
      this.adapter_.registerScrollHandler(this.scrollHandler_);
      this.initKeyRatio_();
      this.setKeyHeights_();
    };

    MDCToolbarFoundation.prototype.destroy = function () {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
      this.adapter_.deregisterScrollHandler(this.scrollHandler_);
    };

    MDCToolbarFoundation.prototype.updateAdjustElementStyles = function () {
      if (this.isFixed_) {
        this.adapter_.setStyleForFixedAdjustElement('margin-top', this.calculations_.toolbarHeight + "px");
      }
    };

    MDCToolbarFoundation.prototype.getFlexibleExpansionRatio_ = function (scrollTop) {
      // To prevent division by zero when there is no flexibleExpansionHeight
      var delta = 0.0001;
      return Math.max(0, 1 - scrollTop / (this.calculations_.flexibleExpansionHeight + delta));
    };

    MDCToolbarFoundation.prototype.checkRowHeight_ = function () {
      var _this = this;

      cancelAnimationFrame(this.checkRowHeightFrame_);
      this.checkRowHeightFrame_ = requestAnimationFrame(function () {
        return _this.setKeyHeights_();
      });
    };

    MDCToolbarFoundation.prototype.setKeyHeights_ = function () {
      var newToolbarRowHeight = this.getRowHeight_();

      if (newToolbarRowHeight !== this.calculations_.toolbarRowHeight) {
        this.calculations_.toolbarRowHeight = newToolbarRowHeight;
        this.calculations_.toolbarHeight = this.calculations_.toolbarRatio * this.calculations_.toolbarRowHeight;
        this.calculations_.flexibleExpansionHeight = this.calculations_.flexibleExpansionRatio * this.calculations_.toolbarRowHeight;
        this.calculations_.maxTranslateYDistance = this.calculations_.maxTranslateYRatio * this.calculations_.toolbarRowHeight;
        this.calculations_.scrollThreshold = this.calculations_.scrollThresholdRatio * this.calculations_.toolbarRowHeight;
        this.updateAdjustElementStyles();
        this.updateToolbarStyles_();
      }
    };

    MDCToolbarFoundation.prototype.updateToolbarStyles_ = function () {
      var _this = this;

      cancelAnimationFrame(this.scrollFrame_);
      this.scrollFrame_ = requestAnimationFrame(function () {
        var scrollTop = _this.adapter_.getViewportScrollY();

        var hasScrolledOutOfThreshold = _this.scrolledOutOfThreshold_(scrollTop);

        if (hasScrolledOutOfThreshold && _this.executedLastChange_) {
          return;
        }

        var flexibleExpansionRatio = _this.getFlexibleExpansionRatio_(scrollTop);

        _this.updateToolbarFlexibleState_(flexibleExpansionRatio);

        if (_this.isFixedLastRow_) {
          _this.updateToolbarFixedState_(scrollTop);
        }

        if (_this.hasFlexibleFirstRow_) {
          _this.updateFlexibleRowElementStyles_(flexibleExpansionRatio);
        }

        _this.executedLastChange_ = hasScrolledOutOfThreshold;

        _this.adapter_.notifyChange({
          flexibleExpansionRatio: flexibleExpansionRatio
        });
      });
    };

    MDCToolbarFoundation.prototype.scrolledOutOfThreshold_ = function (scrollTop) {
      return scrollTop > this.calculations_.scrollThreshold;
    };

    MDCToolbarFoundation.prototype.initKeyRatio_ = function () {
      var toolbarRowHeight = this.getRowHeight_();
      var firstRowMaxRatio = this.adapter_.getFirstRowElementOffsetHeight() / toolbarRowHeight;
      this.calculations_.toolbarRatio = this.adapter_.getOffsetHeight() / toolbarRowHeight;
      this.calculations_.flexibleExpansionRatio = firstRowMaxRatio - 1;
      this.calculations_.maxTranslateYRatio = this.isFixedLastRow_ ? this.calculations_.toolbarRatio - firstRowMaxRatio : 0;
      this.calculations_.scrollThresholdRatio = (this.isFixedLastRow_ ? this.calculations_.toolbarRatio : firstRowMaxRatio) - 1;
    };

    MDCToolbarFoundation.prototype.getRowHeight_ = function () {
      var breakpoint = numbers$a.TOOLBAR_MOBILE_BREAKPOINT;
      return this.adapter_.getViewportWidth() < breakpoint ? numbers$a.TOOLBAR_ROW_MOBILE_HEIGHT : numbers$a.TOOLBAR_ROW_HEIGHT;
    };

    MDCToolbarFoundation.prototype.updateToolbarFlexibleState_ = function (flexibleExpansionRatio) {
      this.adapter_.removeClass(cssClasses$r.FLEXIBLE_MAX);
      this.adapter_.removeClass(cssClasses$r.FLEXIBLE_MIN);

      if (flexibleExpansionRatio === 1) {
        this.adapter_.addClass(cssClasses$r.FLEXIBLE_MAX);
      } else if (flexibleExpansionRatio === 0) {
        this.adapter_.addClass(cssClasses$r.FLEXIBLE_MIN);
      }
    };

    MDCToolbarFoundation.prototype.updateToolbarFixedState_ = function (scrollTop) {
      var translateDistance = Math.max(0, Math.min(scrollTop - this.calculations_.flexibleExpansionHeight, this.calculations_.maxTranslateYDistance));
      this.adapter_.setStyle('transform', "translateY(" + -translateDistance + "px)");

      if (translateDistance === this.calculations_.maxTranslateYDistance) {
        this.adapter_.addClass(cssClasses$r.FIXED_AT_LAST_ROW);
      } else {
        this.adapter_.removeClass(cssClasses$r.FIXED_AT_LAST_ROW);
      }
    };

    MDCToolbarFoundation.prototype.updateFlexibleRowElementStyles_ = function (flexibleExpansionRatio) {
      if (this.isFixed_) {
        var height = this.calculations_.flexibleExpansionHeight * flexibleExpansionRatio;
        this.adapter_.setStyleForFlexibleRowElement('height', height + this.calculations_.toolbarRowHeight + "px");
      }

      if (this.useFlexDefaultBehavior_) {
        this.updateElementStylesDefaultBehavior_(flexibleExpansionRatio);
      }
    };

    MDCToolbarFoundation.prototype.updateElementStylesDefaultBehavior_ = function (flexibleExpansionRatio) {
      var maxTitleSize = numbers$a.MAX_TITLE_SIZE;
      var minTitleSize = numbers$a.MIN_TITLE_SIZE;
      var currentTitleSize = (maxTitleSize - minTitleSize) * flexibleExpansionRatio + minTitleSize;
      this.adapter_.setStyleForTitleElement('font-size', currentTitleSize + "rem");
    };

    return MDCToolbarFoundation;
  }(MDCFoundation);

  //
  var script$13 = {
    name: 'mdc-toolbar',
    props: {
      fixed: Boolean,
      waterfall: Boolean,
      'fixed-lastrow': Boolean,
      flexible: Boolean,
      'flexible-default': {
        type: Boolean,
        default: true
      }
    },
    data: function data() {
      return {
        rootClasses: {
          'mdc-toolbar': true,
          'mdc-toolbar--fixed': this.fixed || this.waterfall || this.fixedLastrow,
          'mdc-toolbar--waterfall': this.waterfall,
          'mdc-toolbar--fixed-lastrow-only': this.fixedLastrow,
          'mdc-toolbar--flexible': this.flexible,
          'mdc-toolbar--flexible-default-behavior': this.flexible && this.flexibleDefault
        },
        rootStyles: {},
        adjustStyles: {// to avoid top margin collapse with :after el
          // 0.1 px should be rounded to 0px
          // TODO: find a better trick
          // height: '0.1px'
        },
        foundation: null
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.foundation = new MDCToolbarFoundation({
        addClass: function addClass(className) {
          _this.$set(_this.rootClasses, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.rootClasses, className);
        },
        hasClass: function hasClass(className) {
          return _this.$refs.root.classList.contains(className);
        },
        registerScrollHandler: function registerScrollHandler(handler) {
          window.addEventListener('scroll', handler);
        },
        deregisterScrollHandler: function deregisterScrollHandler(handler) {
          window.removeEventListener('scroll', handler);
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          window.removeEventListener('resize', handler);
        },
        getViewportWidth: function getViewportWidth() {
          return window.innerWidth;
        },
        getViewportScrollY: function getViewportScrollY() {
          return window.pageYOffset;
        },
        getOffsetHeight: function getOffsetHeight() {
          return _this.$refs.root.offsetHeight;
        },
        getFirstRowElementOffsetHeight: function getFirstRowElementOffsetHeight() {
          var el = _this.$refs.root.querySelector(MDCToolbarFoundation.strings.FIRST_ROW_SELECTOR);

          return el ? el.offsetHeight : undefined;
        },
        notifyChange: function notifyChange(evtData) {
          _this.$emit('change', evtData);
        },
        setStyle: function setStyle(property, value) {
          _this.$set(_this.rootStyles, property, value);
        },
        setStyleForTitleElement: function setStyleForTitleElement(property, value) {
          var el = _this.$refs.root.querySelector(MDCToolbarFoundation.strings.TITLE_SELECTOR);

          if (el) el.style.setProperty(property, value);
        },
        setStyleForFlexibleRowElement: function setStyleForFlexibleRowElement(property, value) {
          var el = _this.$refs.root.querySelector(MDCToolbarFoundation.strings.FIRST_ROW_SELECTOR);

          if (el) el.style.setProperty(property, value);
        },
        setStyleForFixedAdjustElement: function setStyleForFixedAdjustElement(property, value) {
          _this.$set(_this.adjustStyles, property, value);
        }
      });
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$13 = script$13;

  /* template */
  var __vue_render__$_ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("header", { staticClass: "mdc-toolbar-wrapper" }, [
      _c(
        "div",
        { ref: "root", class: _vm.rootClasses, style: _vm.rootStyles },
        [_vm._t("default")],
        2
      ),
      _vm._v(" "),
      _vm.fixed || _vm.waterfall || _vm.fixedLastrow
        ? _c("div", {
            ref: "fixed-adjust",
            staticClass: "mdc-toolbar-fixed-adjust",
            style: _vm.adjustStyles
          })
        : _vm._e()
    ])
  };
  var __vue_staticRenderFns__$_ = [];
  __vue_render__$_._withStripped = true;

    /* style */
    const __vue_inject_styles__$13 = undefined;
    /* scoped */
    const __vue_scope_id__$13 = undefined;
    /* module identifier */
    const __vue_module_identifier__$13 = undefined;
    /* functional template */
    const __vue_is_functional_template__$13 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcToolbar = normalizeComponent_1(
      { render: __vue_render__$_, staticRenderFns: __vue_staticRenderFns__$_ },
      __vue_inject_styles__$13,
      __vue_script__$13,
      __vue_scope_id__$13,
      __vue_is_functional_template__$13,
      __vue_module_identifier__$13,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  var script$14 = {
    name: 'mdc-toolbar-row'
  };

  /* script */
  const __vue_script__$14 = script$14;

  /* template */
  var __vue_render__$$ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "mdc-toolbar-row mdc-toolbar__row" },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$$ = [];
  __vue_render__$$._withStripped = true;

    /* style */
    const __vue_inject_styles__$14 = undefined;
    /* scoped */
    const __vue_scope_id__$14 = undefined;
    /* module identifier */
    const __vue_module_identifier__$14 = undefined;
    /* functional template */
    const __vue_is_functional_template__$14 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcToolbarRow = normalizeComponent_1(
      { render: __vue_render__$$, staticRenderFns: __vue_staticRenderFns__$$ },
      __vue_inject_styles__$14,
      __vue_script__$14,
      __vue_scope_id__$14,
      __vue_is_functional_template__$14,
      __vue_module_identifier__$14,
      undefined,
      undefined
    );

  //
  //
  //
  //
  //
  //
  //
  //
  var script$15 = {
    name: 'mdc-toolbar-section',
    props: {
      'align-start': Boolean,
      'align-end': Boolean,
      'shrink-to-fit': Boolean
    },
    data: function data() {
      return {
        classes: {
          'mdc-toolbar__section--align-start': this.alignStart,
          'mdc-toolbar__section--align-end': this.alignEnd,
          'mdc-toolbar__section--shrink-to-fit': this.shrinkToFit
        }
      };
    }
  };

  /* script */
  const __vue_script__$15 = script$15;

  /* template */
  var __vue_render__$10 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "section",
      {
        staticClass: "mdc-toolbar-section mdc-toolbar__section",
        class: _vm.classes
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$10 = [];
  __vue_render__$10._withStripped = true;

    /* style */
    const __vue_inject_styles__$15 = undefined;
    /* scoped */
    const __vue_scope_id__$15 = undefined;
    /* module identifier */
    const __vue_module_identifier__$15 = undefined;
    /* functional template */
    const __vue_is_functional_template__$15 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcToolbarSection = normalizeComponent_1(
      { render: __vue_render__$10, staticRenderFns: __vue_staticRenderFns__$10 },
      __vue_inject_styles__$15,
      __vue_script__$15,
      __vue_scope_id__$15,
      __vue_is_functional_template__$15,
      __vue_module_identifier__$15,
      undefined,
      undefined
    );

  //
  var script$16 = {
    name: 'mdc-toolbar-menu-icon',
    mixins: [DispatchEventMixin],
    props: {
      icon: {
        type: String,
        default: 'menu'
      }
    }
  };

  /* script */
  const __vue_script__$16 = script$16;

  /* template */
  var __vue_render__$11 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      _vm._g(
        {
          staticClass: "mdc-toolbar-menu-icon mdc-toolbar__menu-icon",
          class: { "material-icons": !!_vm.icon }
        },
        _vm.listeners
      ),
      [_vm._t("default", [_vm._v(_vm._s(_vm.icon))])],
      2
    )
  };
  var __vue_staticRenderFns__$11 = [];
  __vue_render__$11._withStripped = true;

    /* style */
    const __vue_inject_styles__$16 = undefined;
    /* scoped */
    const __vue_scope_id__$16 = undefined;
    /* module identifier */
    const __vue_module_identifier__$16 = undefined;
    /* functional template */
    const __vue_is_functional_template__$16 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcToolbarMenuIcon = normalizeComponent_1(
      { render: __vue_render__$11, staticRenderFns: __vue_staticRenderFns__$11 },
      __vue_inject_styles__$16,
      __vue_script__$16,
      __vue_scope_id__$16,
      __vue_is_functional_template__$16,
      __vue_module_identifier__$16,
      undefined,
      undefined
    );

  //
  var script$17 = {
    name: 'mdc-toolbar-title',
    mixins: [DispatchEventMixin]
  };

  /* script */
  const __vue_script__$17 = script$17;

  /* template */
  var __vue_render__$12 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      _vm._g(
        { staticClass: "mdc-toolbar-title mdc-toolbar__title" },
        _vm.listeners
      ),
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$12 = [];
  __vue_render__$12._withStripped = true;

    /* style */
    const __vue_inject_styles__$17 = undefined;
    /* scoped */
    const __vue_scope_id__$17 = undefined;
    /* module identifier */
    const __vue_module_identifier__$17 = undefined;
    /* functional template */
    const __vue_is_functional_template__$17 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcToolbarTitle = normalizeComponent_1(
      { render: __vue_render__$12, staticRenderFns: __vue_staticRenderFns__$12 },
      __vue_inject_styles__$17,
      __vue_script__$17,
      __vue_scope_id__$17,
      __vue_is_functional_template__$17,
      __vue_module_identifier__$17,
      undefined,
      undefined
    );

  //
  var script$18 = {
    name: 'mdc-toolbar-icon',
    mixins: [DispatchEventMixin],
    props: {
      icon: String
    }
  };

  /* script */
  const __vue_script__$18 = script$18;

  /* template */
  var __vue_render__$13 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      _vm._g(
        {
          staticClass: "mdc-toolbar-icon mdc-toolbar__icon",
          class: { "material-icons": !!_vm.icon }
        },
        _vm.listeners
      ),
      [_vm._t("default", [_vm._v(_vm._s(_vm.icon))])],
      2
    )
  };
  var __vue_staticRenderFns__$13 = [];
  __vue_render__$13._withStripped = true;

    /* style */
    const __vue_inject_styles__$18 = undefined;
    /* scoped */
    const __vue_scope_id__$18 = undefined;
    /* module identifier */
    const __vue_module_identifier__$18 = undefined;
    /* functional template */
    const __vue_is_functional_template__$18 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcToolbarIcon = normalizeComponent_1(
      { render: __vue_render__$13, staticRenderFns: __vue_staticRenderFns__$13 },
      __vue_inject_styles__$18,
      __vue_script__$18,
      __vue_scope_id__$18,
      __vue_is_functional_template__$18,
      __vue_module_identifier__$18,
      undefined,
      undefined
    );

  var VueMDCToolbar = BasePlugin({
    mdcToolbar: mdcToolbar,
    mdcToolbarRow: mdcToolbarRow,
    mdcToolbarSection: mdcToolbarSection,
    mdcToolbarMenuIcon: mdcToolbarMenuIcon,
    mdcToolbarTitle: mdcToolbarTitle,
    mdcToolbarIcon: mdcToolbarIcon
  });

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var cssClasses$s = {
    FIXED_CLASS: 'mdc-top-app-bar--fixed',
    FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',
    SHORT_CLASS: 'mdc-top-app-bar--short',
    SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed',
    SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item'
  };
  var numbers$b = {
    DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
    MAX_TOP_APP_BAR_HEIGHT: 128
  };
  var strings$u = {
    ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',
    NAVIGATION_EVENT: 'MDCTopAppBar:nav',
    NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',
    ROOT_SELECTOR: '.mdc-top-app-bar',
    TITLE_SELECTOR: '.mdc-top-app-bar__title'
  };

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCTopAppBarBaseFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTopAppBarBaseFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */


    function MDCTopAppBarBaseFoundation(adapter) {
      var _this = _super.call(this, _assign({}, MDCTopAppBarBaseFoundation.defaultAdapter, adapter)) || this;

      _this.navClickHandler_ = function () {
        return _this.adapter_.notifyNavigationIconClicked();
      };

      return _this;
    }

    Object.defineProperty(MDCTopAppBarBaseFoundation, "strings", {
      get: function get() {
        return strings$u;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTopAppBarBaseFoundation, "cssClasses", {
      get: function get() {
        return cssClasses$s;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTopAppBarBaseFoundation, "numbers", {
      get: function get() {
        return numbers$b;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCTopAppBarBaseFoundation, "defaultAdapter", {
      /**
       * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.
       */
      get: function get() {
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          hasClass: function hasClass() {
            return false;
          },
          setStyle: function setStyle() {
            return undefined;
          },
          getTopAppBarHeight: function getTopAppBarHeight() {
            return 0;
          },
          registerNavigationIconInteractionHandler: function registerNavigationIconInteractionHandler() {
            return undefined;
          },
          deregisterNavigationIconInteractionHandler: function deregisterNavigationIconInteractionHandler() {
            return undefined;
          },
          notifyNavigationIconClicked: function notifyNavigationIconClicked() {
            return undefined;
          },
          registerScrollHandler: function registerScrollHandler() {
            return undefined;
          },
          deregisterScrollHandler: function deregisterScrollHandler() {
            return undefined;
          },
          registerResizeHandler: function registerResizeHandler() {
            return undefined;
          },
          deregisterResizeHandler: function deregisterResizeHandler() {
            return undefined;
          },
          getViewportScrollY: function getViewportScrollY() {
            return 0;
          },
          getTotalActionItems: function getTotalActionItems() {
            return 0;
          }
        }; // tslint:enable:object-literal-sort-keys
      },
      enumerable: true,
      configurable: true
    });

    MDCTopAppBarBaseFoundation.prototype.init = function () {
      this.initScrollHandler();
      this.initResizeHandler_();
      this.adapter_.registerNavigationIconInteractionHandler('click', this.navClickHandler_);
    };

    MDCTopAppBarBaseFoundation.prototype.destroy = function () {
      this.destroyScrollHandler();
      this.destroyResizeHandler_();
      this.adapter_.deregisterNavigationIconInteractionHandler('click', this.navClickHandler_);
    };

    MDCTopAppBarBaseFoundation.prototype.initScrollHandler = function () {
      if (this.scrollHandler_) {
        this.adapter_.registerScrollHandler(this.scrollHandler_);
      }
    };

    MDCTopAppBarBaseFoundation.prototype.destroyScrollHandler = function () {
      if (this.scrollHandler_) {
        this.adapter_.deregisterScrollHandler(this.scrollHandler_);
      }
    };

    MDCTopAppBarBaseFoundation.prototype.initResizeHandler_ = function () {
      if (this.resizeHandler_) {
        this.adapter_.registerResizeHandler(this.resizeHandler_);
      }
    };

    MDCTopAppBarBaseFoundation.prototype.destroyResizeHandler_ = function () {
      if (this.resizeHandler_) {
        this.adapter_.deregisterResizeHandler(this.resizeHandler_);
      }
    };

    return MDCTopAppBarBaseFoundation;
  }(MDCFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var INITIAL_VALUE = 0;

  var MDCTopAppBarFoundation =
  /** @class */
  function (_super) {
    __extends(MDCTopAppBarFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */


    function MDCTopAppBarFoundation(adapter) {
      var _this = _super.call(this, adapter) || this;
      /**
       * Indicates if the top app bar was docked in the previous scroll handler iteration.
       */


      _this.wasDocked_ = true;
      /**
       * Indicates if the top app bar is docked in the fully shown position.
       */

      _this.isDockedShowing_ = true;
      /**
       * Variable for current scroll position of the top app bar
       */

      _this.currentAppBarOffsetTop_ = 0;
      /**
       * Used to prevent the top app bar from being scrolled out of view during resize events
       */

      _this.isCurrentlyBeingResized_ = false;
      /**
       * The timeout that's used to throttle the resize events
       */

      _this.resizeThrottleId_ = INITIAL_VALUE;
      /**
       * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize
       */

      _this.resizeDebounceId_ = INITIAL_VALUE;
      _this.lastScrollPosition_ = _this.adapter_.getViewportScrollY();
      _this.topAppBarHeight_ = _this.adapter_.getTopAppBarHeight();

      _this.scrollHandler_ = function () {
        return _this.topAppBarScrollHandler_();
      };

      _this.resizeHandler_ = function () {
        return _this.topAppBarResizeHandler_();
      };

      return _this;
    }

    MDCTopAppBarFoundation.prototype.destroy = function () {
      _super.prototype.destroy.call(this);

      this.adapter_.setStyle('top', '');
    };
    /**
     * Function to determine if the DOM needs to update.
     */


    MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {
      var offscreenBoundaryTop = -this.topAppBarHeight_;
      var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;
      var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;
      var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen; // If it's partially showing, it can't be docked.

      if (partiallyShowing) {
        this.wasDocked_ = false;
      } else {
        // Not previously docked and not partially showing, it's now docked.
        if (!this.wasDocked_) {
          this.wasDocked_ = true;
          return true;
        } else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {
          this.isDockedShowing_ = hasAnyPixelsOnscreen;
          return true;
        }
      }

      return partiallyShowing;
    };
    /**
     * Function to move the top app bar if needed.
     */


    MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {
      if (this.checkForUpdate_()) {
        // Once the top app bar is fully hidden we use the max potential top app bar height as our offset
        // so the top app bar doesn't show if the window resizes and the new height > the old height.
        var offset = this.currentAppBarOffsetTop_;

        if (Math.abs(offset) >= this.topAppBarHeight_) {
          offset = -numbers$b.MAX_TOP_APP_BAR_HEIGHT;
        }

        this.adapter_.setStyle('top', offset + 'px');
      }
    };
    /**
     * Scroll handler for the default scroll behavior of the top app bar.
     */


    MDCTopAppBarFoundation.prototype.topAppBarScrollHandler_ = function () {
      var currentScrollPosition = Math.max(this.adapter_.getViewportScrollY(), 0);
      var diff = currentScrollPosition - this.lastScrollPosition_;
      this.lastScrollPosition_ = currentScrollPosition; // If the window is being resized the lastScrollPosition_ needs to be updated but the
      // current scroll of the top app bar should stay in the same position.

      if (!this.isCurrentlyBeingResized_) {
        this.currentAppBarOffsetTop_ -= diff;

        if (this.currentAppBarOffsetTop_ > 0) {
          this.currentAppBarOffsetTop_ = 0;
        } else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {
          this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;
        }

        this.moveTopAppBar_();
      }
    };
    /**
     * Top app bar resize handler that throttle/debounce functions that execute updates.
     */


    MDCTopAppBarFoundation.prototype.topAppBarResizeHandler_ = function () {
      var _this = this; // Throttle resize events 10 p/s


      if (!this.resizeThrottleId_) {
        this.resizeThrottleId_ = setTimeout(function () {
          _this.resizeThrottleId_ = INITIAL_VALUE;

          _this.throttledResizeHandler_();
        }, numbers$b.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
      }

      this.isCurrentlyBeingResized_ = true;

      if (this.resizeDebounceId_) {
        clearTimeout(this.resizeDebounceId_);
      }

      this.resizeDebounceId_ = setTimeout(function () {
        _this.topAppBarScrollHandler_();

        _this.isCurrentlyBeingResized_ = false;
        _this.resizeDebounceId_ = INITIAL_VALUE;
      }, numbers$b.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
    };
    /**
     * Throttled function that updates the top app bar scrolled values if the
     * top app bar height changes.
     */


    MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {
      var currentHeight = this.adapter_.getTopAppBarHeight();

      if (this.topAppBarHeight_ !== currentHeight) {
        this.wasDocked_ = false; // Since the top app bar has a different height depending on the screen width, this
        // will ensure that the top app bar remains in the correct location if
        // completely hidden and a resize makes the top app bar a different height.

        this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;
        this.topAppBarHeight_ = currentHeight;
      }

      this.topAppBarScrollHandler_();
    };

    return MDCTopAppBarFoundation;
  }(MDCTopAppBarBaseFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCShortTopAppBarFoundation =
  /** @class */
  function (_super) {
    __extends(MDCShortTopAppBarFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */


    function MDCShortTopAppBarFoundation(adapter) {
      var _this = _super.call(this, adapter) || this;
      /**
       * State variable for the current top app bar state
       */


      _this.isCollapsed = false;
      return _this;
    }

    MDCShortTopAppBarFoundation.prototype.init = function () {
      var _this = this;

      _super.prototype.init.call(this);

      if (this.adapter_.getTotalActionItems() > 0) {
        this.adapter_.addClass(cssClasses$s.SHORT_HAS_ACTION_ITEM_CLASS);
      }

      if (!this.adapter_.hasClass(cssClasses$s.SHORT_COLLAPSED_CLASS)) {
        this.scrollHandler_ = function () {
          return _this.shortAppBarScrollHandler_();
        };

        this.adapter_.registerScrollHandler(this.scrollHandler_);
        this.shortAppBarScrollHandler_();
      }
    };

    MDCShortTopAppBarFoundation.prototype.destroy = function () {
      _super.prototype.destroy.call(this);
    };
    /**
     * Scroll handler for applying/removing the collapsed modifier class on the short top app bar.
     */


    MDCShortTopAppBarFoundation.prototype.shortAppBarScrollHandler_ = function () {
      var currentScroll = this.adapter_.getViewportScrollY();

      if (currentScroll <= 0) {
        if (this.isCollapsed) {
          this.adapter_.removeClass(cssClasses$s.SHORT_COLLAPSED_CLASS);
          this.isCollapsed = false;
        }
      } else {
        if (!this.isCollapsed) {
          this.adapter_.addClass(cssClasses$s.SHORT_COLLAPSED_CLASS);
          this.isCollapsed = true;
        }
      }
    };

    return MDCShortTopAppBarFoundation;
  }(MDCTopAppBarBaseFoundation);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var MDCFixedTopAppBarFoundation =
  /** @class */
  function (_super) {
    __extends(MDCFixedTopAppBarFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */


    function MDCFixedTopAppBarFoundation(adapter) {
      var _this = _super.call(this, adapter) || this;
      /**
       * State variable for the previous scroll iteration top app bar state
       */


      _this.wasScrolled_ = false;

      _this.scrollHandler_ = function () {
        return _this.fixedScrollHandler_();
      };

      return _this;
    }
    /**
     * Scroll handler for applying/removing the modifier class on the fixed top app bar.
     */


    MDCFixedTopAppBarFoundation.prototype.fixedScrollHandler_ = function () {
      var currentScroll = this.adapter_.getViewportScrollY();

      if (currentScroll <= 0) {
        if (this.wasScrolled_) {
          this.adapter_.removeClass(cssClasses$s.FIXED_SCROLLED_CLASS);
          this.wasScrolled_ = false;
        }
      } else {
        if (!this.wasScrolled_) {
          this.adapter_.addClass(cssClasses$s.FIXED_SCROLLED_CLASS);
          this.wasScrolled_ = true;
        }
      }
    };

    return MDCFixedTopAppBarFoundation;
  }(MDCTopAppBarFoundation);

  var script$19 = {
    name: 'mdc-top-app-bar',
    mixins: [DispatchEventMixin],
    props: {
      short: Boolean,
      shortCollapsed: Boolean,
      prominent: Boolean,
      fixed: Boolean,
      title: String,
      icon: {
        type: [String, Boolean],
        default: 'menu'
      },
      iconClasses: Object,
      dense: Boolean
    },
    data: function data() {
      return {
        rootStyles: {
          top: '0'
        },
        rootClasses: {
          'mdc-top-app-bar': true,
          'mdc-top-app-bar--dense': this.dense,
          'mdc-top-app-bar--short': this.short,
          'mdc-top-app-bar--short-collapsed': this.shortCollapsed,
          'mdc-top-app-bar--prominent': this.prominent,
          'mdc-top-app-bar--fixed': this.fixed
        },
        foundation: null
      };
    },
    computed: {
      haveNavigationIcon: function haveNavigationIcon() {
        return !!this.icon || this.iconClasses;
      },
      naviconClasses: function naviconClasses() {
        return _objectSpread({
          'mdc-top-app-bar__navigation-icon': true,
          'material-icons': !!this.icon
        }, this.iconClasses);
      }
    },
    mounted: function mounted() {
      var _this = this;

      var adapter = {
        addClass: function addClass(className) {
          _this.$set(_this.rootClasses, className, true);
        },
        removeClass: function removeClass(className) {
          _this.$delete(_this.rootClasses, className);
        },
        hasClass: function hasClass(className) {
          return Boolean(_this.rootClasses[className]);
        },
        setStyle: function setStyle(property, value) {
          _this.$set(_this.rootStyles, property, value);
        },
        getTopAppBarHeight: function getTopAppBarHeight() {
          return _this.$el.clientHeight;
        },
        registerNavigationIconInteractionHandler: function registerNavigationIconInteractionHandler(type, handler) {
          if (_this.$refs.navigationIcon) {
            _this.$refs.navigationIcon.addEventListener(type, handler);
          }
        },
        deregisterNavigationIconInteractionHandler: function deregisterNavigationIconInteractionHandler(type, handler) {
          if (_this.$refs.navigationIcon) {
            _this.$refs.navigationIcon.removeEventListener(type, handler);
          }
        },
        notifyNavigationIconClicked: function notifyNavigationIconClicked() {
          _this.$emit('nav');
        },
        registerScrollHandler: function registerScrollHandler(handler) {
          window.addEventListener('scroll', handler);
        },
        deregisterScrollHandler: function deregisterScrollHandler(handler) {
          window.removeEventListener('scroll', handler);
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        getViewportScrollY: function getViewportScrollY() {
          return window.pageYOffset;
        },
        getTotalActionItems: function getTotalActionItems() {
          return _this.$refs.root.querySelectorAll(MDCTopAppBarFoundation.strings.ACTION_ITEM_SELECTOR).length;
        }
      };
      this.foundation = this.short ? new MDCShortTopAppBarFoundation(adapter) : this.fixed ? new MDCFixedTopAppBarFoundation(adapter) : new MDCTopAppBarFoundation(adapter);
      this.foundation.init();
    },
    beforeDestroy: function beforeDestroy() {
      this.foundation.destroy();
    }
  };

  /* script */
  const __vue_script__$19 = script$19;

  /* template */
  var __vue_render__$14 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "header",
      _vm._g(
        { ref: "root", class: _vm.rootClasses, style: _vm.rootStyles },
        _vm.$listeners
      ),
      [
        _c("div", { staticClass: "mdc-top-app-bar__row" }, [
          _c(
            "section",
            {
              staticClass:
                "mdc-top-app-bar__section mdc-top-app-bar__section--align-start"
            },
            [
              _vm.haveNavigationIcon
                ? _c(
                    "button",
                    _vm._g(
                      { ref: "navigationIcon", class: _vm.naviconClasses },
                      _vm.listeners
                    ),
                    [_vm._v("\n        " + _vm._s(_vm.icon) + "\n      ")]
                  )
                : _vm._e(),
              _vm._v(" "),
              !!_vm.title
                ? _c("span", { staticClass: "mdc-top-app-bar__title" }, [
                    _vm._v(_vm._s(_vm.title))
                  ])
                : _vm._e()
            ]
          ),
          _vm._v(" "),
          _vm.$slots.default
            ? _c(
                "section",
                {
                  staticClass:
                    "mdc-top-app-bar__section mdc-top-app-bar__section--align-end"
                },
                [_vm._t("default")],
                2
              )
            : _vm._e()
        ]),
        _vm._v(" "),
        _vm._t("tabs")
      ],
      2
    )
  };
  var __vue_staticRenderFns__$14 = [];
  __vue_render__$14._withStripped = true;

    /* style */
    const __vue_inject_styles__$19 = undefined;
    /* scoped */
    const __vue_scope_id__$19 = undefined;
    /* module identifier */
    const __vue_module_identifier__$19 = undefined;
    /* functional template */
    const __vue_is_functional_template__$19 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTopAppBar = normalizeComponent_1(
      { render: __vue_render__$14, staticRenderFns: __vue_staticRenderFns__$14 },
      __vue_inject_styles__$19,
      __vue_script__$19,
      __vue_scope_id__$19,
      __vue_is_functional_template__$19,
      __vue_module_identifier__$19,
      undefined,
      undefined
    );

  var script$1a = {
    name: 'mdc-top-app-bar-action',
    mixins: [DispatchEventMixin, RippleMixin],
    props: {
      tag: {
        type: String,
        default: 'a'
      },
      icon: String,
      iconClasses: Object
    },
    render: function render(h) {
      return h(this.tag, {
        class: {
          'mdc-top-app-bar-action': true,
          'mdc-top-app-bar--action': true,
          'mdc-top-app-bar__action-item': true,
          'material-icons': !!this.icon && !this.$slots.default
        },
        attrs: this.$attrs,
        on: this.$listeners
      }, this.$slots.default || [this.icon]);
    }
  };

  /* script */
  const __vue_script__$1a = script$1a;

  /* template */

    /* style */
    const __vue_inject_styles__$1a = undefined;
    /* scoped */
    const __vue_scope_id__$1a = undefined;
    /* module identifier */
    const __vue_module_identifier__$1a = undefined;
    /* functional template */
    const __vue_is_functional_template__$1a = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcTopAppBarAction = normalizeComponent_1(
      {},
      __vue_inject_styles__$1a,
      __vue_script__$1a,
      __vue_scope_id__$1a,
      __vue_is_functional_template__$1a,
      __vue_module_identifier__$1a,
      undefined,
      undefined
    );

  var script$1b = {
    name: 'mdc-fixed-adjust',
    props: {
      tag: {
        type: String,
        default: 'main'
      },
      dense: Boolean,
      short: Boolean,
      prominent: Boolean
    },
    computed: {
      classnames: function classnames() {}
    },
    render: function render(h) {
      var _class;

      var base = 'mdc-top-app-bar';
      var suffix = '-fixed-adjust';
      return h(this.tag, {
        class: (_class = {}, _defineProperty(_class, base + '--short' + suffix, this.short), _defineProperty(_class, base + '--dense' + suffix, this.dense && !this.prominent), _defineProperty(_class, base + '--dense-prominent' + suffix, this.dense && this.prominent), _defineProperty(_class, base + '--prominent' + suffix, !this.dense && this.prominent), _defineProperty(_class, base + '-' + suffix, !this.short && !this.dense && !this.prominent), _class),
        attrs: this.$attrs
      }, this.$slots.default);
    }
  };

  /* script */
  const __vue_script__$1b = script$1b;

  /* template */

    /* style */
    const __vue_inject_styles__$1b = undefined;
    /* scoped */
    const __vue_scope_id__$1b = undefined;
    /* module identifier */
    const __vue_module_identifier__$1b = undefined;
    /* functional template */
    const __vue_is_functional_template__$1b = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var mdcFixedAdjust = normalizeComponent_1(
      {},
      __vue_inject_styles__$1b,
      __vue_script__$1b,
      __vue_scope_id__$1b,
      __vue_is_functional_template__$1b,
      __vue_module_identifier__$1b,
      undefined,
      undefined
    );

  var VueMDCTopAppBar = BasePlugin({
    mdcTopAppBar: mdcTopAppBar,
    mdcTopAppBarAction: mdcTopAppBarAction,
    mdcFixedAdjust: mdcFixedAdjust
  });

  function mdcTypoMixin(defaultTag, defaultClassModifier) {
    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "mdc-".concat(defaultTag);
    return {
      props: {
        tag: {
          type: String,
          default: defaultTag
        },
        classModifier: {
          type: String,
          default: defaultClassModifier
        }
      },
      render: function render(createElement) {
        var _class;

        return createElement(this.tag, {
          class: (_class = {}, _defineProperty(_class, name, true), _defineProperty(_class, 'mdc-typography', true), _defineProperty(_class, "mdc-typography--".concat(this.classModifier), true), _class),
          attrs: this.$attrs,
          on: this.$listeners
        }, this.$slots.default);
      }
    };
  }

  var mdcHeadline1 = {
    name: 'mdc-headline1',
    mixins: [mdcTypoMixin('h1', 'headline1')]
  };
  var mdcHeadline2 = {
    name: 'mdc-headline2',
    mixins: [mdcTypoMixin('h2', 'headline2')]
  };
  var mdcHeadline3 = {
    name: 'mdc-headline3',
    mixins: [mdcTypoMixin('h3', 'headline3')]
  };
  var mdcHeadline4 = {
    name: 'mdc-headline4',
    mixins: [mdcTypoMixin('h4', 'headline4')]
  };
  var mdcHeadline5 = {
    name: 'mdc-headline5',
    mixins: [mdcTypoMixin('h5', 'headline5')]
  };
  var mdcHeadline6 = {
    name: 'mdc-headline6',
    mixins: [mdcTypoMixin('h6', 'headline6')]
  };
  var mdcSubtitle1 = {
    name: 'mdc-subtitle1',
    mixins: [mdcTypoMixin('h6', 'subtitle1')]
  };
  var mdcSubtitle2 = {
    name: 'mdc-subtitle2',
    mixins: [mdcTypoMixin('h6', 'subtitle2')]
  };
  var mdcBody1 = {
    name: 'mdc-body1',
    mixins: [mdcTypoMixin('p', 'body1')]
  };
  var mdcBody2 = {
    name: 'mdc-body2',
    mixins: [mdcTypoMixin('p', 'body2')]
  };
  var mdcButton1 = {
    name: 'mdc-button1',
    mixins: [mdcTypoMixin('span', 'button', 'mdc-button1')]
  };
  var mdcCaption = {
    name: 'mdc-caption',
    mixins: [mdcTypoMixin('span', 'caption')]
  };
  var mdcOverline = {
    name: 'mdc-overline',
    mixins: [mdcTypoMixin('span', 'overline')]
  };

  var VueMDCTypography = BasePlugin({
    mdcHeadline1: mdcHeadline1,
    mdcHeadline2: mdcHeadline2,
    mdcHeadline3: mdcHeadline3,
    mdcHeadline4: mdcHeadline4,
    mdcHeadline5: mdcHeadline5,
    mdcHeadline6: mdcHeadline6,
    mdcOverline: mdcOverline,
    mdcSubtitle1: mdcSubtitle1,
    mdcSubtitle2: mdcSubtitle2,
    mdcBody1: mdcBody1,
    mdcBody2: mdcBody2,
    mdcButton1: mdcButton1,
    mdcCaption: mdcCaption
  });

  //
  var plugin = {
    version: '0.19.4-beta',
    install: function install(vm) {
      vm.use(VueMDCButton);
      vm.use(VueMDCCard);
      vm.use(VueMDCCheckbox);
      vm.use(VueMDCChips);
      vm.use(VueMDCElevation);
      vm.use(VueMDCDialog);
      vm.use(VueMDCDrawer);
      vm.use(VueMDCElevation);
      vm.use(VueMDCFab);
      vm.use(VueMDCFloatingLabel);
      vm.use(VueMDCGridList);
      vm.use(VueMDCIcon);
      vm.use(VueMDCIconButton); // vm.use(VueMDCIconToggle)

      vm.use(VueMDCLayoutApp);
      vm.use(VueMDCLayoutGrid);
      vm.use(VueMDCLinearProgress);
      vm.use(VueMDCList);
      vm.use(VueMDCLineRipple);
      vm.use(VueMDCMenu);
      vm.use(VueMDCMaterialIcon);
      vm.use(VueMDCNotchedOutline);
      vm.use(VueMDCRadio);
      vm.use(VueMDCRipple);
      vm.use(VueMDCSelect);
      vm.use(VueMDCSlider);
      vm.use(VueMDCSnackbar);
      vm.use(VueMDCSwitch);
      vm.use(VueMDCTabs);
      vm.use(VueMDCTextfield);
      vm.use(VueMDCTheme);
      vm.use(VueMDCToolbar);
      vm.use(VueMDCTopAppBar);
      vm.use(VueMDCTypography);
    }
  };

  autoInit(plugin);

  return plugin;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
