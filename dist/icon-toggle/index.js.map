{"version":3,"file":"index.js","sources":["../../components/base/base-plugin.js","../../components/base/custom-event.js","../../components/base/uniqueid-mixin.js","../../node_modules/@material/base/foundation.js","../../node_modules/@material/icon-toggle/adapter.js","../../node_modules/@material/icon-toggle/constants.js","../../node_modules/@material/icon-toggle/foundation.js","../../components/icon-toggle/mdc-icon-toggle.vue","../../components/icon-toggle/index.js"],"sourcesContent":["export function BasePlugin(components) {\n  return {\n    version: '__VERSION__',\n    install: vm => {\n      for (let key in components) {\n        let component = components[key]\n        vm.component(component.name, component)\n      }\n    },\n    components\n  }\n}\n","/* global CustomEvent */\n\nexport function emitCustomEvent(el, evtType, evtData, shouldBubble = false) {\n  let evt\n  if (typeof CustomEvent === 'function') {\n    evt = new CustomEvent(evtType, {\n      detail: evtData,\n      bubbles: shouldBubble\n    })\n  } else {\n    evt = document.createEvent('CustomEvent')\n    evt.initCustomEvent(evtType, shouldBubble, false, evtData)\n  }\n  el.dispatchEvent(evt)\n}\n","const scope =\n  Math.floor(Math.random() * Math.floor(0x10000000)).toString() + '-'\n\nexport const VMAUniqueIdMixin = {\n  beforeCreate() {\n    this.vma_uid_ = scope + this._uid\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Icon Toggle. Provides an interface for managing\n * - classes\n * - dom\n * - inner text\n * - event handlers\n * - event dispatch\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\n\nclass MDCIconToggleAdapter {\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /**\n   * @param {string} type\n   * @param {!EventListener} handler\n   */\n  registerInteractionHandler(type, handler) {}\n\n  /**\n   * @param {string} type\n   * @param {!EventListener} handler\n   */\n  deregisterInteractionHandler(type, handler) {}\n\n  /** @param {string} text */\n  setText(text) {}\n\n  /** @return {number} */\n  getTabIndex() {}\n\n  /** @param {number} tabIndex */\n  setTabIndex(tabIndex) {}\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  getAttr(name) {}\n\n  /**\n   * @param {string} name\n   * @param {string} value\n   */\n  setAttr(name, value) {}\n\n  /** @param {string} name */\n  rmAttr(name) {}\n\n  /** @param {!IconToggleEvent} evtData */\n  notifyChange(evtData) {}\n}\n\n/**\n * @typedef {{\n *   isOn: boolean,\n * }}\n */\nlet IconToggleEvent;\n\nexport {MDCIconToggleAdapter, IconToggleEvent};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-icon-toggle',\n  DISABLED: 'mdc-icon-toggle--disabled',\n};\n\n/** @enum {string} */\nconst strings = {\n  DATA_TOGGLE_ON: 'data-toggle-on',\n  DATA_TOGGLE_OFF: 'data-toggle-off',\n  ARIA_PRESSED: 'aria-pressed',\n  ARIA_DISABLED: 'aria-disabled',\n  ARIA_LABEL: 'aria-label',\n  CHANGE_EVENT: 'MDCIconToggle:change',\n};\n\nexport {cssClasses, strings};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\n/* eslint-disable no-unused-vars */\nimport {MDCIconToggleAdapter, IconToggleEvent} from './adapter';\nimport {cssClasses, strings} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCIconToggleAdapter>}\n */\nclass MDCIconToggleFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get defaultAdapter() {\n    return {\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      registerInteractionHandler: (/* type: string, handler: EventListener */) => {},\n      deregisterInteractionHandler: (/* type: string, handler: EventListener */) => {},\n      setText: (/* text: string */) => {},\n      getTabIndex: () => /* number */ 0,\n      setTabIndex: (/* tabIndex: number */) => {},\n      getAttr: (/* name: string */) => /* string */ '',\n      setAttr: (/* name: string, value: string */) => {},\n      rmAttr: (/* name: string */) => {},\n      notifyChange: (/* evtData: IconToggleEvent */) => {},\n    };\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCIconToggleFoundation.defaultAdapter, adapter));\n\n    /** @private {boolean} */\n    this.on_ = false;\n\n    /** @private {boolean} */\n    this.disabled_ = false;\n\n    /** @private {number} */\n    this.savedTabIndex_ = -1;\n\n    /** @private {?IconToggleState} */\n    this.toggleOnData_ = null;\n\n    /** @private {?IconToggleState} */\n    this.toggleOffData_ = null;\n\n    this.clickHandler_ = /** @private {!EventListener} */ (\n      () => this.toggleFromEvt_());\n\n    /** @private {boolean} */\n    this.isHandlingKeydown_ = false;\n\n    this.keydownHandler_ = /** @private {!EventListener} */ ((/** @type {!KeyboardKey} */ evt) => {\n      if (isSpace(evt)) {\n        this.isHandlingKeydown_ = true;\n        return evt.preventDefault();\n      }\n    });\n\n    this.keyupHandler_ = /** @private {!EventListener} */ ((/** @type {!KeyboardKey} */ evt) => {\n      if (isSpace(evt)) {\n        this.isHandlingKeydown_ = false;\n        this.toggleFromEvt_();\n      }\n    });\n  }\n\n  init() {\n    this.refreshToggleData();\n    this.savedTabIndex_ = this.adapter_.getTabIndex();\n    this.adapter_.registerInteractionHandler('click', this.clickHandler_);\n    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);\n    this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);\n  }\n\n  refreshToggleData() {\n    const {DATA_TOGGLE_ON, DATA_TOGGLE_OFF} = MDCIconToggleFoundation.strings;\n    this.toggleOnData_ = this.parseJsonDataAttr_(DATA_TOGGLE_ON);\n    this.toggleOffData_ = this.parseJsonDataAttr_(DATA_TOGGLE_OFF);\n  }\n\n  destroy() {\n    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);\n    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);\n    this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);\n  }\n\n  /** @private */\n  toggleFromEvt_() {\n    this.toggle();\n    const {on_: isOn} = this;\n    this.adapter_.notifyChange(/** @type {!IconToggleEvent} */ ({isOn}));\n  }\n\n  /** @return {boolean} */\n  isOn() {\n    return this.on_;\n  }\n\n  /** @param {boolean=} isOn */\n  toggle(isOn = !this.on_) {\n    this.on_ = isOn;\n\n    const {ARIA_LABEL, ARIA_PRESSED} = MDCIconToggleFoundation.strings;\n\n    if (this.on_) {\n      this.adapter_.setAttr(ARIA_PRESSED, 'true');\n    } else {\n      this.adapter_.setAttr(ARIA_PRESSED, 'false');\n    }\n\n    const {cssClass: classToRemove} =\n        this.on_ ? this.toggleOffData_ : this.toggleOnData_;\n\n    if (classToRemove) {\n      this.adapter_.removeClass(classToRemove);\n    }\n\n    const {content, label, cssClass} = this.on_ ? this.toggleOnData_ : this.toggleOffData_;\n\n    if (cssClass) {\n      this.adapter_.addClass(cssClass);\n    }\n    if (content) {\n      this.adapter_.setText(content);\n    }\n    if (label) {\n      this.adapter_.setAttr(ARIA_LABEL, label);\n    }\n  }\n\n  /**\n   * @param {string} dataAttr\n   * @return {!IconToggleState}\n   */\n  parseJsonDataAttr_(dataAttr) {\n    const val = this.adapter_.getAttr(dataAttr);\n    if (!val) {\n      return {};\n    }\n    return /** @type {!IconToggleState} */ (JSON.parse(val));\n  }\n\n  /** @return {boolean} */\n  isDisabled() {\n    return this.disabled_;\n  }\n\n  /** @param {boolean} isDisabled */\n  setDisabled(isDisabled) {\n    this.disabled_ = isDisabled;\n\n    const {DISABLED} = MDCIconToggleFoundation.cssClasses;\n    const {ARIA_DISABLED} = MDCIconToggleFoundation.strings;\n\n    if (this.disabled_) {\n      this.savedTabIndex_ = this.adapter_.getTabIndex();\n      this.adapter_.setTabIndex(-1);\n      this.adapter_.setAttr(ARIA_DISABLED, 'true');\n      this.adapter_.addClass(DISABLED);\n    } else {\n      this.adapter_.setTabIndex(this.savedTabIndex_);\n      this.adapter_.rmAttr(ARIA_DISABLED);\n      this.adapter_.removeClass(DISABLED);\n    }\n  }\n\n  /** @return {boolean} */\n  isKeyboardActivated() {\n    return this.isHandlingKeydown_;\n  }\n}\n\n/**\n * @typedef {{\n *   key: string,\n *   keyCode: number\n * }}\n */\nlet KeyboardKey;\n\n/**\n * @param {!KeyboardKey} keyboardKey\n * @return {boolean}\n */\nfunction isSpace(keyboardKey) {\n  return keyboardKey.key === 'Space' || keyboardKey.keyCode === 32;\n}\n\n\n/** @record */\nclass IconToggleState {}\n\n/**\n * The aria-label value of the icon toggle, or undefined if there is no aria-label.\n * @export {string|undefined}\n */\nIconToggleState.prototype.label;\n\n/**\n * The text for the icon toggle, or undefined if there is no text.\n * @export {string|undefined}\n */\nIconToggleState.prototype.content;\n\n/**\n * The CSS class to add to the icon toggle, or undefined if there is no CSS class.\n * @export {string|undefined}\n */\nIconToggleState.prototype.cssClass;\n\nexport default MDCIconToggleFoundation;\n","<template>\n  <span \n    :class=\"classes\" \n    :style=\"styles\" \n    :tabindex=\"tabIndex\"\n    :data-toggle-on=\"toggleOnData\" \n    :data-toggle-off=\"toggleOffData\"\n    class=\"mdc-icon-toggle\"\n    role=\"button\"\n    aria-pressed=\"false\">\n    <i \n      :class=\"iconClasses\" \n      aria-hidden=\"true\">{{ text }}</i>\n  </span>\n</template>\n\n<script>\nimport MDCIconToggleFoundation from '@material/icon-toggle/foundation'\nimport { RippleBase } from '../ripple'\n\nexport default {\n  name: 'mdc-icon-toggle',\n  props: {\n    toggleOn: [String, Object],\n    toggleOff: [String, Object],\n    value: Boolean,\n    disabled: Boolean,\n    accent: Boolean\n  },\n  data() {\n    return {\n      classes: {\n        'mdc-icon-toggle--accent': this.accent\n      },\n      styles: {},\n      iconClasses: {},\n      tabIndex: 0,\n      text: ''\n    }\n  },\n  computed: {\n    toggleOnData() {\n      let toggle = this.toggleOn\n      return (\n        toggle &&\n        JSON.stringify(\n          typeof toggle === 'string'\n            ? {\n                content: toggle,\n                cssClass: 'material-icons'\n              }\n            : {\n                content: toggle.icon || toggle.content,\n                label: toggle.label,\n                cssClass: toggle.icon ? 'material-icons' : toggle.cssClass\n              }\n        )\n      )\n    },\n    toggleOffData() {\n      let toggle = this.toggleOff\n      return (\n        toggle &&\n        JSON.stringify(\n          typeof toggle === 'string'\n            ? {\n                content: toggle,\n                cssClass: 'material-icons'\n              }\n            : {\n                content: toggle.icon || toggle.content,\n                label: toggle.label,\n                cssClass: toggle.icon ? 'material-icons' : toggle.cssClass\n              }\n        )\n      )\n    }\n  },\n  watch: {\n    value(value) {\n      this.foundation && this.foundation.toggle(value)\n    },\n    disabled(disabled) {\n      this.foundation && this.foundation.setDisabled(disabled)\n    },\n    toggleOnData() {\n      this.foundation && this.foundation.refreshToggleData()\n    },\n    toggleOffData() {\n      this.foundation && this.foundation.refreshToggleData()\n    },\n    accent(value) {\n      this.$set(this.classes, 'mdc-icon-toggle--secondary', value)\n    }\n  },\n  mounted() {\n    this.foundation = new MDCIconToggleFoundation({\n      addClass: className => this.$set(this.iconClasses, className, true),\n      removeClass: className => this.$delete(this.iconClasses, className),\n      registerInteractionHandler: (evt, handler) =>\n        this.$el.addEventListener(evt, handler),\n      deregisterInteractionHandler: (evt, handler) =>\n        this.$el.removeEventListener(evt, handler),\n      setText: text => {\n        this.text = text\n      },\n      getTabIndex: () => this.tabIndex,\n      setTabIndex: tabIndex => {\n        this.tabIndex = tabIndex\n      },\n      getAttr: (name, value) => this.$el.getAttribute(name, value),\n      setAttr: (name, value) => {\n        this.$el.setAttribute(name, value)\n      },\n      rmAttr: name => {\n        this.$el.removeAttribute(name)\n      },\n      notifyChange: evtData => {\n        this.$emit('input', evtData.isOn)\n      }\n    })\n    this.foundation.init()\n    this.foundation.toggle(this.value)\n    this.foundation.setDisabled(this.disabled)\n\n    this.ripple = new RippleBase(this, {\n      isUnbounded: () => true,\n      isSurfaceActive: () => this.foundation.isKeyboardActivated()\n    })\n    this.ripple.init()\n  },\n  beforeDestroy() {\n    this.foundation.destroy()\n    this.ripple.destroy()\n  }\n}\n</script>\n","import { BasePlugin } from '../base'\nimport mdcIConToggle from './mdc-icon-toggle.vue'\n\nexport { mdcIConToggle }\n\nexport default BasePlugin({\n  mdcIConToggle\n})\n"],"names":["BasePlugin","components","version","install","vm","key","component","name","scope","Math","floor","random","toString","MDCFoundation","adapter","adapter_","MDCIconToggleAdapter","className","type","handler","text","tabIndex","value","evtData","cssClasses","ROOT","DISABLED","strings","DATA_TOGGLE_ON","DATA_TOGGLE_OFF","ARIA_PRESSED","ARIA_DISABLED","ARIA_LABEL","CHANGE_EVENT","MDCIconToggleFoundation","addClass","removeClass","registerInteractionHandler","deregisterInteractionHandler","setText","getTabIndex","setTabIndex","getAttr","setAttr","rmAttr","notifyChange","defaultAdapter","on_","disabled_","savedTabIndex_","toggleOnData_","toggleOffData_","clickHandler_","toggleFromEvt_","isHandlingKeydown_","keydownHandler_","evt","isSpace","preventDefault","keyupHandler_","refreshToggleData","parseJsonDataAttr_","toggle","isOn","classToRemove","cssClass","content","label","dataAttr","val","JSON","parse","isDisabled","keyboardKey","keyCode","IconToggleState","prototype","mdcIConToggle"],"mappings":"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"}